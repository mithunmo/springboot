//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.2-7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2011.11.12 at 09:23:49 PM EST 
//


package com.f9g4.businessobjects.common;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for SortCriteria complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="SortCriteria">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="criterion" type="{http://common.businessobjects.f9g4.com}SortCriterion" maxOccurs="unbounded"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "SortCriteria", propOrder = {
    "criterion"
})
public class SortCriteria implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(required = true)
    protected List<SortCriterion> criterion;

    /**
     * Default no-arg constructor
     * 
     */
    public SortCriteria() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public SortCriteria(final List<SortCriterion> criterion) {
        this.criterion = criterion;
    }

    /**
     * Gets the value of the criterion property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the criterion property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getCriterion().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link SortCriterion }
     * 
     * 
     */
    public List<SortCriterion> getCriterion() {
        if (criterion == null) {
            criterion = new ArrayList<SortCriterion>();
        }
        return this.criterion;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            List<SortCriterion> theCriterion;
            theCriterion = this.getCriterion();
            strategy.appendField(locator, this, "criterion", buffer, theCriterion);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof SortCriteria)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final SortCriteria that = ((SortCriteria) object);
        {
            List<SortCriterion> lhsCriterion;
            lhsCriterion = this.getCriterion();
            List<SortCriterion> rhsCriterion;
            rhsCriterion = that.getCriterion();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "criterion", lhsCriterion), LocatorUtils.property(thatLocator, "criterion", rhsCriterion), lhsCriterion, rhsCriterion)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            List<SortCriterion> theCriterion;
            theCriterion = this.getCriterion();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "criterion", theCriterion), currentHashCode, theCriterion);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof SortCriteria) {
            final SortCriteria copy = ((SortCriteria) draftCopy);
            if ((this.criterion!= null)&&(!this.criterion.isEmpty())) {
                List<SortCriterion> sourceCriterion;
                sourceCriterion = this.getCriterion();
                @SuppressWarnings("unchecked")
                List<SortCriterion> copyCriterion = ((List<SortCriterion> ) strategy.copy(LocatorUtils.property(locator, "criterion", sourceCriterion), sourceCriterion));
                copy.criterion = null;
                List<SortCriterion> uniqueCriterionl = copy.getCriterion();
                uniqueCriterionl.addAll(copyCriterion);
            } else {
                copy.criterion = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new SortCriteria();
    }

}
