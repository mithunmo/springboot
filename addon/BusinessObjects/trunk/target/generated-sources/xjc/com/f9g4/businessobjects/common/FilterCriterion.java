//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.2-7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.12.20 at 11:56:16 AM EST 
//


package com.f9g4.businessobjects.common;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for FilterCriterion complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="FilterCriterion">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="filterKey" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="operator" type="{http://common.businessobjects.f9g4.com}Operators"/>
 *         &lt;choice>
 *           &lt;element name="filterValue" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *           &lt;element name="filterValueList" type="{http://www.w3.org/2001/XMLSchema}string" maxOccurs="unbounded"/>
 *         &lt;/choice>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "FilterCriterion", propOrder = {
    "filterKey",
    "operator",
    "filterValue",
    "filterValueList"
})
public class FilterCriterion implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(required = true)
    protected String filterKey;
    @XmlElement(required = true)
    protected Operators operator;
    protected String filterValue;
    protected List<String> filterValueList;

    /**
     * Default no-arg constructor
     * 
     */
    public FilterCriterion() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public FilterCriterion(final String filterKey, final Operators operator, final String filterValue, final List<String> filterValueList) {
        this.filterKey = filterKey;
        this.operator = operator;
        this.filterValue = filterValue;
        this.filterValueList = filterValueList;
    }

    /**
     * Gets the value of the filterKey property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFilterKey() {
        return filterKey;
    }

    /**
     * Sets the value of the filterKey property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setFilterKey(String value) {
        this.filterKey = value;
    }

    /**
     * Gets the value of the operator property.
     * 
     * @return
     *     possible object is
     *     {@link Operators }
     *     
     */
    public Operators getOperator() {
        return operator;
    }

    /**
     * Sets the value of the operator property.
     * 
     * @param value
     *     allowed object is
     *     {@link Operators }
     *     
     */
    public void setOperator(Operators value) {
        this.operator = value;
    }

    /**
     * Gets the value of the filterValue property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFilterValue() {
        return filterValue;
    }

    /**
     * Sets the value of the filterValue property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setFilterValue(String value) {
        this.filterValue = value;
    }

    /**
     * Gets the value of the filterValueList property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the filterValueList property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getFilterValueList().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    public List<String> getFilterValueList() {
        if (filterValueList == null) {
            filterValueList = new ArrayList<String>();
        }
        return this.filterValueList;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            String theFilterKey;
            theFilterKey = this.getFilterKey();
            strategy.appendField(locator, this, "filterKey", buffer, theFilterKey);
        }
        {
            Operators theOperator;
            theOperator = this.getOperator();
            strategy.appendField(locator, this, "operator", buffer, theOperator);
        }
        {
            String theFilterValue;
            theFilterValue = this.getFilterValue();
            strategy.appendField(locator, this, "filterValue", buffer, theFilterValue);
        }
        {
            List<String> theFilterValueList;
            theFilterValueList = this.getFilterValueList();
            strategy.appendField(locator, this, "filterValueList", buffer, theFilterValueList);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof FilterCriterion)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final FilterCriterion that = ((FilterCriterion) object);
        {
            String lhsFilterKey;
            lhsFilterKey = this.getFilterKey();
            String rhsFilterKey;
            rhsFilterKey = that.getFilterKey();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "filterKey", lhsFilterKey), LocatorUtils.property(thatLocator, "filterKey", rhsFilterKey), lhsFilterKey, rhsFilterKey)) {
                return false;
            }
        }
        {
            Operators lhsOperator;
            lhsOperator = this.getOperator();
            Operators rhsOperator;
            rhsOperator = that.getOperator();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "operator", lhsOperator), LocatorUtils.property(thatLocator, "operator", rhsOperator), lhsOperator, rhsOperator)) {
                return false;
            }
        }
        {
            String lhsFilterValue;
            lhsFilterValue = this.getFilterValue();
            String rhsFilterValue;
            rhsFilterValue = that.getFilterValue();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "filterValue", lhsFilterValue), LocatorUtils.property(thatLocator, "filterValue", rhsFilterValue), lhsFilterValue, rhsFilterValue)) {
                return false;
            }
        }
        {
            List<String> lhsFilterValueList;
            lhsFilterValueList = this.getFilterValueList();
            List<String> rhsFilterValueList;
            rhsFilterValueList = that.getFilterValueList();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "filterValueList", lhsFilterValueList), LocatorUtils.property(thatLocator, "filterValueList", rhsFilterValueList), lhsFilterValueList, rhsFilterValueList)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            String theFilterKey;
            theFilterKey = this.getFilterKey();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "filterKey", theFilterKey), currentHashCode, theFilterKey);
        }
        {
            Operators theOperator;
            theOperator = this.getOperator();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "operator", theOperator), currentHashCode, theOperator);
        }
        {
            String theFilterValue;
            theFilterValue = this.getFilterValue();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "filterValue", theFilterValue), currentHashCode, theFilterValue);
        }
        {
            List<String> theFilterValueList;
            theFilterValueList = this.getFilterValueList();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "filterValueList", theFilterValueList), currentHashCode, theFilterValueList);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof FilterCriterion) {
            final FilterCriterion copy = ((FilterCriterion) draftCopy);
            if (this.filterKey!= null) {
                String sourceFilterKey;
                sourceFilterKey = this.getFilterKey();
                String copyFilterKey = ((String) strategy.copy(LocatorUtils.property(locator, "filterKey", sourceFilterKey), sourceFilterKey));
                copy.setFilterKey(copyFilterKey);
            } else {
                copy.filterKey = null;
            }
            if (this.operator!= null) {
                Operators sourceOperator;
                sourceOperator = this.getOperator();
                Operators copyOperator = ((Operators) strategy.copy(LocatorUtils.property(locator, "operator", sourceOperator), sourceOperator));
                copy.setOperator(copyOperator);
            } else {
                copy.operator = null;
            }
            if (this.filterValue!= null) {
                String sourceFilterValue;
                sourceFilterValue = this.getFilterValue();
                String copyFilterValue = ((String) strategy.copy(LocatorUtils.property(locator, "filterValue", sourceFilterValue), sourceFilterValue));
                copy.setFilterValue(copyFilterValue);
            } else {
                copy.filterValue = null;
            }
            if ((this.filterValueList!= null)&&(!this.filterValueList.isEmpty())) {
                List<String> sourceFilterValueList;
                sourceFilterValueList = this.getFilterValueList();
                @SuppressWarnings("unchecked")
                List<String> copyFilterValueList = ((List<String> ) strategy.copy(LocatorUtils.property(locator, "filterValueList", sourceFilterValueList), sourceFilterValueList));
                copy.filterValueList = null;
                List<String> uniqueFilterValueListl = copy.getFilterValueList();
                uniqueFilterValueListl.addAll(copyFilterValueList);
            } else {
                copy.filterValueList = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new FilterCriterion();
    }

}
