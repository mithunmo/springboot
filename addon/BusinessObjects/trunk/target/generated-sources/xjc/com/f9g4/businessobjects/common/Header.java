//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.2-7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.12.20 at 11:56:16 AM EST 
//


package com.f9g4.businessobjects.common;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for Header complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Header">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="contentType" type="{http://common.businessobjects.f9g4.com}ContentType"/>
 *         &lt;element name="applicationName" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="corelationId" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="activeMemberId" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Header", propOrder = {
    "contentType",
    "applicationName",
    "corelationId",
    "activeMemberId"
})
public class Header implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(required = true)
    protected ContentType contentType;
    @XmlElement(required = true)
    protected String applicationName;
    protected String corelationId;
    protected String activeMemberId;

    /**
     * Default no-arg constructor
     * 
     */
    public Header() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public Header(final ContentType contentType, final String applicationName, final String corelationId, final String activeMemberId) {
        this.contentType = contentType;
        this.applicationName = applicationName;
        this.corelationId = corelationId;
        this.activeMemberId = activeMemberId;
    }

    /**
     * Gets the value of the contentType property.
     * 
     * @return
     *     possible object is
     *     {@link ContentType }
     *     
     */
    public ContentType getContentType() {
        return contentType;
    }

    /**
     * Sets the value of the contentType property.
     * 
     * @param value
     *     allowed object is
     *     {@link ContentType }
     *     
     */
    public void setContentType(ContentType value) {
        this.contentType = value;
    }

    /**
     * Gets the value of the applicationName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getApplicationName() {
        return applicationName;
    }

    /**
     * Sets the value of the applicationName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setApplicationName(String value) {
        this.applicationName = value;
    }

    /**
     * Gets the value of the corelationId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCorelationId() {
        return corelationId;
    }

    /**
     * Sets the value of the corelationId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCorelationId(String value) {
        this.corelationId = value;
    }

    /**
     * Gets the value of the activeMemberId property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getActiveMemberId() {
        return activeMemberId;
    }

    /**
     * Sets the value of the activeMemberId property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setActiveMemberId(String value) {
        this.activeMemberId = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            ContentType theContentType;
            theContentType = this.getContentType();
            strategy.appendField(locator, this, "contentType", buffer, theContentType);
        }
        {
            String theApplicationName;
            theApplicationName = this.getApplicationName();
            strategy.appendField(locator, this, "applicationName", buffer, theApplicationName);
        }
        {
            String theCorelationId;
            theCorelationId = this.getCorelationId();
            strategy.appendField(locator, this, "corelationId", buffer, theCorelationId);
        }
        {
            String theActiveMemberId;
            theActiveMemberId = this.getActiveMemberId();
            strategy.appendField(locator, this, "activeMemberId", buffer, theActiveMemberId);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof Header)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final Header that = ((Header) object);
        {
            ContentType lhsContentType;
            lhsContentType = this.getContentType();
            ContentType rhsContentType;
            rhsContentType = that.getContentType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "contentType", lhsContentType), LocatorUtils.property(thatLocator, "contentType", rhsContentType), lhsContentType, rhsContentType)) {
                return false;
            }
        }
        {
            String lhsApplicationName;
            lhsApplicationName = this.getApplicationName();
            String rhsApplicationName;
            rhsApplicationName = that.getApplicationName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "applicationName", lhsApplicationName), LocatorUtils.property(thatLocator, "applicationName", rhsApplicationName), lhsApplicationName, rhsApplicationName)) {
                return false;
            }
        }
        {
            String lhsCorelationId;
            lhsCorelationId = this.getCorelationId();
            String rhsCorelationId;
            rhsCorelationId = that.getCorelationId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "corelationId", lhsCorelationId), LocatorUtils.property(thatLocator, "corelationId", rhsCorelationId), lhsCorelationId, rhsCorelationId)) {
                return false;
            }
        }
        {
            String lhsActiveMemberId;
            lhsActiveMemberId = this.getActiveMemberId();
            String rhsActiveMemberId;
            rhsActiveMemberId = that.getActiveMemberId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "activeMemberId", lhsActiveMemberId), LocatorUtils.property(thatLocator, "activeMemberId", rhsActiveMemberId), lhsActiveMemberId, rhsActiveMemberId)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            ContentType theContentType;
            theContentType = this.getContentType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "contentType", theContentType), currentHashCode, theContentType);
        }
        {
            String theApplicationName;
            theApplicationName = this.getApplicationName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "applicationName", theApplicationName), currentHashCode, theApplicationName);
        }
        {
            String theCorelationId;
            theCorelationId = this.getCorelationId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "corelationId", theCorelationId), currentHashCode, theCorelationId);
        }
        {
            String theActiveMemberId;
            theActiveMemberId = this.getActiveMemberId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "activeMemberId", theActiveMemberId), currentHashCode, theActiveMemberId);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof Header) {
            final Header copy = ((Header) draftCopy);
            if (this.contentType!= null) {
                ContentType sourceContentType;
                sourceContentType = this.getContentType();
                ContentType copyContentType = ((ContentType) strategy.copy(LocatorUtils.property(locator, "contentType", sourceContentType), sourceContentType));
                copy.setContentType(copyContentType);
            } else {
                copy.contentType = null;
            }
            if (this.applicationName!= null) {
                String sourceApplicationName;
                sourceApplicationName = this.getApplicationName();
                String copyApplicationName = ((String) strategy.copy(LocatorUtils.property(locator, "applicationName", sourceApplicationName), sourceApplicationName));
                copy.setApplicationName(copyApplicationName);
            } else {
                copy.applicationName = null;
            }
            if (this.corelationId!= null) {
                String sourceCorelationId;
                sourceCorelationId = this.getCorelationId();
                String copyCorelationId = ((String) strategy.copy(LocatorUtils.property(locator, "corelationId", sourceCorelationId), sourceCorelationId));
                copy.setCorelationId(copyCorelationId);
            } else {
                copy.corelationId = null;
            }
            if (this.activeMemberId!= null) {
                String sourceActiveMemberId;
                sourceActiveMemberId = this.getActiveMemberId();
                String copyActiveMemberId = ((String) strategy.copy(LocatorUtils.property(locator, "activeMemberId", sourceActiveMemberId), sourceActiveMemberId));
                copy.setActiveMemberId(copyActiveMemberId);
            } else {
                copy.activeMemberId = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new Header();
    }

}
