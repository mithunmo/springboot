//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.2-7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.12.20 at 11:56:16 AM EST 
//


package com.f9g4.businessobjects.common;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for PaginationResponse complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="PaginationResponse">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="totalNumberOfItems" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *         &lt;element name="startIndex" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *         &lt;element name="endIndex" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *         &lt;element name="totalNumberOfPages" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *         &lt;element name="totalItemsOnPage" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *         &lt;element name="currentPageNumber" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "PaginationResponse", propOrder = {
    "totalNumberOfItems",
    "startIndex",
    "endIndex",
    "totalNumberOfPages",
    "totalItemsOnPage",
    "currentPageNumber"
})
public class PaginationResponse implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected int totalNumberOfItems;
    protected int startIndex;
    protected int endIndex;
    protected int totalNumberOfPages;
    protected int totalItemsOnPage;
    protected int currentPageNumber;

    /**
     * Default no-arg constructor
     * 
     */
    public PaginationResponse() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public PaginationResponse(final int totalNumberOfItems, final int startIndex, final int endIndex, final int totalNumberOfPages, final int totalItemsOnPage, final int currentPageNumber) {
        this.totalNumberOfItems = totalNumberOfItems;
        this.startIndex = startIndex;
        this.endIndex = endIndex;
        this.totalNumberOfPages = totalNumberOfPages;
        this.totalItemsOnPage = totalItemsOnPage;
        this.currentPageNumber = currentPageNumber;
    }

    /**
     * Gets the value of the totalNumberOfItems property.
     * 
     */
    public int getTotalNumberOfItems() {
        return totalNumberOfItems;
    }

    /**
     * Sets the value of the totalNumberOfItems property.
     * 
     */
    public void setTotalNumberOfItems(int value) {
        this.totalNumberOfItems = value;
    }

    /**
     * Gets the value of the startIndex property.
     * 
     */
    public int getStartIndex() {
        return startIndex;
    }

    /**
     * Sets the value of the startIndex property.
     * 
     */
    public void setStartIndex(int value) {
        this.startIndex = value;
    }

    /**
     * Gets the value of the endIndex property.
     * 
     */
    public int getEndIndex() {
        return endIndex;
    }

    /**
     * Sets the value of the endIndex property.
     * 
     */
    public void setEndIndex(int value) {
        this.endIndex = value;
    }

    /**
     * Gets the value of the totalNumberOfPages property.
     * 
     */
    public int getTotalNumberOfPages() {
        return totalNumberOfPages;
    }

    /**
     * Sets the value of the totalNumberOfPages property.
     * 
     */
    public void setTotalNumberOfPages(int value) {
        this.totalNumberOfPages = value;
    }

    /**
     * Gets the value of the totalItemsOnPage property.
     * 
     */
    public int getTotalItemsOnPage() {
        return totalItemsOnPage;
    }

    /**
     * Sets the value of the totalItemsOnPage property.
     * 
     */
    public void setTotalItemsOnPage(int value) {
        this.totalItemsOnPage = value;
    }

    /**
     * Gets the value of the currentPageNumber property.
     * 
     */
    public int getCurrentPageNumber() {
        return currentPageNumber;
    }

    /**
     * Sets the value of the currentPageNumber property.
     * 
     */
    public void setCurrentPageNumber(int value) {
        this.currentPageNumber = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            int theTotalNumberOfItems;
            theTotalNumberOfItems = this.getTotalNumberOfItems();
            strategy.appendField(locator, this, "totalNumberOfItems", buffer, theTotalNumberOfItems);
        }
        {
            int theStartIndex;
            theStartIndex = this.getStartIndex();
            strategy.appendField(locator, this, "startIndex", buffer, theStartIndex);
        }
        {
            int theEndIndex;
            theEndIndex = this.getEndIndex();
            strategy.appendField(locator, this, "endIndex", buffer, theEndIndex);
        }
        {
            int theTotalNumberOfPages;
            theTotalNumberOfPages = this.getTotalNumberOfPages();
            strategy.appendField(locator, this, "totalNumberOfPages", buffer, theTotalNumberOfPages);
        }
        {
            int theTotalItemsOnPage;
            theTotalItemsOnPage = this.getTotalItemsOnPage();
            strategy.appendField(locator, this, "totalItemsOnPage", buffer, theTotalItemsOnPage);
        }
        {
            int theCurrentPageNumber;
            theCurrentPageNumber = this.getCurrentPageNumber();
            strategy.appendField(locator, this, "currentPageNumber", buffer, theCurrentPageNumber);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof PaginationResponse)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final PaginationResponse that = ((PaginationResponse) object);
        {
            int lhsTotalNumberOfItems;
            lhsTotalNumberOfItems = this.getTotalNumberOfItems();
            int rhsTotalNumberOfItems;
            rhsTotalNumberOfItems = that.getTotalNumberOfItems();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "totalNumberOfItems", lhsTotalNumberOfItems), LocatorUtils.property(thatLocator, "totalNumberOfItems", rhsTotalNumberOfItems), lhsTotalNumberOfItems, rhsTotalNumberOfItems)) {
                return false;
            }
        }
        {
            int lhsStartIndex;
            lhsStartIndex = this.getStartIndex();
            int rhsStartIndex;
            rhsStartIndex = that.getStartIndex();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "startIndex", lhsStartIndex), LocatorUtils.property(thatLocator, "startIndex", rhsStartIndex), lhsStartIndex, rhsStartIndex)) {
                return false;
            }
        }
        {
            int lhsEndIndex;
            lhsEndIndex = this.getEndIndex();
            int rhsEndIndex;
            rhsEndIndex = that.getEndIndex();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "endIndex", lhsEndIndex), LocatorUtils.property(thatLocator, "endIndex", rhsEndIndex), lhsEndIndex, rhsEndIndex)) {
                return false;
            }
        }
        {
            int lhsTotalNumberOfPages;
            lhsTotalNumberOfPages = this.getTotalNumberOfPages();
            int rhsTotalNumberOfPages;
            rhsTotalNumberOfPages = that.getTotalNumberOfPages();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "totalNumberOfPages", lhsTotalNumberOfPages), LocatorUtils.property(thatLocator, "totalNumberOfPages", rhsTotalNumberOfPages), lhsTotalNumberOfPages, rhsTotalNumberOfPages)) {
                return false;
            }
        }
        {
            int lhsTotalItemsOnPage;
            lhsTotalItemsOnPage = this.getTotalItemsOnPage();
            int rhsTotalItemsOnPage;
            rhsTotalItemsOnPage = that.getTotalItemsOnPage();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "totalItemsOnPage", lhsTotalItemsOnPage), LocatorUtils.property(thatLocator, "totalItemsOnPage", rhsTotalItemsOnPage), lhsTotalItemsOnPage, rhsTotalItemsOnPage)) {
                return false;
            }
        }
        {
            int lhsCurrentPageNumber;
            lhsCurrentPageNumber = this.getCurrentPageNumber();
            int rhsCurrentPageNumber;
            rhsCurrentPageNumber = that.getCurrentPageNumber();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "currentPageNumber", lhsCurrentPageNumber), LocatorUtils.property(thatLocator, "currentPageNumber", rhsCurrentPageNumber), lhsCurrentPageNumber, rhsCurrentPageNumber)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            int theTotalNumberOfItems;
            theTotalNumberOfItems = this.getTotalNumberOfItems();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "totalNumberOfItems", theTotalNumberOfItems), currentHashCode, theTotalNumberOfItems);
        }
        {
            int theStartIndex;
            theStartIndex = this.getStartIndex();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "startIndex", theStartIndex), currentHashCode, theStartIndex);
        }
        {
            int theEndIndex;
            theEndIndex = this.getEndIndex();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "endIndex", theEndIndex), currentHashCode, theEndIndex);
        }
        {
            int theTotalNumberOfPages;
            theTotalNumberOfPages = this.getTotalNumberOfPages();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "totalNumberOfPages", theTotalNumberOfPages), currentHashCode, theTotalNumberOfPages);
        }
        {
            int theTotalItemsOnPage;
            theTotalItemsOnPage = this.getTotalItemsOnPage();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "totalItemsOnPage", theTotalItemsOnPage), currentHashCode, theTotalItemsOnPage);
        }
        {
            int theCurrentPageNumber;
            theCurrentPageNumber = this.getCurrentPageNumber();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currentPageNumber", theCurrentPageNumber), currentHashCode, theCurrentPageNumber);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof PaginationResponse) {
            final PaginationResponse copy = ((PaginationResponse) draftCopy);
            int sourceTotalNumberOfItems;
            sourceTotalNumberOfItems = this.getTotalNumberOfItems();
            int copyTotalNumberOfItems = strategy.copy(LocatorUtils.property(locator, "totalNumberOfItems", sourceTotalNumberOfItems), sourceTotalNumberOfItems);
            copy.setTotalNumberOfItems(copyTotalNumberOfItems);
            int sourceStartIndex;
            sourceStartIndex = this.getStartIndex();
            int copyStartIndex = strategy.copy(LocatorUtils.property(locator, "startIndex", sourceStartIndex), sourceStartIndex);
            copy.setStartIndex(copyStartIndex);
            int sourceEndIndex;
            sourceEndIndex = this.getEndIndex();
            int copyEndIndex = strategy.copy(LocatorUtils.property(locator, "endIndex", sourceEndIndex), sourceEndIndex);
            copy.setEndIndex(copyEndIndex);
            int sourceTotalNumberOfPages;
            sourceTotalNumberOfPages = this.getTotalNumberOfPages();
            int copyTotalNumberOfPages = strategy.copy(LocatorUtils.property(locator, "totalNumberOfPages", sourceTotalNumberOfPages), sourceTotalNumberOfPages);
            copy.setTotalNumberOfPages(copyTotalNumberOfPages);
            int sourceTotalItemsOnPage;
            sourceTotalItemsOnPage = this.getTotalItemsOnPage();
            int copyTotalItemsOnPage = strategy.copy(LocatorUtils.property(locator, "totalItemsOnPage", sourceTotalItemsOnPage), sourceTotalItemsOnPage);
            copy.setTotalItemsOnPage(copyTotalItemsOnPage);
            int sourceCurrentPageNumber;
            sourceCurrentPageNumber = this.getCurrentPageNumber();
            int copyCurrentPageNumber = strategy.copy(LocatorUtils.property(locator, "currentPageNumber", sourceCurrentPageNumber), sourceCurrentPageNumber);
            copy.setCurrentPageNumber(copyCurrentPageNumber);
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new PaginationResponse();
    }

}
