//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.2-7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.12.20 at 11:56:16 AM EST 
//


package com.f9g4.businessobjects.domain;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for adLookupValuesDomain complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="adLookupValuesDomain">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="lookupValueId">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="lookupTypeId">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="lookupCode">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *               &lt;maxLength value="240"/>
 *               &lt;minLength value="1"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="description">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *               &lt;maxLength value="500"/>
 *               &lt;minLength value="1"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="activeStatus">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="langCode">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *               &lt;maxLength value="10"/>
 *               &lt;minLength value="1"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="createdby">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="lastupdateby">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="address" type="{http://domain.businessobjects.f9g4.com}adAddressDomain" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="userLanguages" type="{http://domain.businessobjects.f9g4.com}adUserLanguagesDomain" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="userMembership" type="{http://domain.businessobjects.f9g4.com}adUserMembershipDomain" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="userSkills" type="{http://domain.businessobjects.f9g4.com}adUserSkillsDomain" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="userEducations" type="{http://domain.businessobjects.f9g4.com}adUserEducationsDomain" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="userExpertises" type="{http://domain.businessobjects.f9g4.com}adUserExpertisesDomain" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="userSpecialities" type="{http://domain.businessobjects.f9g4.com}adUserSpecialitiesDomain" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="userDegaccs" type="{http://domain.businessobjects.f9g4.com}adUserDegaccsDomain" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="users" type="{http://domain.businessobjects.f9g4.com}adUsersDomain" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="pricingOptions" type="{http://domain.businessobjects.f9g4.com}stMemPricingOptionsDomain" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="termCondition" type="{http://domain.businessobjects.f9g4.com}stTermConditionDomain" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="boards" type="{http://domain.businessobjects.f9g4.com}trBoardDomain" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="messages" type="{http://domain.businessobjects.f9g4.com}trMessagesDomain" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="notification" type="{http://domain.businessobjects.f9g4.com}trNotificationQDomain" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="rating" type="{http://domain.businessobjects.f9g4.com}trRatingsDomain" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="searchLang" type="{http://domain.businessobjects.f9g4.com}trSearchLanguagesDomain" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="searchSkills" type="{http://domain.businessobjects.f9g4.com}trSearchSkillsDomain" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "adLookupValuesDomain", propOrder = {
    "lookupValueId",
    "lookupTypeId",
    "lookupCode",
    "description",
    "activeStatus",
    "langCode",
    "createdby",
    "lastupdateby",
    "address",
    "userLanguages",
    "userMembership",
    "userSkills",
    "userEducations",
    "userExpertises",
    "userSpecialities",
    "userDegaccs",
    "users",
    "pricingOptions",
    "termCondition",
    "boards",
    "messages",
    "notification",
    "rating",
    "searchLang",
    "searchSkills"
})
public class AdLookupValuesDomain implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected int lookupValueId;
    protected int lookupTypeId;
    @XmlElement(required = true)
    protected String lookupCode;
    @XmlElement(required = true)
    protected String description;
    protected int activeStatus;
    @XmlElement(required = true, defaultValue = "en-US")
    protected String langCode;
    protected int createdby;
    protected int lastupdateby;
    protected List<AdAddressDomain> address;
    protected List<AdUserLanguagesDomain> userLanguages;
    protected List<AdUserMembershipDomain> userMembership;
    protected List<AdUserSkillsDomain> userSkills;
    protected List<AdUserEducationsDomain> userEducations;
    protected List<AdUserExpertisesDomain> userExpertises;
    protected List<AdUserSpecialitiesDomain> userSpecialities;
    protected List<AdUserDegaccsDomain> userDegaccs;
    protected List<AdUsersDomain> users;
    protected List<StMemPricingOptionsDomain> pricingOptions;
    protected List<StTermConditionDomain> termCondition;
    protected List<TrBoardDomain> boards;
    protected List<TrMessagesDomain> messages;
    protected List<TrNotificationQDomain> notification;
    protected List<TrRatingsDomain> rating;
    protected List<TrSearchLanguagesDomain> searchLang;
    protected List<TrSearchSkillsDomain> searchSkills;

    /**
     * Default no-arg constructor
     * 
     */
    public AdLookupValuesDomain() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public AdLookupValuesDomain(final int lookupValueId, final int lookupTypeId, final String lookupCode, final String description, final int activeStatus, final String langCode, final int createdby, final int lastupdateby, final List<AdAddressDomain> address, final List<AdUserLanguagesDomain> userLanguages, final List<AdUserMembershipDomain> userMembership, final List<AdUserSkillsDomain> userSkills, final List<AdUserEducationsDomain> userEducations, final List<AdUserExpertisesDomain> userExpertises, final List<AdUserSpecialitiesDomain> userSpecialities, final List<AdUserDegaccsDomain> userDegaccs, final List<AdUsersDomain> users, final List<StMemPricingOptionsDomain> pricingOptions, final List<StTermConditionDomain> termCondition, final List<TrBoardDomain> boards, final List<TrMessagesDomain> messages, final List<TrNotificationQDomain> notification, final List<TrRatingsDomain> rating, final List<TrSearchLanguagesDomain> searchLang, final List<TrSearchSkillsDomain> searchSkills) {
        this.lookupValueId = lookupValueId;
        this.lookupTypeId = lookupTypeId;
        this.lookupCode = lookupCode;
        this.description = description;
        this.activeStatus = activeStatus;
        this.langCode = langCode;
        this.createdby = createdby;
        this.lastupdateby = lastupdateby;
        this.address = address;
        this.userLanguages = userLanguages;
        this.userMembership = userMembership;
        this.userSkills = userSkills;
        this.userEducations = userEducations;
        this.userExpertises = userExpertises;
        this.userSpecialities = userSpecialities;
        this.userDegaccs = userDegaccs;
        this.users = users;
        this.pricingOptions = pricingOptions;
        this.termCondition = termCondition;
        this.boards = boards;
        this.messages = messages;
        this.notification = notification;
        this.rating = rating;
        this.searchLang = searchLang;
        this.searchSkills = searchSkills;
    }

    /**
     * Gets the value of the lookupValueId property.
     * 
     */
    public int getLookupValueId() {
        return lookupValueId;
    }

    /**
     * Sets the value of the lookupValueId property.
     * 
     */
    public void setLookupValueId(int value) {
        this.lookupValueId = value;
    }

    /**
     * Gets the value of the lookupTypeId property.
     * 
     */
    public int getLookupTypeId() {
        return lookupTypeId;
    }

    /**
     * Sets the value of the lookupTypeId property.
     * 
     */
    public void setLookupTypeId(int value) {
        this.lookupTypeId = value;
    }

    /**
     * Gets the value of the lookupCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLookupCode() {
        return lookupCode;
    }

    /**
     * Sets the value of the lookupCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLookupCode(String value) {
        this.lookupCode = value;
    }

    /**
     * Gets the value of the description property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDescription(String value) {
        this.description = value;
    }

    /**
     * Gets the value of the activeStatus property.
     * 
     */
    public int getActiveStatus() {
        return activeStatus;
    }

    /**
     * Sets the value of the activeStatus property.
     * 
     */
    public void setActiveStatus(int value) {
        this.activeStatus = value;
    }

    /**
     * Gets the value of the langCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLangCode() {
        return langCode;
    }

    /**
     * Sets the value of the langCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLangCode(String value) {
        this.langCode = value;
    }

    /**
     * Gets the value of the createdby property.
     * 
     */
    public int getCreatedby() {
        return createdby;
    }

    /**
     * Sets the value of the createdby property.
     * 
     */
    public void setCreatedby(int value) {
        this.createdby = value;
    }

    /**
     * Gets the value of the lastupdateby property.
     * 
     */
    public int getLastupdateby() {
        return lastupdateby;
    }

    /**
     * Sets the value of the lastupdateby property.
     * 
     */
    public void setLastupdateby(int value) {
        this.lastupdateby = value;
    }

    /**
     * Gets the value of the address property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the address property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAddress().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AdAddressDomain }
     * 
     * 
     */
    public List<AdAddressDomain> getAddress() {
        if (address == null) {
            address = new ArrayList<AdAddressDomain>();
        }
        return this.address;
    }

    /**
     * Gets the value of the userLanguages property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the userLanguages property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getUserLanguages().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AdUserLanguagesDomain }
     * 
     * 
     */
    public List<AdUserLanguagesDomain> getUserLanguages() {
        if (userLanguages == null) {
            userLanguages = new ArrayList<AdUserLanguagesDomain>();
        }
        return this.userLanguages;
    }

    /**
     * Gets the value of the userMembership property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the userMembership property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getUserMembership().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AdUserMembershipDomain }
     * 
     * 
     */
    public List<AdUserMembershipDomain> getUserMembership() {
        if (userMembership == null) {
            userMembership = new ArrayList<AdUserMembershipDomain>();
        }
        return this.userMembership;
    }

    /**
     * Gets the value of the userSkills property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the userSkills property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getUserSkills().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AdUserSkillsDomain }
     * 
     * 
     */
    public List<AdUserSkillsDomain> getUserSkills() {
        if (userSkills == null) {
            userSkills = new ArrayList<AdUserSkillsDomain>();
        }
        return this.userSkills;
    }

    /**
     * Gets the value of the userEducations property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the userEducations property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getUserEducations().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AdUserEducationsDomain }
     * 
     * 
     */
    public List<AdUserEducationsDomain> getUserEducations() {
        if (userEducations == null) {
            userEducations = new ArrayList<AdUserEducationsDomain>();
        }
        return this.userEducations;
    }

    /**
     * Gets the value of the userExpertises property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the userExpertises property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getUserExpertises().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AdUserExpertisesDomain }
     * 
     * 
     */
    public List<AdUserExpertisesDomain> getUserExpertises() {
        if (userExpertises == null) {
            userExpertises = new ArrayList<AdUserExpertisesDomain>();
        }
        return this.userExpertises;
    }

    /**
     * Gets the value of the userSpecialities property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the userSpecialities property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getUserSpecialities().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AdUserSpecialitiesDomain }
     * 
     * 
     */
    public List<AdUserSpecialitiesDomain> getUserSpecialities() {
        if (userSpecialities == null) {
            userSpecialities = new ArrayList<AdUserSpecialitiesDomain>();
        }
        return this.userSpecialities;
    }

    /**
     * Gets the value of the userDegaccs property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the userDegaccs property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getUserDegaccs().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AdUserDegaccsDomain }
     * 
     * 
     */
    public List<AdUserDegaccsDomain> getUserDegaccs() {
        if (userDegaccs == null) {
            userDegaccs = new ArrayList<AdUserDegaccsDomain>();
        }
        return this.userDegaccs;
    }

    /**
     * Gets the value of the users property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the users property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getUsers().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AdUsersDomain }
     * 
     * 
     */
    public List<AdUsersDomain> getUsers() {
        if (users == null) {
            users = new ArrayList<AdUsersDomain>();
        }
        return this.users;
    }

    /**
     * Gets the value of the pricingOptions property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the pricingOptions property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPricingOptions().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link StMemPricingOptionsDomain }
     * 
     * 
     */
    public List<StMemPricingOptionsDomain> getPricingOptions() {
        if (pricingOptions == null) {
            pricingOptions = new ArrayList<StMemPricingOptionsDomain>();
        }
        return this.pricingOptions;
    }

    /**
     * Gets the value of the termCondition property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the termCondition property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getTermCondition().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link StTermConditionDomain }
     * 
     * 
     */
    public List<StTermConditionDomain> getTermCondition() {
        if (termCondition == null) {
            termCondition = new ArrayList<StTermConditionDomain>();
        }
        return this.termCondition;
    }

    /**
     * Gets the value of the boards property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the boards property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getBoards().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TrBoardDomain }
     * 
     * 
     */
    public List<TrBoardDomain> getBoards() {
        if (boards == null) {
            boards = new ArrayList<TrBoardDomain>();
        }
        return this.boards;
    }

    /**
     * Gets the value of the messages property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the messages property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getMessages().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TrMessagesDomain }
     * 
     * 
     */
    public List<TrMessagesDomain> getMessages() {
        if (messages == null) {
            messages = new ArrayList<TrMessagesDomain>();
        }
        return this.messages;
    }

    /**
     * Gets the value of the notification property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the notification property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getNotification().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TrNotificationQDomain }
     * 
     * 
     */
    public List<TrNotificationQDomain> getNotification() {
        if (notification == null) {
            notification = new ArrayList<TrNotificationQDomain>();
        }
        return this.notification;
    }

    /**
     * Gets the value of the rating property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the rating property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRating().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TrRatingsDomain }
     * 
     * 
     */
    public List<TrRatingsDomain> getRating() {
        if (rating == null) {
            rating = new ArrayList<TrRatingsDomain>();
        }
        return this.rating;
    }

    /**
     * Gets the value of the searchLang property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the searchLang property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSearchLang().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TrSearchLanguagesDomain }
     * 
     * 
     */
    public List<TrSearchLanguagesDomain> getSearchLang() {
        if (searchLang == null) {
            searchLang = new ArrayList<TrSearchLanguagesDomain>();
        }
        return this.searchLang;
    }

    /**
     * Gets the value of the searchSkills property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the searchSkills property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSearchSkills().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TrSearchSkillsDomain }
     * 
     * 
     */
    public List<TrSearchSkillsDomain> getSearchSkills() {
        if (searchSkills == null) {
            searchSkills = new ArrayList<TrSearchSkillsDomain>();
        }
        return this.searchSkills;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            int theLookupValueId;
            theLookupValueId = this.getLookupValueId();
            strategy.appendField(locator, this, "lookupValueId", buffer, theLookupValueId);
        }
        {
            int theLookupTypeId;
            theLookupTypeId = this.getLookupTypeId();
            strategy.appendField(locator, this, "lookupTypeId", buffer, theLookupTypeId);
        }
        {
            String theLookupCode;
            theLookupCode = this.getLookupCode();
            strategy.appendField(locator, this, "lookupCode", buffer, theLookupCode);
        }
        {
            String theDescription;
            theDescription = this.getDescription();
            strategy.appendField(locator, this, "description", buffer, theDescription);
        }
        {
            int theActiveStatus;
            theActiveStatus = this.getActiveStatus();
            strategy.appendField(locator, this, "activeStatus", buffer, theActiveStatus);
        }
        {
            String theLangCode;
            theLangCode = this.getLangCode();
            strategy.appendField(locator, this, "langCode", buffer, theLangCode);
        }
        {
            int theCreatedby;
            theCreatedby = this.getCreatedby();
            strategy.appendField(locator, this, "createdby", buffer, theCreatedby);
        }
        {
            int theLastupdateby;
            theLastupdateby = this.getLastupdateby();
            strategy.appendField(locator, this, "lastupdateby", buffer, theLastupdateby);
        }
        {
            List<AdAddressDomain> theAddress;
            theAddress = this.getAddress();
            strategy.appendField(locator, this, "address", buffer, theAddress);
        }
        {
            List<AdUserLanguagesDomain> theUserLanguages;
            theUserLanguages = this.getUserLanguages();
            strategy.appendField(locator, this, "userLanguages", buffer, theUserLanguages);
        }
        {
            List<AdUserMembershipDomain> theUserMembership;
            theUserMembership = this.getUserMembership();
            strategy.appendField(locator, this, "userMembership", buffer, theUserMembership);
        }
        {
            List<AdUserSkillsDomain> theUserSkills;
            theUserSkills = this.getUserSkills();
            strategy.appendField(locator, this, "userSkills", buffer, theUserSkills);
        }
        {
            List<AdUserEducationsDomain> theUserEducations;
            theUserEducations = this.getUserEducations();
            strategy.appendField(locator, this, "userEducations", buffer, theUserEducations);
        }
        {
            List<AdUserExpertisesDomain> theUserExpertises;
            theUserExpertises = this.getUserExpertises();
            strategy.appendField(locator, this, "userExpertises", buffer, theUserExpertises);
        }
        {
            List<AdUserSpecialitiesDomain> theUserSpecialities;
            theUserSpecialities = this.getUserSpecialities();
            strategy.appendField(locator, this, "userSpecialities", buffer, theUserSpecialities);
        }
        {
            List<AdUserDegaccsDomain> theUserDegaccs;
            theUserDegaccs = this.getUserDegaccs();
            strategy.appendField(locator, this, "userDegaccs", buffer, theUserDegaccs);
        }
        {
            List<AdUsersDomain> theUsers;
            theUsers = this.getUsers();
            strategy.appendField(locator, this, "users", buffer, theUsers);
        }
        {
            List<StMemPricingOptionsDomain> thePricingOptions;
            thePricingOptions = this.getPricingOptions();
            strategy.appendField(locator, this, "pricingOptions", buffer, thePricingOptions);
        }
        {
            List<StTermConditionDomain> theTermCondition;
            theTermCondition = this.getTermCondition();
            strategy.appendField(locator, this, "termCondition", buffer, theTermCondition);
        }
        {
            List<TrBoardDomain> theBoards;
            theBoards = this.getBoards();
            strategy.appendField(locator, this, "boards", buffer, theBoards);
        }
        {
            List<TrMessagesDomain> theMessages;
            theMessages = this.getMessages();
            strategy.appendField(locator, this, "messages", buffer, theMessages);
        }
        {
            List<TrNotificationQDomain> theNotification;
            theNotification = this.getNotification();
            strategy.appendField(locator, this, "notification", buffer, theNotification);
        }
        {
            List<TrRatingsDomain> theRating;
            theRating = this.getRating();
            strategy.appendField(locator, this, "rating", buffer, theRating);
        }
        {
            List<TrSearchLanguagesDomain> theSearchLang;
            theSearchLang = this.getSearchLang();
            strategy.appendField(locator, this, "searchLang", buffer, theSearchLang);
        }
        {
            List<TrSearchSkillsDomain> theSearchSkills;
            theSearchSkills = this.getSearchSkills();
            strategy.appendField(locator, this, "searchSkills", buffer, theSearchSkills);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof AdLookupValuesDomain)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final AdLookupValuesDomain that = ((AdLookupValuesDomain) object);
        {
            int lhsLookupValueId;
            lhsLookupValueId = this.getLookupValueId();
            int rhsLookupValueId;
            rhsLookupValueId = that.getLookupValueId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lookupValueId", lhsLookupValueId), LocatorUtils.property(thatLocator, "lookupValueId", rhsLookupValueId), lhsLookupValueId, rhsLookupValueId)) {
                return false;
            }
        }
        {
            int lhsLookupTypeId;
            lhsLookupTypeId = this.getLookupTypeId();
            int rhsLookupTypeId;
            rhsLookupTypeId = that.getLookupTypeId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lookupTypeId", lhsLookupTypeId), LocatorUtils.property(thatLocator, "lookupTypeId", rhsLookupTypeId), lhsLookupTypeId, rhsLookupTypeId)) {
                return false;
            }
        }
        {
            String lhsLookupCode;
            lhsLookupCode = this.getLookupCode();
            String rhsLookupCode;
            rhsLookupCode = that.getLookupCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lookupCode", lhsLookupCode), LocatorUtils.property(thatLocator, "lookupCode", rhsLookupCode), lhsLookupCode, rhsLookupCode)) {
                return false;
            }
        }
        {
            String lhsDescription;
            lhsDescription = this.getDescription();
            String rhsDescription;
            rhsDescription = that.getDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "description", lhsDescription), LocatorUtils.property(thatLocator, "description", rhsDescription), lhsDescription, rhsDescription)) {
                return false;
            }
        }
        {
            int lhsActiveStatus;
            lhsActiveStatus = this.getActiveStatus();
            int rhsActiveStatus;
            rhsActiveStatus = that.getActiveStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "activeStatus", lhsActiveStatus), LocatorUtils.property(thatLocator, "activeStatus", rhsActiveStatus), lhsActiveStatus, rhsActiveStatus)) {
                return false;
            }
        }
        {
            String lhsLangCode;
            lhsLangCode = this.getLangCode();
            String rhsLangCode;
            rhsLangCode = that.getLangCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "langCode", lhsLangCode), LocatorUtils.property(thatLocator, "langCode", rhsLangCode), lhsLangCode, rhsLangCode)) {
                return false;
            }
        }
        {
            int lhsCreatedby;
            lhsCreatedby = this.getCreatedby();
            int rhsCreatedby;
            rhsCreatedby = that.getCreatedby();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "createdby", lhsCreatedby), LocatorUtils.property(thatLocator, "createdby", rhsCreatedby), lhsCreatedby, rhsCreatedby)) {
                return false;
            }
        }
        {
            int lhsLastupdateby;
            lhsLastupdateby = this.getLastupdateby();
            int rhsLastupdateby;
            rhsLastupdateby = that.getLastupdateby();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lastupdateby", lhsLastupdateby), LocatorUtils.property(thatLocator, "lastupdateby", rhsLastupdateby), lhsLastupdateby, rhsLastupdateby)) {
                return false;
            }
        }
        {
            List<AdAddressDomain> lhsAddress;
            lhsAddress = this.getAddress();
            List<AdAddressDomain> rhsAddress;
            rhsAddress = that.getAddress();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "address", lhsAddress), LocatorUtils.property(thatLocator, "address", rhsAddress), lhsAddress, rhsAddress)) {
                return false;
            }
        }
        {
            List<AdUserLanguagesDomain> lhsUserLanguages;
            lhsUserLanguages = this.getUserLanguages();
            List<AdUserLanguagesDomain> rhsUserLanguages;
            rhsUserLanguages = that.getUserLanguages();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "userLanguages", lhsUserLanguages), LocatorUtils.property(thatLocator, "userLanguages", rhsUserLanguages), lhsUserLanguages, rhsUserLanguages)) {
                return false;
            }
        }
        {
            List<AdUserMembershipDomain> lhsUserMembership;
            lhsUserMembership = this.getUserMembership();
            List<AdUserMembershipDomain> rhsUserMembership;
            rhsUserMembership = that.getUserMembership();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "userMembership", lhsUserMembership), LocatorUtils.property(thatLocator, "userMembership", rhsUserMembership), lhsUserMembership, rhsUserMembership)) {
                return false;
            }
        }
        {
            List<AdUserSkillsDomain> lhsUserSkills;
            lhsUserSkills = this.getUserSkills();
            List<AdUserSkillsDomain> rhsUserSkills;
            rhsUserSkills = that.getUserSkills();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "userSkills", lhsUserSkills), LocatorUtils.property(thatLocator, "userSkills", rhsUserSkills), lhsUserSkills, rhsUserSkills)) {
                return false;
            }
        }
        {
            List<AdUserEducationsDomain> lhsUserEducations;
            lhsUserEducations = this.getUserEducations();
            List<AdUserEducationsDomain> rhsUserEducations;
            rhsUserEducations = that.getUserEducations();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "userEducations", lhsUserEducations), LocatorUtils.property(thatLocator, "userEducations", rhsUserEducations), lhsUserEducations, rhsUserEducations)) {
                return false;
            }
        }
        {
            List<AdUserExpertisesDomain> lhsUserExpertises;
            lhsUserExpertises = this.getUserExpertises();
            List<AdUserExpertisesDomain> rhsUserExpertises;
            rhsUserExpertises = that.getUserExpertises();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "userExpertises", lhsUserExpertises), LocatorUtils.property(thatLocator, "userExpertises", rhsUserExpertises), lhsUserExpertises, rhsUserExpertises)) {
                return false;
            }
        }
        {
            List<AdUserSpecialitiesDomain> lhsUserSpecialities;
            lhsUserSpecialities = this.getUserSpecialities();
            List<AdUserSpecialitiesDomain> rhsUserSpecialities;
            rhsUserSpecialities = that.getUserSpecialities();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "userSpecialities", lhsUserSpecialities), LocatorUtils.property(thatLocator, "userSpecialities", rhsUserSpecialities), lhsUserSpecialities, rhsUserSpecialities)) {
                return false;
            }
        }
        {
            List<AdUserDegaccsDomain> lhsUserDegaccs;
            lhsUserDegaccs = this.getUserDegaccs();
            List<AdUserDegaccsDomain> rhsUserDegaccs;
            rhsUserDegaccs = that.getUserDegaccs();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "userDegaccs", lhsUserDegaccs), LocatorUtils.property(thatLocator, "userDegaccs", rhsUserDegaccs), lhsUserDegaccs, rhsUserDegaccs)) {
                return false;
            }
        }
        {
            List<AdUsersDomain> lhsUsers;
            lhsUsers = this.getUsers();
            List<AdUsersDomain> rhsUsers;
            rhsUsers = that.getUsers();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "users", lhsUsers), LocatorUtils.property(thatLocator, "users", rhsUsers), lhsUsers, rhsUsers)) {
                return false;
            }
        }
        {
            List<StMemPricingOptionsDomain> lhsPricingOptions;
            lhsPricingOptions = this.getPricingOptions();
            List<StMemPricingOptionsDomain> rhsPricingOptions;
            rhsPricingOptions = that.getPricingOptions();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "pricingOptions", lhsPricingOptions), LocatorUtils.property(thatLocator, "pricingOptions", rhsPricingOptions), lhsPricingOptions, rhsPricingOptions)) {
                return false;
            }
        }
        {
            List<StTermConditionDomain> lhsTermCondition;
            lhsTermCondition = this.getTermCondition();
            List<StTermConditionDomain> rhsTermCondition;
            rhsTermCondition = that.getTermCondition();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "termCondition", lhsTermCondition), LocatorUtils.property(thatLocator, "termCondition", rhsTermCondition), lhsTermCondition, rhsTermCondition)) {
                return false;
            }
        }
        {
            List<TrBoardDomain> lhsBoards;
            lhsBoards = this.getBoards();
            List<TrBoardDomain> rhsBoards;
            rhsBoards = that.getBoards();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "boards", lhsBoards), LocatorUtils.property(thatLocator, "boards", rhsBoards), lhsBoards, rhsBoards)) {
                return false;
            }
        }
        {
            List<TrMessagesDomain> lhsMessages;
            lhsMessages = this.getMessages();
            List<TrMessagesDomain> rhsMessages;
            rhsMessages = that.getMessages();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "messages", lhsMessages), LocatorUtils.property(thatLocator, "messages", rhsMessages), lhsMessages, rhsMessages)) {
                return false;
            }
        }
        {
            List<TrNotificationQDomain> lhsNotification;
            lhsNotification = this.getNotification();
            List<TrNotificationQDomain> rhsNotification;
            rhsNotification = that.getNotification();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "notification", lhsNotification), LocatorUtils.property(thatLocator, "notification", rhsNotification), lhsNotification, rhsNotification)) {
                return false;
            }
        }
        {
            List<TrRatingsDomain> lhsRating;
            lhsRating = this.getRating();
            List<TrRatingsDomain> rhsRating;
            rhsRating = that.getRating();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "rating", lhsRating), LocatorUtils.property(thatLocator, "rating", rhsRating), lhsRating, rhsRating)) {
                return false;
            }
        }
        {
            List<TrSearchLanguagesDomain> lhsSearchLang;
            lhsSearchLang = this.getSearchLang();
            List<TrSearchLanguagesDomain> rhsSearchLang;
            rhsSearchLang = that.getSearchLang();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "searchLang", lhsSearchLang), LocatorUtils.property(thatLocator, "searchLang", rhsSearchLang), lhsSearchLang, rhsSearchLang)) {
                return false;
            }
        }
        {
            List<TrSearchSkillsDomain> lhsSearchSkills;
            lhsSearchSkills = this.getSearchSkills();
            List<TrSearchSkillsDomain> rhsSearchSkills;
            rhsSearchSkills = that.getSearchSkills();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "searchSkills", lhsSearchSkills), LocatorUtils.property(thatLocator, "searchSkills", rhsSearchSkills), lhsSearchSkills, rhsSearchSkills)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            int theLookupValueId;
            theLookupValueId = this.getLookupValueId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lookupValueId", theLookupValueId), currentHashCode, theLookupValueId);
        }
        {
            int theLookupTypeId;
            theLookupTypeId = this.getLookupTypeId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lookupTypeId", theLookupTypeId), currentHashCode, theLookupTypeId);
        }
        {
            String theLookupCode;
            theLookupCode = this.getLookupCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lookupCode", theLookupCode), currentHashCode, theLookupCode);
        }
        {
            String theDescription;
            theDescription = this.getDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "description", theDescription), currentHashCode, theDescription);
        }
        {
            int theActiveStatus;
            theActiveStatus = this.getActiveStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "activeStatus", theActiveStatus), currentHashCode, theActiveStatus);
        }
        {
            String theLangCode;
            theLangCode = this.getLangCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "langCode", theLangCode), currentHashCode, theLangCode);
        }
        {
            int theCreatedby;
            theCreatedby = this.getCreatedby();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "createdby", theCreatedby), currentHashCode, theCreatedby);
        }
        {
            int theLastupdateby;
            theLastupdateby = this.getLastupdateby();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lastupdateby", theLastupdateby), currentHashCode, theLastupdateby);
        }
        {
            List<AdAddressDomain> theAddress;
            theAddress = this.getAddress();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "address", theAddress), currentHashCode, theAddress);
        }
        {
            List<AdUserLanguagesDomain> theUserLanguages;
            theUserLanguages = this.getUserLanguages();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "userLanguages", theUserLanguages), currentHashCode, theUserLanguages);
        }
        {
            List<AdUserMembershipDomain> theUserMembership;
            theUserMembership = this.getUserMembership();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "userMembership", theUserMembership), currentHashCode, theUserMembership);
        }
        {
            List<AdUserSkillsDomain> theUserSkills;
            theUserSkills = this.getUserSkills();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "userSkills", theUserSkills), currentHashCode, theUserSkills);
        }
        {
            List<AdUserEducationsDomain> theUserEducations;
            theUserEducations = this.getUserEducations();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "userEducations", theUserEducations), currentHashCode, theUserEducations);
        }
        {
            List<AdUserExpertisesDomain> theUserExpertises;
            theUserExpertises = this.getUserExpertises();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "userExpertises", theUserExpertises), currentHashCode, theUserExpertises);
        }
        {
            List<AdUserSpecialitiesDomain> theUserSpecialities;
            theUserSpecialities = this.getUserSpecialities();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "userSpecialities", theUserSpecialities), currentHashCode, theUserSpecialities);
        }
        {
            List<AdUserDegaccsDomain> theUserDegaccs;
            theUserDegaccs = this.getUserDegaccs();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "userDegaccs", theUserDegaccs), currentHashCode, theUserDegaccs);
        }
        {
            List<AdUsersDomain> theUsers;
            theUsers = this.getUsers();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "users", theUsers), currentHashCode, theUsers);
        }
        {
            List<StMemPricingOptionsDomain> thePricingOptions;
            thePricingOptions = this.getPricingOptions();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "pricingOptions", thePricingOptions), currentHashCode, thePricingOptions);
        }
        {
            List<StTermConditionDomain> theTermCondition;
            theTermCondition = this.getTermCondition();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "termCondition", theTermCondition), currentHashCode, theTermCondition);
        }
        {
            List<TrBoardDomain> theBoards;
            theBoards = this.getBoards();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "boards", theBoards), currentHashCode, theBoards);
        }
        {
            List<TrMessagesDomain> theMessages;
            theMessages = this.getMessages();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "messages", theMessages), currentHashCode, theMessages);
        }
        {
            List<TrNotificationQDomain> theNotification;
            theNotification = this.getNotification();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "notification", theNotification), currentHashCode, theNotification);
        }
        {
            List<TrRatingsDomain> theRating;
            theRating = this.getRating();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "rating", theRating), currentHashCode, theRating);
        }
        {
            List<TrSearchLanguagesDomain> theSearchLang;
            theSearchLang = this.getSearchLang();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "searchLang", theSearchLang), currentHashCode, theSearchLang);
        }
        {
            List<TrSearchSkillsDomain> theSearchSkills;
            theSearchSkills = this.getSearchSkills();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "searchSkills", theSearchSkills), currentHashCode, theSearchSkills);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof AdLookupValuesDomain) {
            final AdLookupValuesDomain copy = ((AdLookupValuesDomain) draftCopy);
            int sourceLookupValueId;
            sourceLookupValueId = this.getLookupValueId();
            int copyLookupValueId = strategy.copy(LocatorUtils.property(locator, "lookupValueId", sourceLookupValueId), sourceLookupValueId);
            copy.setLookupValueId(copyLookupValueId);
            int sourceLookupTypeId;
            sourceLookupTypeId = this.getLookupTypeId();
            int copyLookupTypeId = strategy.copy(LocatorUtils.property(locator, "lookupTypeId", sourceLookupTypeId), sourceLookupTypeId);
            copy.setLookupTypeId(copyLookupTypeId);
            if (this.lookupCode!= null) {
                String sourceLookupCode;
                sourceLookupCode = this.getLookupCode();
                String copyLookupCode = ((String) strategy.copy(LocatorUtils.property(locator, "lookupCode", sourceLookupCode), sourceLookupCode));
                copy.setLookupCode(copyLookupCode);
            } else {
                copy.lookupCode = null;
            }
            if (this.description!= null) {
                String sourceDescription;
                sourceDescription = this.getDescription();
                String copyDescription = ((String) strategy.copy(LocatorUtils.property(locator, "description", sourceDescription), sourceDescription));
                copy.setDescription(copyDescription);
            } else {
                copy.description = null;
            }
            int sourceActiveStatus;
            sourceActiveStatus = this.getActiveStatus();
            int copyActiveStatus = strategy.copy(LocatorUtils.property(locator, "activeStatus", sourceActiveStatus), sourceActiveStatus);
            copy.setActiveStatus(copyActiveStatus);
            if (this.langCode!= null) {
                String sourceLangCode;
                sourceLangCode = this.getLangCode();
                String copyLangCode = ((String) strategy.copy(LocatorUtils.property(locator, "langCode", sourceLangCode), sourceLangCode));
                copy.setLangCode(copyLangCode);
            } else {
                copy.langCode = null;
            }
            int sourceCreatedby;
            sourceCreatedby = this.getCreatedby();
            int copyCreatedby = strategy.copy(LocatorUtils.property(locator, "createdby", sourceCreatedby), sourceCreatedby);
            copy.setCreatedby(copyCreatedby);
            int sourceLastupdateby;
            sourceLastupdateby = this.getLastupdateby();
            int copyLastupdateby = strategy.copy(LocatorUtils.property(locator, "lastupdateby", sourceLastupdateby), sourceLastupdateby);
            copy.setLastupdateby(copyLastupdateby);
            if ((this.address!= null)&&(!this.address.isEmpty())) {
                List<AdAddressDomain> sourceAddress;
                sourceAddress = this.getAddress();
                @SuppressWarnings("unchecked")
                List<AdAddressDomain> copyAddress = ((List<AdAddressDomain> ) strategy.copy(LocatorUtils.property(locator, "address", sourceAddress), sourceAddress));
                copy.address = null;
                List<AdAddressDomain> uniqueAddressl = copy.getAddress();
                uniqueAddressl.addAll(copyAddress);
            } else {
                copy.address = null;
            }
            if ((this.userLanguages!= null)&&(!this.userLanguages.isEmpty())) {
                List<AdUserLanguagesDomain> sourceUserLanguages;
                sourceUserLanguages = this.getUserLanguages();
                @SuppressWarnings("unchecked")
                List<AdUserLanguagesDomain> copyUserLanguages = ((List<AdUserLanguagesDomain> ) strategy.copy(LocatorUtils.property(locator, "userLanguages", sourceUserLanguages), sourceUserLanguages));
                copy.userLanguages = null;
                List<AdUserLanguagesDomain> uniqueUserLanguagesl = copy.getUserLanguages();
                uniqueUserLanguagesl.addAll(copyUserLanguages);
            } else {
                copy.userLanguages = null;
            }
            if ((this.userMembership!= null)&&(!this.userMembership.isEmpty())) {
                List<AdUserMembershipDomain> sourceUserMembership;
                sourceUserMembership = this.getUserMembership();
                @SuppressWarnings("unchecked")
                List<AdUserMembershipDomain> copyUserMembership = ((List<AdUserMembershipDomain> ) strategy.copy(LocatorUtils.property(locator, "userMembership", sourceUserMembership), sourceUserMembership));
                copy.userMembership = null;
                List<AdUserMembershipDomain> uniqueUserMembershipl = copy.getUserMembership();
                uniqueUserMembershipl.addAll(copyUserMembership);
            } else {
                copy.userMembership = null;
            }
            if ((this.userSkills!= null)&&(!this.userSkills.isEmpty())) {
                List<AdUserSkillsDomain> sourceUserSkills;
                sourceUserSkills = this.getUserSkills();
                @SuppressWarnings("unchecked")
                List<AdUserSkillsDomain> copyUserSkills = ((List<AdUserSkillsDomain> ) strategy.copy(LocatorUtils.property(locator, "userSkills", sourceUserSkills), sourceUserSkills));
                copy.userSkills = null;
                List<AdUserSkillsDomain> uniqueUserSkillsl = copy.getUserSkills();
                uniqueUserSkillsl.addAll(copyUserSkills);
            } else {
                copy.userSkills = null;
            }
            if ((this.userEducations!= null)&&(!this.userEducations.isEmpty())) {
                List<AdUserEducationsDomain> sourceUserEducations;
                sourceUserEducations = this.getUserEducations();
                @SuppressWarnings("unchecked")
                List<AdUserEducationsDomain> copyUserEducations = ((List<AdUserEducationsDomain> ) strategy.copy(LocatorUtils.property(locator, "userEducations", sourceUserEducations), sourceUserEducations));
                copy.userEducations = null;
                List<AdUserEducationsDomain> uniqueUserEducationsl = copy.getUserEducations();
                uniqueUserEducationsl.addAll(copyUserEducations);
            } else {
                copy.userEducations = null;
            }
            if ((this.userExpertises!= null)&&(!this.userExpertises.isEmpty())) {
                List<AdUserExpertisesDomain> sourceUserExpertises;
                sourceUserExpertises = this.getUserExpertises();
                @SuppressWarnings("unchecked")
                List<AdUserExpertisesDomain> copyUserExpertises = ((List<AdUserExpertisesDomain> ) strategy.copy(LocatorUtils.property(locator, "userExpertises", sourceUserExpertises), sourceUserExpertises));
                copy.userExpertises = null;
                List<AdUserExpertisesDomain> uniqueUserExpertisesl = copy.getUserExpertises();
                uniqueUserExpertisesl.addAll(copyUserExpertises);
            } else {
                copy.userExpertises = null;
            }
            if ((this.userSpecialities!= null)&&(!this.userSpecialities.isEmpty())) {
                List<AdUserSpecialitiesDomain> sourceUserSpecialities;
                sourceUserSpecialities = this.getUserSpecialities();
                @SuppressWarnings("unchecked")
                List<AdUserSpecialitiesDomain> copyUserSpecialities = ((List<AdUserSpecialitiesDomain> ) strategy.copy(LocatorUtils.property(locator, "userSpecialities", sourceUserSpecialities), sourceUserSpecialities));
                copy.userSpecialities = null;
                List<AdUserSpecialitiesDomain> uniqueUserSpecialitiesl = copy.getUserSpecialities();
                uniqueUserSpecialitiesl.addAll(copyUserSpecialities);
            } else {
                copy.userSpecialities = null;
            }
            if ((this.userDegaccs!= null)&&(!this.userDegaccs.isEmpty())) {
                List<AdUserDegaccsDomain> sourceUserDegaccs;
                sourceUserDegaccs = this.getUserDegaccs();
                @SuppressWarnings("unchecked")
                List<AdUserDegaccsDomain> copyUserDegaccs = ((List<AdUserDegaccsDomain> ) strategy.copy(LocatorUtils.property(locator, "userDegaccs", sourceUserDegaccs), sourceUserDegaccs));
                copy.userDegaccs = null;
                List<AdUserDegaccsDomain> uniqueUserDegaccsl = copy.getUserDegaccs();
                uniqueUserDegaccsl.addAll(copyUserDegaccs);
            } else {
                copy.userDegaccs = null;
            }
            if ((this.users!= null)&&(!this.users.isEmpty())) {
                List<AdUsersDomain> sourceUsers;
                sourceUsers = this.getUsers();
                @SuppressWarnings("unchecked")
                List<AdUsersDomain> copyUsers = ((List<AdUsersDomain> ) strategy.copy(LocatorUtils.property(locator, "users", sourceUsers), sourceUsers));
                copy.users = null;
                List<AdUsersDomain> uniqueUsersl = copy.getUsers();
                uniqueUsersl.addAll(copyUsers);
            } else {
                copy.users = null;
            }
            if ((this.pricingOptions!= null)&&(!this.pricingOptions.isEmpty())) {
                List<StMemPricingOptionsDomain> sourcePricingOptions;
                sourcePricingOptions = this.getPricingOptions();
                @SuppressWarnings("unchecked")
                List<StMemPricingOptionsDomain> copyPricingOptions = ((List<StMemPricingOptionsDomain> ) strategy.copy(LocatorUtils.property(locator, "pricingOptions", sourcePricingOptions), sourcePricingOptions));
                copy.pricingOptions = null;
                List<StMemPricingOptionsDomain> uniquePricingOptionsl = copy.getPricingOptions();
                uniquePricingOptionsl.addAll(copyPricingOptions);
            } else {
                copy.pricingOptions = null;
            }
            if ((this.termCondition!= null)&&(!this.termCondition.isEmpty())) {
                List<StTermConditionDomain> sourceTermCondition;
                sourceTermCondition = this.getTermCondition();
                @SuppressWarnings("unchecked")
                List<StTermConditionDomain> copyTermCondition = ((List<StTermConditionDomain> ) strategy.copy(LocatorUtils.property(locator, "termCondition", sourceTermCondition), sourceTermCondition));
                copy.termCondition = null;
                List<StTermConditionDomain> uniqueTermConditionl = copy.getTermCondition();
                uniqueTermConditionl.addAll(copyTermCondition);
            } else {
                copy.termCondition = null;
            }
            if ((this.boards!= null)&&(!this.boards.isEmpty())) {
                List<TrBoardDomain> sourceBoards;
                sourceBoards = this.getBoards();
                @SuppressWarnings("unchecked")
                List<TrBoardDomain> copyBoards = ((List<TrBoardDomain> ) strategy.copy(LocatorUtils.property(locator, "boards", sourceBoards), sourceBoards));
                copy.boards = null;
                List<TrBoardDomain> uniqueBoardsl = copy.getBoards();
                uniqueBoardsl.addAll(copyBoards);
            } else {
                copy.boards = null;
            }
            if ((this.messages!= null)&&(!this.messages.isEmpty())) {
                List<TrMessagesDomain> sourceMessages;
                sourceMessages = this.getMessages();
                @SuppressWarnings("unchecked")
                List<TrMessagesDomain> copyMessages = ((List<TrMessagesDomain> ) strategy.copy(LocatorUtils.property(locator, "messages", sourceMessages), sourceMessages));
                copy.messages = null;
                List<TrMessagesDomain> uniqueMessagesl = copy.getMessages();
                uniqueMessagesl.addAll(copyMessages);
            } else {
                copy.messages = null;
            }
            if ((this.notification!= null)&&(!this.notification.isEmpty())) {
                List<TrNotificationQDomain> sourceNotification;
                sourceNotification = this.getNotification();
                @SuppressWarnings("unchecked")
                List<TrNotificationQDomain> copyNotification = ((List<TrNotificationQDomain> ) strategy.copy(LocatorUtils.property(locator, "notification", sourceNotification), sourceNotification));
                copy.notification = null;
                List<TrNotificationQDomain> uniqueNotificationl = copy.getNotification();
                uniqueNotificationl.addAll(copyNotification);
            } else {
                copy.notification = null;
            }
            if ((this.rating!= null)&&(!this.rating.isEmpty())) {
                List<TrRatingsDomain> sourceRating;
                sourceRating = this.getRating();
                @SuppressWarnings("unchecked")
                List<TrRatingsDomain> copyRating = ((List<TrRatingsDomain> ) strategy.copy(LocatorUtils.property(locator, "rating", sourceRating), sourceRating));
                copy.rating = null;
                List<TrRatingsDomain> uniqueRatingl = copy.getRating();
                uniqueRatingl.addAll(copyRating);
            } else {
                copy.rating = null;
            }
            if ((this.searchLang!= null)&&(!this.searchLang.isEmpty())) {
                List<TrSearchLanguagesDomain> sourceSearchLang;
                sourceSearchLang = this.getSearchLang();
                @SuppressWarnings("unchecked")
                List<TrSearchLanguagesDomain> copySearchLang = ((List<TrSearchLanguagesDomain> ) strategy.copy(LocatorUtils.property(locator, "searchLang", sourceSearchLang), sourceSearchLang));
                copy.searchLang = null;
                List<TrSearchLanguagesDomain> uniqueSearchLangl = copy.getSearchLang();
                uniqueSearchLangl.addAll(copySearchLang);
            } else {
                copy.searchLang = null;
            }
            if ((this.searchSkills!= null)&&(!this.searchSkills.isEmpty())) {
                List<TrSearchSkillsDomain> sourceSearchSkills;
                sourceSearchSkills = this.getSearchSkills();
                @SuppressWarnings("unchecked")
                List<TrSearchSkillsDomain> copySearchSkills = ((List<TrSearchSkillsDomain> ) strategy.copy(LocatorUtils.property(locator, "searchSkills", sourceSearchSkills), sourceSearchSkills));
                copy.searchSkills = null;
                List<TrSearchSkillsDomain> uniqueSearchSkillsl = copy.getSearchSkills();
                uniqueSearchSkillsl.addAll(copySearchSkills);
            } else {
                copy.searchSkills = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new AdLookupValuesDomain();
    }

}
