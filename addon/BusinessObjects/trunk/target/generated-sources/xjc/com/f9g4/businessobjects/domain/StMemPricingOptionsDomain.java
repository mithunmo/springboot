//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.2-7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.12.20 at 11:56:16 AM EST 
//


package com.f9g4.businessobjects.domain;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.datatype.XMLGregorianCalendar;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for stMemPricingOptionsDomain complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="stMemPricingOptionsDomain">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="memberPricingId">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="userTypeId">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="membershipTypeId">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="durationInMonths">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="price">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}decimal">
 *               &lt;totalDigits value="15"/>
 *               &lt;fractionDigits value="2"/>
 *               &lt;minExclusive value="-10000000000000"/>
 *               &lt;maxExclusive value="10000000000000"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="effectiveDate">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}dateTime">
 *               &lt;minInclusive value="1000-01-01T00:00:00"/>
 *               &lt;maxInclusive value="9999-12-31T23:59:59"/>
 *               &lt;pattern value="\p{Nd}{4}-\p{Nd}{2}-\p{Nd}{2}T\p{Nd}{2}:\p{Nd}{2}:\p{Nd}{2}"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="experiationDate">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}dateTime">
 *               &lt;minInclusive value="1000-01-01T00:00:00"/>
 *               &lt;maxInclusive value="9999-12-31T23:59:59"/>
 *               &lt;pattern value="\p{Nd}{4}-\p{Nd}{2}-\p{Nd}{2}T\p{Nd}{2}:\p{Nd}{2}:\p{Nd}{2}"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="description">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *               &lt;maxLength value="500"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="commission">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}decimal">
 *               &lt;totalDigits value="15"/>
 *               &lt;fractionDigits value="2"/>
 *               &lt;minExclusive value="-10000000000000"/>
 *               &lt;maxExclusive value="10000000000000"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="langCode">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *               &lt;maxLength value="10"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="createdby">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="lastupdateby">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="userMembership" type="{http://domain.businessobjects.f9g4.com}adUserMembershipDomain" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="membershipType" type="{http://domain.businessobjects.f9g4.com}adLookupValuesDomain"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "stMemPricingOptionsDomain", propOrder = {
    "memberPricingId",
    "userTypeId",
    "membershipTypeId",
    "durationInMonths",
    "price",
    "effectiveDate",
    "experiationDate",
    "description",
    "commission",
    "langCode",
    "createdby",
    "lastupdateby",
    "userMembership",
    "membershipType"
})
public class StMemPricingOptionsDomain implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected int memberPricingId;
    protected int userTypeId;
    protected int membershipTypeId;
    protected int durationInMonths;
    @XmlElement(required = true)
    protected BigDecimal price;
    @XmlElement(required = true)
    protected XMLGregorianCalendar effectiveDate;
    @XmlElement(required = true)
    protected XMLGregorianCalendar experiationDate;
    @XmlElement(required = true)
    protected String description;
    @XmlElement(required = true)
    protected BigDecimal commission;
    @XmlElement(required = true, defaultValue = "en-US")
    protected String langCode;
    protected int createdby;
    protected int lastupdateby;
    protected List<AdUserMembershipDomain> userMembership;
    @XmlElement(required = true)
    protected AdLookupValuesDomain membershipType;

    /**
     * Default no-arg constructor
     * 
     */
    public StMemPricingOptionsDomain() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public StMemPricingOptionsDomain(final int memberPricingId, final int userTypeId, final int membershipTypeId, final int durationInMonths, final BigDecimal price, final XMLGregorianCalendar effectiveDate, final XMLGregorianCalendar experiationDate, final String description, final BigDecimal commission, final String langCode, final int createdby, final int lastupdateby, final List<AdUserMembershipDomain> userMembership, final AdLookupValuesDomain membershipType) {
        this.memberPricingId = memberPricingId;
        this.userTypeId = userTypeId;
        this.membershipTypeId = membershipTypeId;
        this.durationInMonths = durationInMonths;
        this.price = price;
        this.effectiveDate = effectiveDate;
        this.experiationDate = experiationDate;
        this.description = description;
        this.commission = commission;
        this.langCode = langCode;
        this.createdby = createdby;
        this.lastupdateby = lastupdateby;
        this.userMembership = userMembership;
        this.membershipType = membershipType;
    }

    /**
     * Gets the value of the memberPricingId property.
     * 
     */
    public int getMemberPricingId() {
        return memberPricingId;
    }

    /**
     * Sets the value of the memberPricingId property.
     * 
     */
    public void setMemberPricingId(int value) {
        this.memberPricingId = value;
    }

    /**
     * Gets the value of the userTypeId property.
     * 
     */
    public int getUserTypeId() {
        return userTypeId;
    }

    /**
     * Sets the value of the userTypeId property.
     * 
     */
    public void setUserTypeId(int value) {
        this.userTypeId = value;
    }

    /**
     * Gets the value of the membershipTypeId property.
     * 
     */
    public int getMembershipTypeId() {
        return membershipTypeId;
    }

    /**
     * Sets the value of the membershipTypeId property.
     * 
     */
    public void setMembershipTypeId(int value) {
        this.membershipTypeId = value;
    }

    /**
     * Gets the value of the durationInMonths property.
     * 
     */
    public int getDurationInMonths() {
        return durationInMonths;
    }

    /**
     * Sets the value of the durationInMonths property.
     * 
     */
    public void setDurationInMonths(int value) {
        this.durationInMonths = value;
    }

    /**
     * Gets the value of the price property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getPrice() {
        return price;
    }

    /**
     * Sets the value of the price property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setPrice(BigDecimal value) {
        this.price = value;
    }

    /**
     * Gets the value of the effectiveDate property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getEffectiveDate() {
        return effectiveDate;
    }

    /**
     * Sets the value of the effectiveDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setEffectiveDate(XMLGregorianCalendar value) {
        this.effectiveDate = value;
    }

    /**
     * Gets the value of the experiationDate property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getExperiationDate() {
        return experiationDate;
    }

    /**
     * Sets the value of the experiationDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setExperiationDate(XMLGregorianCalendar value) {
        this.experiationDate = value;
    }

    /**
     * Gets the value of the description property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDescription(String value) {
        this.description = value;
    }

    /**
     * Gets the value of the commission property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getCommission() {
        return commission;
    }

    /**
     * Sets the value of the commission property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setCommission(BigDecimal value) {
        this.commission = value;
    }

    /**
     * Gets the value of the langCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLangCode() {
        return langCode;
    }

    /**
     * Sets the value of the langCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLangCode(String value) {
        this.langCode = value;
    }

    /**
     * Gets the value of the createdby property.
     * 
     */
    public int getCreatedby() {
        return createdby;
    }

    /**
     * Sets the value of the createdby property.
     * 
     */
    public void setCreatedby(int value) {
        this.createdby = value;
    }

    /**
     * Gets the value of the lastupdateby property.
     * 
     */
    public int getLastupdateby() {
        return lastupdateby;
    }

    /**
     * Sets the value of the lastupdateby property.
     * 
     */
    public void setLastupdateby(int value) {
        this.lastupdateby = value;
    }

    /**
     * Gets the value of the userMembership property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the userMembership property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getUserMembership().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AdUserMembershipDomain }
     * 
     * 
     */
    public List<AdUserMembershipDomain> getUserMembership() {
        if (userMembership == null) {
            userMembership = new ArrayList<AdUserMembershipDomain>();
        }
        return this.userMembership;
    }

    /**
     * Gets the value of the membershipType property.
     * 
     * @return
     *     possible object is
     *     {@link AdLookupValuesDomain }
     *     
     */
    public AdLookupValuesDomain getMembershipType() {
        return membershipType;
    }

    /**
     * Sets the value of the membershipType property.
     * 
     * @param value
     *     allowed object is
     *     {@link AdLookupValuesDomain }
     *     
     */
    public void setMembershipType(AdLookupValuesDomain value) {
        this.membershipType = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            int theMemberPricingId;
            theMemberPricingId = this.getMemberPricingId();
            strategy.appendField(locator, this, "memberPricingId", buffer, theMemberPricingId);
        }
        {
            int theUserTypeId;
            theUserTypeId = this.getUserTypeId();
            strategy.appendField(locator, this, "userTypeId", buffer, theUserTypeId);
        }
        {
            int theMembershipTypeId;
            theMembershipTypeId = this.getMembershipTypeId();
            strategy.appendField(locator, this, "membershipTypeId", buffer, theMembershipTypeId);
        }
        {
            int theDurationInMonths;
            theDurationInMonths = this.getDurationInMonths();
            strategy.appendField(locator, this, "durationInMonths", buffer, theDurationInMonths);
        }
        {
            BigDecimal thePrice;
            thePrice = this.getPrice();
            strategy.appendField(locator, this, "price", buffer, thePrice);
        }
        {
            XMLGregorianCalendar theEffectiveDate;
            theEffectiveDate = this.getEffectiveDate();
            strategy.appendField(locator, this, "effectiveDate", buffer, theEffectiveDate);
        }
        {
            XMLGregorianCalendar theExperiationDate;
            theExperiationDate = this.getExperiationDate();
            strategy.appendField(locator, this, "experiationDate", buffer, theExperiationDate);
        }
        {
            String theDescription;
            theDescription = this.getDescription();
            strategy.appendField(locator, this, "description", buffer, theDescription);
        }
        {
            BigDecimal theCommission;
            theCommission = this.getCommission();
            strategy.appendField(locator, this, "commission", buffer, theCommission);
        }
        {
            String theLangCode;
            theLangCode = this.getLangCode();
            strategy.appendField(locator, this, "langCode", buffer, theLangCode);
        }
        {
            int theCreatedby;
            theCreatedby = this.getCreatedby();
            strategy.appendField(locator, this, "createdby", buffer, theCreatedby);
        }
        {
            int theLastupdateby;
            theLastupdateby = this.getLastupdateby();
            strategy.appendField(locator, this, "lastupdateby", buffer, theLastupdateby);
        }
        {
            List<AdUserMembershipDomain> theUserMembership;
            theUserMembership = this.getUserMembership();
            strategy.appendField(locator, this, "userMembership", buffer, theUserMembership);
        }
        {
            AdLookupValuesDomain theMembershipType;
            theMembershipType = this.getMembershipType();
            strategy.appendField(locator, this, "membershipType", buffer, theMembershipType);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof StMemPricingOptionsDomain)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final StMemPricingOptionsDomain that = ((StMemPricingOptionsDomain) object);
        {
            int lhsMemberPricingId;
            lhsMemberPricingId = this.getMemberPricingId();
            int rhsMemberPricingId;
            rhsMemberPricingId = that.getMemberPricingId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "memberPricingId", lhsMemberPricingId), LocatorUtils.property(thatLocator, "memberPricingId", rhsMemberPricingId), lhsMemberPricingId, rhsMemberPricingId)) {
                return false;
            }
        }
        {
            int lhsUserTypeId;
            lhsUserTypeId = this.getUserTypeId();
            int rhsUserTypeId;
            rhsUserTypeId = that.getUserTypeId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "userTypeId", lhsUserTypeId), LocatorUtils.property(thatLocator, "userTypeId", rhsUserTypeId), lhsUserTypeId, rhsUserTypeId)) {
                return false;
            }
        }
        {
            int lhsMembershipTypeId;
            lhsMembershipTypeId = this.getMembershipTypeId();
            int rhsMembershipTypeId;
            rhsMembershipTypeId = that.getMembershipTypeId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "membershipTypeId", lhsMembershipTypeId), LocatorUtils.property(thatLocator, "membershipTypeId", rhsMembershipTypeId), lhsMembershipTypeId, rhsMembershipTypeId)) {
                return false;
            }
        }
        {
            int lhsDurationInMonths;
            lhsDurationInMonths = this.getDurationInMonths();
            int rhsDurationInMonths;
            rhsDurationInMonths = that.getDurationInMonths();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "durationInMonths", lhsDurationInMonths), LocatorUtils.property(thatLocator, "durationInMonths", rhsDurationInMonths), lhsDurationInMonths, rhsDurationInMonths)) {
                return false;
            }
        }
        {
            BigDecimal lhsPrice;
            lhsPrice = this.getPrice();
            BigDecimal rhsPrice;
            rhsPrice = that.getPrice();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "price", lhsPrice), LocatorUtils.property(thatLocator, "price", rhsPrice), lhsPrice, rhsPrice)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsEffectiveDate;
            lhsEffectiveDate = this.getEffectiveDate();
            XMLGregorianCalendar rhsEffectiveDate;
            rhsEffectiveDate = that.getEffectiveDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "effectiveDate", lhsEffectiveDate), LocatorUtils.property(thatLocator, "effectiveDate", rhsEffectiveDate), lhsEffectiveDate, rhsEffectiveDate)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsExperiationDate;
            lhsExperiationDate = this.getExperiationDate();
            XMLGregorianCalendar rhsExperiationDate;
            rhsExperiationDate = that.getExperiationDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "experiationDate", lhsExperiationDate), LocatorUtils.property(thatLocator, "experiationDate", rhsExperiationDate), lhsExperiationDate, rhsExperiationDate)) {
                return false;
            }
        }
        {
            String lhsDescription;
            lhsDescription = this.getDescription();
            String rhsDescription;
            rhsDescription = that.getDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "description", lhsDescription), LocatorUtils.property(thatLocator, "description", rhsDescription), lhsDescription, rhsDescription)) {
                return false;
            }
        }
        {
            BigDecimal lhsCommission;
            lhsCommission = this.getCommission();
            BigDecimal rhsCommission;
            rhsCommission = that.getCommission();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "commission", lhsCommission), LocatorUtils.property(thatLocator, "commission", rhsCommission), lhsCommission, rhsCommission)) {
                return false;
            }
        }
        {
            String lhsLangCode;
            lhsLangCode = this.getLangCode();
            String rhsLangCode;
            rhsLangCode = that.getLangCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "langCode", lhsLangCode), LocatorUtils.property(thatLocator, "langCode", rhsLangCode), lhsLangCode, rhsLangCode)) {
                return false;
            }
        }
        {
            int lhsCreatedby;
            lhsCreatedby = this.getCreatedby();
            int rhsCreatedby;
            rhsCreatedby = that.getCreatedby();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "createdby", lhsCreatedby), LocatorUtils.property(thatLocator, "createdby", rhsCreatedby), lhsCreatedby, rhsCreatedby)) {
                return false;
            }
        }
        {
            int lhsLastupdateby;
            lhsLastupdateby = this.getLastupdateby();
            int rhsLastupdateby;
            rhsLastupdateby = that.getLastupdateby();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lastupdateby", lhsLastupdateby), LocatorUtils.property(thatLocator, "lastupdateby", rhsLastupdateby), lhsLastupdateby, rhsLastupdateby)) {
                return false;
            }
        }
        {
            List<AdUserMembershipDomain> lhsUserMembership;
            lhsUserMembership = this.getUserMembership();
            List<AdUserMembershipDomain> rhsUserMembership;
            rhsUserMembership = that.getUserMembership();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "userMembership", lhsUserMembership), LocatorUtils.property(thatLocator, "userMembership", rhsUserMembership), lhsUserMembership, rhsUserMembership)) {
                return false;
            }
        }
        {
            AdLookupValuesDomain lhsMembershipType;
            lhsMembershipType = this.getMembershipType();
            AdLookupValuesDomain rhsMembershipType;
            rhsMembershipType = that.getMembershipType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "membershipType", lhsMembershipType), LocatorUtils.property(thatLocator, "membershipType", rhsMembershipType), lhsMembershipType, rhsMembershipType)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            int theMemberPricingId;
            theMemberPricingId = this.getMemberPricingId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "memberPricingId", theMemberPricingId), currentHashCode, theMemberPricingId);
        }
        {
            int theUserTypeId;
            theUserTypeId = this.getUserTypeId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "userTypeId", theUserTypeId), currentHashCode, theUserTypeId);
        }
        {
            int theMembershipTypeId;
            theMembershipTypeId = this.getMembershipTypeId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "membershipTypeId", theMembershipTypeId), currentHashCode, theMembershipTypeId);
        }
        {
            int theDurationInMonths;
            theDurationInMonths = this.getDurationInMonths();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "durationInMonths", theDurationInMonths), currentHashCode, theDurationInMonths);
        }
        {
            BigDecimal thePrice;
            thePrice = this.getPrice();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "price", thePrice), currentHashCode, thePrice);
        }
        {
            XMLGregorianCalendar theEffectiveDate;
            theEffectiveDate = this.getEffectiveDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "effectiveDate", theEffectiveDate), currentHashCode, theEffectiveDate);
        }
        {
            XMLGregorianCalendar theExperiationDate;
            theExperiationDate = this.getExperiationDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "experiationDate", theExperiationDate), currentHashCode, theExperiationDate);
        }
        {
            String theDescription;
            theDescription = this.getDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "description", theDescription), currentHashCode, theDescription);
        }
        {
            BigDecimal theCommission;
            theCommission = this.getCommission();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "commission", theCommission), currentHashCode, theCommission);
        }
        {
            String theLangCode;
            theLangCode = this.getLangCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "langCode", theLangCode), currentHashCode, theLangCode);
        }
        {
            int theCreatedby;
            theCreatedby = this.getCreatedby();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "createdby", theCreatedby), currentHashCode, theCreatedby);
        }
        {
            int theLastupdateby;
            theLastupdateby = this.getLastupdateby();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lastupdateby", theLastupdateby), currentHashCode, theLastupdateby);
        }
        {
            List<AdUserMembershipDomain> theUserMembership;
            theUserMembership = this.getUserMembership();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "userMembership", theUserMembership), currentHashCode, theUserMembership);
        }
        {
            AdLookupValuesDomain theMembershipType;
            theMembershipType = this.getMembershipType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "membershipType", theMembershipType), currentHashCode, theMembershipType);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof StMemPricingOptionsDomain) {
            final StMemPricingOptionsDomain copy = ((StMemPricingOptionsDomain) draftCopy);
            int sourceMemberPricingId;
            sourceMemberPricingId = this.getMemberPricingId();
            int copyMemberPricingId = strategy.copy(LocatorUtils.property(locator, "memberPricingId", sourceMemberPricingId), sourceMemberPricingId);
            copy.setMemberPricingId(copyMemberPricingId);
            int sourceUserTypeId;
            sourceUserTypeId = this.getUserTypeId();
            int copyUserTypeId = strategy.copy(LocatorUtils.property(locator, "userTypeId", sourceUserTypeId), sourceUserTypeId);
            copy.setUserTypeId(copyUserTypeId);
            int sourceMembershipTypeId;
            sourceMembershipTypeId = this.getMembershipTypeId();
            int copyMembershipTypeId = strategy.copy(LocatorUtils.property(locator, "membershipTypeId", sourceMembershipTypeId), sourceMembershipTypeId);
            copy.setMembershipTypeId(copyMembershipTypeId);
            int sourceDurationInMonths;
            sourceDurationInMonths = this.getDurationInMonths();
            int copyDurationInMonths = strategy.copy(LocatorUtils.property(locator, "durationInMonths", sourceDurationInMonths), sourceDurationInMonths);
            copy.setDurationInMonths(copyDurationInMonths);
            if (this.price!= null) {
                BigDecimal sourcePrice;
                sourcePrice = this.getPrice();
                BigDecimal copyPrice = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "price", sourcePrice), sourcePrice));
                copy.setPrice(copyPrice);
            } else {
                copy.price = null;
            }
            if (this.effectiveDate!= null) {
                XMLGregorianCalendar sourceEffectiveDate;
                sourceEffectiveDate = this.getEffectiveDate();
                XMLGregorianCalendar copyEffectiveDate = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "effectiveDate", sourceEffectiveDate), sourceEffectiveDate));
                copy.setEffectiveDate(copyEffectiveDate);
            } else {
                copy.effectiveDate = null;
            }
            if (this.experiationDate!= null) {
                XMLGregorianCalendar sourceExperiationDate;
                sourceExperiationDate = this.getExperiationDate();
                XMLGregorianCalendar copyExperiationDate = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "experiationDate", sourceExperiationDate), sourceExperiationDate));
                copy.setExperiationDate(copyExperiationDate);
            } else {
                copy.experiationDate = null;
            }
            if (this.description!= null) {
                String sourceDescription;
                sourceDescription = this.getDescription();
                String copyDescription = ((String) strategy.copy(LocatorUtils.property(locator, "description", sourceDescription), sourceDescription));
                copy.setDescription(copyDescription);
            } else {
                copy.description = null;
            }
            if (this.commission!= null) {
                BigDecimal sourceCommission;
                sourceCommission = this.getCommission();
                BigDecimal copyCommission = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "commission", sourceCommission), sourceCommission));
                copy.setCommission(copyCommission);
            } else {
                copy.commission = null;
            }
            if (this.langCode!= null) {
                String sourceLangCode;
                sourceLangCode = this.getLangCode();
                String copyLangCode = ((String) strategy.copy(LocatorUtils.property(locator, "langCode", sourceLangCode), sourceLangCode));
                copy.setLangCode(copyLangCode);
            } else {
                copy.langCode = null;
            }
            int sourceCreatedby;
            sourceCreatedby = this.getCreatedby();
            int copyCreatedby = strategy.copy(LocatorUtils.property(locator, "createdby", sourceCreatedby), sourceCreatedby);
            copy.setCreatedby(copyCreatedby);
            int sourceLastupdateby;
            sourceLastupdateby = this.getLastupdateby();
            int copyLastupdateby = strategy.copy(LocatorUtils.property(locator, "lastupdateby", sourceLastupdateby), sourceLastupdateby);
            copy.setLastupdateby(copyLastupdateby);
            if ((this.userMembership!= null)&&(!this.userMembership.isEmpty())) {
                List<AdUserMembershipDomain> sourceUserMembership;
                sourceUserMembership = this.getUserMembership();
                @SuppressWarnings("unchecked")
                List<AdUserMembershipDomain> copyUserMembership = ((List<AdUserMembershipDomain> ) strategy.copy(LocatorUtils.property(locator, "userMembership", sourceUserMembership), sourceUserMembership));
                copy.userMembership = null;
                List<AdUserMembershipDomain> uniqueUserMembershipl = copy.getUserMembership();
                uniqueUserMembershipl.addAll(copyUserMembership);
            } else {
                copy.userMembership = null;
            }
            if (this.membershipType!= null) {
                AdLookupValuesDomain sourceMembershipType;
                sourceMembershipType = this.getMembershipType();
                AdLookupValuesDomain copyMembershipType = ((AdLookupValuesDomain) strategy.copy(LocatorUtils.property(locator, "membershipType", sourceMembershipType), sourceMembershipType));
                copy.setMembershipType(copyMembershipType);
            } else {
                copy.membershipType = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new StMemPricingOptionsDomain();
    }

}
