//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.2-7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.12.20 at 11:56:16 AM EST 
//


package com.f9g4.businessobjects.domain;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.datatype.XMLGregorianCalendar;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for stTermConditionDomain complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="stTermConditionDomain">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="termCondId">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="termTypeId">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="userTypeId">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="effectiveDate">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}dateTime">
 *               &lt;minInclusive value="1000-01-01T00:00:00"/>
 *               &lt;maxInclusive value="9999-12-31T23:59:59"/>
 *               &lt;pattern value="\p{Nd}{4}-\p{Nd}{2}-\p{Nd}{2}T\p{Nd}{2}:\p{Nd}{2}:\p{Nd}{2}"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="experiationDate">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}dateTime">
 *               &lt;minInclusive value="1000-01-01T00:00:00"/>
 *               &lt;maxInclusive value="9999-12-31T23:59:59"/>
 *               &lt;pattern value="\p{Nd}{4}-\p{Nd}{2}-\p{Nd}{2}T\p{Nd}{2}:\p{Nd}{2}:\p{Nd}{2}"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="displayedTerm">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}base64Binary">
 *               &lt;maxLength value="65535"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="reviewedByLegal">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="langCode">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *               &lt;maxLength value="10"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="createdby">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="lastupdateby">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="userTermandConditionAccept" type="{http://domain.businessobjects.f9g4.com}adAccepttermsDomain" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "stTermConditionDomain", propOrder = {
    "termCondId",
    "termTypeId",
    "userTypeId",
    "effectiveDate",
    "experiationDate",
    "displayedTerm",
    "reviewedByLegal",
    "langCode",
    "createdby",
    "lastupdateby",
    "userTermandConditionAccept"
})
public class StTermConditionDomain implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected int termCondId;
    protected int termTypeId;
    protected int userTypeId;
    @XmlElement(required = true)
    protected XMLGregorianCalendar effectiveDate;
    @XmlElement(required = true)
    protected XMLGregorianCalendar experiationDate;
    @XmlElement(required = true)
    protected byte[] displayedTerm;
    protected int reviewedByLegal;
    @XmlElement(required = true, defaultValue = "en-US")
    protected String langCode;
    protected int createdby;
    protected int lastupdateby;
    protected List<AdAccepttermsDomain> userTermandConditionAccept;

    /**
     * Default no-arg constructor
     * 
     */
    public StTermConditionDomain() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public StTermConditionDomain(final int termCondId, final int termTypeId, final int userTypeId, final XMLGregorianCalendar effectiveDate, final XMLGregorianCalendar experiationDate, final byte[] displayedTerm, final int reviewedByLegal, final String langCode, final int createdby, final int lastupdateby, final List<AdAccepttermsDomain> userTermandConditionAccept) {
        this.termCondId = termCondId;
        this.termTypeId = termTypeId;
        this.userTypeId = userTypeId;
        this.effectiveDate = effectiveDate;
        this.experiationDate = experiationDate;
        this.displayedTerm = displayedTerm;
        this.reviewedByLegal = reviewedByLegal;
        this.langCode = langCode;
        this.createdby = createdby;
        this.lastupdateby = lastupdateby;
        this.userTermandConditionAccept = userTermandConditionAccept;
    }

    /**
     * Gets the value of the termCondId property.
     * 
     */
    public int getTermCondId() {
        return termCondId;
    }

    /**
     * Sets the value of the termCondId property.
     * 
     */
    public void setTermCondId(int value) {
        this.termCondId = value;
    }

    /**
     * Gets the value of the termTypeId property.
     * 
     */
    public int getTermTypeId() {
        return termTypeId;
    }

    /**
     * Sets the value of the termTypeId property.
     * 
     */
    public void setTermTypeId(int value) {
        this.termTypeId = value;
    }

    /**
     * Gets the value of the userTypeId property.
     * 
     */
    public int getUserTypeId() {
        return userTypeId;
    }

    /**
     * Sets the value of the userTypeId property.
     * 
     */
    public void setUserTypeId(int value) {
        this.userTypeId = value;
    }

    /**
     * Gets the value of the effectiveDate property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getEffectiveDate() {
        return effectiveDate;
    }

    /**
     * Sets the value of the effectiveDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setEffectiveDate(XMLGregorianCalendar value) {
        this.effectiveDate = value;
    }

    /**
     * Gets the value of the experiationDate property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getExperiationDate() {
        return experiationDate;
    }

    /**
     * Sets the value of the experiationDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setExperiationDate(XMLGregorianCalendar value) {
        this.experiationDate = value;
    }

    /**
     * Gets the value of the displayedTerm property.
     * 
     * @return
     *     possible object is
     *     byte[]
     */
    public byte[] getDisplayedTerm() {
        return displayedTerm;
    }

    /**
     * Sets the value of the displayedTerm property.
     * 
     * @param value
     *     allowed object is
     *     byte[]
     */
    public void setDisplayedTerm(byte[] value) {
        this.displayedTerm = ((byte[]) value);
    }

    /**
     * Gets the value of the reviewedByLegal property.
     * 
     */
    public int getReviewedByLegal() {
        return reviewedByLegal;
    }

    /**
     * Sets the value of the reviewedByLegal property.
     * 
     */
    public void setReviewedByLegal(int value) {
        this.reviewedByLegal = value;
    }

    /**
     * Gets the value of the langCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLangCode() {
        return langCode;
    }

    /**
     * Sets the value of the langCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLangCode(String value) {
        this.langCode = value;
    }

    /**
     * Gets the value of the createdby property.
     * 
     */
    public int getCreatedby() {
        return createdby;
    }

    /**
     * Sets the value of the createdby property.
     * 
     */
    public void setCreatedby(int value) {
        this.createdby = value;
    }

    /**
     * Gets the value of the lastupdateby property.
     * 
     */
    public int getLastupdateby() {
        return lastupdateby;
    }

    /**
     * Sets the value of the lastupdateby property.
     * 
     */
    public void setLastupdateby(int value) {
        this.lastupdateby = value;
    }

    /**
     * Gets the value of the userTermandConditionAccept property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the userTermandConditionAccept property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getUserTermandConditionAccept().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link AdAccepttermsDomain }
     * 
     * 
     */
    public List<AdAccepttermsDomain> getUserTermandConditionAccept() {
        if (userTermandConditionAccept == null) {
            userTermandConditionAccept = new ArrayList<AdAccepttermsDomain>();
        }
        return this.userTermandConditionAccept;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            int theTermCondId;
            theTermCondId = this.getTermCondId();
            strategy.appendField(locator, this, "termCondId", buffer, theTermCondId);
        }
        {
            int theTermTypeId;
            theTermTypeId = this.getTermTypeId();
            strategy.appendField(locator, this, "termTypeId", buffer, theTermTypeId);
        }
        {
            int theUserTypeId;
            theUserTypeId = this.getUserTypeId();
            strategy.appendField(locator, this, "userTypeId", buffer, theUserTypeId);
        }
        {
            XMLGregorianCalendar theEffectiveDate;
            theEffectiveDate = this.getEffectiveDate();
            strategy.appendField(locator, this, "effectiveDate", buffer, theEffectiveDate);
        }
        {
            XMLGregorianCalendar theExperiationDate;
            theExperiationDate = this.getExperiationDate();
            strategy.appendField(locator, this, "experiationDate", buffer, theExperiationDate);
        }
        {
            byte[] theDisplayedTerm;
            theDisplayedTerm = this.getDisplayedTerm();
            strategy.appendField(locator, this, "displayedTerm", buffer, theDisplayedTerm);
        }
        {
            int theReviewedByLegal;
            theReviewedByLegal = this.getReviewedByLegal();
            strategy.appendField(locator, this, "reviewedByLegal", buffer, theReviewedByLegal);
        }
        {
            String theLangCode;
            theLangCode = this.getLangCode();
            strategy.appendField(locator, this, "langCode", buffer, theLangCode);
        }
        {
            int theCreatedby;
            theCreatedby = this.getCreatedby();
            strategy.appendField(locator, this, "createdby", buffer, theCreatedby);
        }
        {
            int theLastupdateby;
            theLastupdateby = this.getLastupdateby();
            strategy.appendField(locator, this, "lastupdateby", buffer, theLastupdateby);
        }
        {
            List<AdAccepttermsDomain> theUserTermandConditionAccept;
            theUserTermandConditionAccept = this.getUserTermandConditionAccept();
            strategy.appendField(locator, this, "userTermandConditionAccept", buffer, theUserTermandConditionAccept);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof StTermConditionDomain)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final StTermConditionDomain that = ((StTermConditionDomain) object);
        {
            int lhsTermCondId;
            lhsTermCondId = this.getTermCondId();
            int rhsTermCondId;
            rhsTermCondId = that.getTermCondId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "termCondId", lhsTermCondId), LocatorUtils.property(thatLocator, "termCondId", rhsTermCondId), lhsTermCondId, rhsTermCondId)) {
                return false;
            }
        }
        {
            int lhsTermTypeId;
            lhsTermTypeId = this.getTermTypeId();
            int rhsTermTypeId;
            rhsTermTypeId = that.getTermTypeId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "termTypeId", lhsTermTypeId), LocatorUtils.property(thatLocator, "termTypeId", rhsTermTypeId), lhsTermTypeId, rhsTermTypeId)) {
                return false;
            }
        }
        {
            int lhsUserTypeId;
            lhsUserTypeId = this.getUserTypeId();
            int rhsUserTypeId;
            rhsUserTypeId = that.getUserTypeId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "userTypeId", lhsUserTypeId), LocatorUtils.property(thatLocator, "userTypeId", rhsUserTypeId), lhsUserTypeId, rhsUserTypeId)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsEffectiveDate;
            lhsEffectiveDate = this.getEffectiveDate();
            XMLGregorianCalendar rhsEffectiveDate;
            rhsEffectiveDate = that.getEffectiveDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "effectiveDate", lhsEffectiveDate), LocatorUtils.property(thatLocator, "effectiveDate", rhsEffectiveDate), lhsEffectiveDate, rhsEffectiveDate)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsExperiationDate;
            lhsExperiationDate = this.getExperiationDate();
            XMLGregorianCalendar rhsExperiationDate;
            rhsExperiationDate = that.getExperiationDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "experiationDate", lhsExperiationDate), LocatorUtils.property(thatLocator, "experiationDate", rhsExperiationDate), lhsExperiationDate, rhsExperiationDate)) {
                return false;
            }
        }
        {
            byte[] lhsDisplayedTerm;
            lhsDisplayedTerm = this.getDisplayedTerm();
            byte[] rhsDisplayedTerm;
            rhsDisplayedTerm = that.getDisplayedTerm();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "displayedTerm", lhsDisplayedTerm), LocatorUtils.property(thatLocator, "displayedTerm", rhsDisplayedTerm), lhsDisplayedTerm, rhsDisplayedTerm)) {
                return false;
            }
        }
        {
            int lhsReviewedByLegal;
            lhsReviewedByLegal = this.getReviewedByLegal();
            int rhsReviewedByLegal;
            rhsReviewedByLegal = that.getReviewedByLegal();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "reviewedByLegal", lhsReviewedByLegal), LocatorUtils.property(thatLocator, "reviewedByLegal", rhsReviewedByLegal), lhsReviewedByLegal, rhsReviewedByLegal)) {
                return false;
            }
        }
        {
            String lhsLangCode;
            lhsLangCode = this.getLangCode();
            String rhsLangCode;
            rhsLangCode = that.getLangCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "langCode", lhsLangCode), LocatorUtils.property(thatLocator, "langCode", rhsLangCode), lhsLangCode, rhsLangCode)) {
                return false;
            }
        }
        {
            int lhsCreatedby;
            lhsCreatedby = this.getCreatedby();
            int rhsCreatedby;
            rhsCreatedby = that.getCreatedby();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "createdby", lhsCreatedby), LocatorUtils.property(thatLocator, "createdby", rhsCreatedby), lhsCreatedby, rhsCreatedby)) {
                return false;
            }
        }
        {
            int lhsLastupdateby;
            lhsLastupdateby = this.getLastupdateby();
            int rhsLastupdateby;
            rhsLastupdateby = that.getLastupdateby();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lastupdateby", lhsLastupdateby), LocatorUtils.property(thatLocator, "lastupdateby", rhsLastupdateby), lhsLastupdateby, rhsLastupdateby)) {
                return false;
            }
        }
        {
            List<AdAccepttermsDomain> lhsUserTermandConditionAccept;
            lhsUserTermandConditionAccept = this.getUserTermandConditionAccept();
            List<AdAccepttermsDomain> rhsUserTermandConditionAccept;
            rhsUserTermandConditionAccept = that.getUserTermandConditionAccept();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "userTermandConditionAccept", lhsUserTermandConditionAccept), LocatorUtils.property(thatLocator, "userTermandConditionAccept", rhsUserTermandConditionAccept), lhsUserTermandConditionAccept, rhsUserTermandConditionAccept)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            int theTermCondId;
            theTermCondId = this.getTermCondId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "termCondId", theTermCondId), currentHashCode, theTermCondId);
        }
        {
            int theTermTypeId;
            theTermTypeId = this.getTermTypeId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "termTypeId", theTermTypeId), currentHashCode, theTermTypeId);
        }
        {
            int theUserTypeId;
            theUserTypeId = this.getUserTypeId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "userTypeId", theUserTypeId), currentHashCode, theUserTypeId);
        }
        {
            XMLGregorianCalendar theEffectiveDate;
            theEffectiveDate = this.getEffectiveDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "effectiveDate", theEffectiveDate), currentHashCode, theEffectiveDate);
        }
        {
            XMLGregorianCalendar theExperiationDate;
            theExperiationDate = this.getExperiationDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "experiationDate", theExperiationDate), currentHashCode, theExperiationDate);
        }
        {
            byte[] theDisplayedTerm;
            theDisplayedTerm = this.getDisplayedTerm();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "displayedTerm", theDisplayedTerm), currentHashCode, theDisplayedTerm);
        }
        {
            int theReviewedByLegal;
            theReviewedByLegal = this.getReviewedByLegal();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "reviewedByLegal", theReviewedByLegal), currentHashCode, theReviewedByLegal);
        }
        {
            String theLangCode;
            theLangCode = this.getLangCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "langCode", theLangCode), currentHashCode, theLangCode);
        }
        {
            int theCreatedby;
            theCreatedby = this.getCreatedby();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "createdby", theCreatedby), currentHashCode, theCreatedby);
        }
        {
            int theLastupdateby;
            theLastupdateby = this.getLastupdateby();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lastupdateby", theLastupdateby), currentHashCode, theLastupdateby);
        }
        {
            List<AdAccepttermsDomain> theUserTermandConditionAccept;
            theUserTermandConditionAccept = this.getUserTermandConditionAccept();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "userTermandConditionAccept", theUserTermandConditionAccept), currentHashCode, theUserTermandConditionAccept);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof StTermConditionDomain) {
            final StTermConditionDomain copy = ((StTermConditionDomain) draftCopy);
            int sourceTermCondId;
            sourceTermCondId = this.getTermCondId();
            int copyTermCondId = strategy.copy(LocatorUtils.property(locator, "termCondId", sourceTermCondId), sourceTermCondId);
            copy.setTermCondId(copyTermCondId);
            int sourceTermTypeId;
            sourceTermTypeId = this.getTermTypeId();
            int copyTermTypeId = strategy.copy(LocatorUtils.property(locator, "termTypeId", sourceTermTypeId), sourceTermTypeId);
            copy.setTermTypeId(copyTermTypeId);
            int sourceUserTypeId;
            sourceUserTypeId = this.getUserTypeId();
            int copyUserTypeId = strategy.copy(LocatorUtils.property(locator, "userTypeId", sourceUserTypeId), sourceUserTypeId);
            copy.setUserTypeId(copyUserTypeId);
            if (this.effectiveDate!= null) {
                XMLGregorianCalendar sourceEffectiveDate;
                sourceEffectiveDate = this.getEffectiveDate();
                XMLGregorianCalendar copyEffectiveDate = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "effectiveDate", sourceEffectiveDate), sourceEffectiveDate));
                copy.setEffectiveDate(copyEffectiveDate);
            } else {
                copy.effectiveDate = null;
            }
            if (this.experiationDate!= null) {
                XMLGregorianCalendar sourceExperiationDate;
                sourceExperiationDate = this.getExperiationDate();
                XMLGregorianCalendar copyExperiationDate = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "experiationDate", sourceExperiationDate), sourceExperiationDate));
                copy.setExperiationDate(copyExperiationDate);
            } else {
                copy.experiationDate = null;
            }
            if (this.displayedTerm!= null) {
                byte[] sourceDisplayedTerm;
                sourceDisplayedTerm = this.getDisplayedTerm();
                byte[] copyDisplayedTerm = ((byte[]) strategy.copy(LocatorUtils.property(locator, "displayedTerm", sourceDisplayedTerm), sourceDisplayedTerm));
                copy.setDisplayedTerm(copyDisplayedTerm);
            } else {
                copy.displayedTerm = null;
            }
            int sourceReviewedByLegal;
            sourceReviewedByLegal = this.getReviewedByLegal();
            int copyReviewedByLegal = strategy.copy(LocatorUtils.property(locator, "reviewedByLegal", sourceReviewedByLegal), sourceReviewedByLegal);
            copy.setReviewedByLegal(copyReviewedByLegal);
            if (this.langCode!= null) {
                String sourceLangCode;
                sourceLangCode = this.getLangCode();
                String copyLangCode = ((String) strategy.copy(LocatorUtils.property(locator, "langCode", sourceLangCode), sourceLangCode));
                copy.setLangCode(copyLangCode);
            } else {
                copy.langCode = null;
            }
            int sourceCreatedby;
            sourceCreatedby = this.getCreatedby();
            int copyCreatedby = strategy.copy(LocatorUtils.property(locator, "createdby", sourceCreatedby), sourceCreatedby);
            copy.setCreatedby(copyCreatedby);
            int sourceLastupdateby;
            sourceLastupdateby = this.getLastupdateby();
            int copyLastupdateby = strategy.copy(LocatorUtils.property(locator, "lastupdateby", sourceLastupdateby), sourceLastupdateby);
            copy.setLastupdateby(copyLastupdateby);
            if ((this.userTermandConditionAccept!= null)&&(!this.userTermandConditionAccept.isEmpty())) {
                List<AdAccepttermsDomain> sourceUserTermandConditionAccept;
                sourceUserTermandConditionAccept = this.getUserTermandConditionAccept();
                @SuppressWarnings("unchecked")
                List<AdAccepttermsDomain> copyUserTermandConditionAccept = ((List<AdAccepttermsDomain> ) strategy.copy(LocatorUtils.property(locator, "userTermandConditionAccept", sourceUserTermandConditionAccept), sourceUserTermandConditionAccept));
                copy.userTermandConditionAccept = null;
                List<AdAccepttermsDomain> uniqueUserTermandConditionAcceptl = copy.getUserTermandConditionAccept();
                uniqueUserTermandConditionAcceptl.addAll(copyUserTermandConditionAccept);
            } else {
                copy.userTermandConditionAccept = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new StTermConditionDomain();
    }

}
