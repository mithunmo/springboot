//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.2-7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.12.20 at 11:56:16 AM EST 
//


package com.f9g4.businessobjects.domain;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.datatype.XMLGregorianCalendar;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for trBoardApprovalDomain complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="trBoardApprovalDomain">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="boardApprovalId" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *         &lt;element name="mainImageUrl" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="approvalStatus" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *         &lt;element name="comments" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="approverName" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="processStatus" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="errorMessage" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="creationDate">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}dateTime">
 *               &lt;minInclusive value="0001-01-01T00:00:00.000000000"/>
 *               &lt;maxInclusive value="9999-12-31T23:59:59.000000000"/>
 *               &lt;pattern value="\p{Nd}{4}-\p{Nd}{2}-\p{Nd}{2}T\p{Nd}{2}:\p{Nd}{2}:\p{Nd}{2}.\p{Nd}{1}"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="createdBy" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *         &lt;element name="lastUpdateDate">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}dateTime">
 *               &lt;minInclusive value="0001-01-01T00:00:00.000000000"/>
 *               &lt;maxInclusive value="9999-12-31T23:59:59.000000000"/>
 *               &lt;pattern value="\p{Nd}{4}-\p{Nd}{2}-\p{Nd}{2}T\p{Nd}{2}:\p{Nd}{2}:\p{Nd}{2}.\p{Nd}{1}"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="lastUpdatedBy" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "trBoardApprovalDomain", propOrder = {
    "boardApprovalId",
    "mainImageUrl",
    "approvalStatus",
    "comments",
    "approverName",
    "processStatus",
    "errorMessage",
    "creationDate",
    "createdBy",
    "lastUpdateDate",
    "lastUpdatedBy"
})
public class TrBoardApprovalDomain implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected int boardApprovalId;
    @XmlElement(required = true)
    protected String mainImageUrl;
    protected int approvalStatus;
    @XmlElement(required = true)
    protected String comments;
    @XmlElement(required = true)
    protected String approverName;
    @XmlElement(required = true)
    protected String processStatus;
    @XmlElement(required = true)
    protected String errorMessage;
    @XmlElement(required = true)
    protected XMLGregorianCalendar creationDate;
    protected int createdBy;
    @XmlElement(required = true)
    protected XMLGregorianCalendar lastUpdateDate;
    protected int lastUpdatedBy;

    /**
     * Default no-arg constructor
     * 
     */
    public TrBoardApprovalDomain() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public TrBoardApprovalDomain(final int boardApprovalId, final String mainImageUrl, final int approvalStatus, final String comments, final String approverName, final String processStatus, final String errorMessage, final XMLGregorianCalendar creationDate, final int createdBy, final XMLGregorianCalendar lastUpdateDate, final int lastUpdatedBy) {
        this.boardApprovalId = boardApprovalId;
        this.mainImageUrl = mainImageUrl;
        this.approvalStatus = approvalStatus;
        this.comments = comments;
        this.approverName = approverName;
        this.processStatus = processStatus;
        this.errorMessage = errorMessage;
        this.creationDate = creationDate;
        this.createdBy = createdBy;
        this.lastUpdateDate = lastUpdateDate;
        this.lastUpdatedBy = lastUpdatedBy;
    }

    /**
     * Gets the value of the boardApprovalId property.
     * 
     */
    public int getBoardApprovalId() {
        return boardApprovalId;
    }

    /**
     * Sets the value of the boardApprovalId property.
     * 
     */
    public void setBoardApprovalId(int value) {
        this.boardApprovalId = value;
    }

    /**
     * Gets the value of the mainImageUrl property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getMainImageUrl() {
        return mainImageUrl;
    }

    /**
     * Sets the value of the mainImageUrl property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setMainImageUrl(String value) {
        this.mainImageUrl = value;
    }

    /**
     * Gets the value of the approvalStatus property.
     * 
     */
    public int getApprovalStatus() {
        return approvalStatus;
    }

    /**
     * Sets the value of the approvalStatus property.
     * 
     */
    public void setApprovalStatus(int value) {
        this.approvalStatus = value;
    }

    /**
     * Gets the value of the comments property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getComments() {
        return comments;
    }

    /**
     * Sets the value of the comments property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setComments(String value) {
        this.comments = value;
    }

    /**
     * Gets the value of the approverName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getApproverName() {
        return approverName;
    }

    /**
     * Sets the value of the approverName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setApproverName(String value) {
        this.approverName = value;
    }

    /**
     * Gets the value of the processStatus property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getProcessStatus() {
        return processStatus;
    }

    /**
     * Sets the value of the processStatus property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setProcessStatus(String value) {
        this.processStatus = value;
    }

    /**
     * Gets the value of the errorMessage property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getErrorMessage() {
        return errorMessage;
    }

    /**
     * Sets the value of the errorMessage property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setErrorMessage(String value) {
        this.errorMessage = value;
    }

    /**
     * Gets the value of the creationDate property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getCreationDate() {
        return creationDate;
    }

    /**
     * Sets the value of the creationDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setCreationDate(XMLGregorianCalendar value) {
        this.creationDate = value;
    }

    /**
     * Gets the value of the createdBy property.
     * 
     */
    public int getCreatedBy() {
        return createdBy;
    }

    /**
     * Sets the value of the createdBy property.
     * 
     */
    public void setCreatedBy(int value) {
        this.createdBy = value;
    }

    /**
     * Gets the value of the lastUpdateDate property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getLastUpdateDate() {
        return lastUpdateDate;
    }

    /**
     * Sets the value of the lastUpdateDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setLastUpdateDate(XMLGregorianCalendar value) {
        this.lastUpdateDate = value;
    }

    /**
     * Gets the value of the lastUpdatedBy property.
     * 
     */
    public int getLastUpdatedBy() {
        return lastUpdatedBy;
    }

    /**
     * Sets the value of the lastUpdatedBy property.
     * 
     */
    public void setLastUpdatedBy(int value) {
        this.lastUpdatedBy = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            int theBoardApprovalId;
            theBoardApprovalId = this.getBoardApprovalId();
            strategy.appendField(locator, this, "boardApprovalId", buffer, theBoardApprovalId);
        }
        {
            String theMainImageUrl;
            theMainImageUrl = this.getMainImageUrl();
            strategy.appendField(locator, this, "mainImageUrl", buffer, theMainImageUrl);
        }
        {
            int theApprovalStatus;
            theApprovalStatus = this.getApprovalStatus();
            strategy.appendField(locator, this, "approvalStatus", buffer, theApprovalStatus);
        }
        {
            String theComments;
            theComments = this.getComments();
            strategy.appendField(locator, this, "comments", buffer, theComments);
        }
        {
            String theApproverName;
            theApproverName = this.getApproverName();
            strategy.appendField(locator, this, "approverName", buffer, theApproverName);
        }
        {
            String theProcessStatus;
            theProcessStatus = this.getProcessStatus();
            strategy.appendField(locator, this, "processStatus", buffer, theProcessStatus);
        }
        {
            String theErrorMessage;
            theErrorMessage = this.getErrorMessage();
            strategy.appendField(locator, this, "errorMessage", buffer, theErrorMessage);
        }
        {
            XMLGregorianCalendar theCreationDate;
            theCreationDate = this.getCreationDate();
            strategy.appendField(locator, this, "creationDate", buffer, theCreationDate);
        }
        {
            int theCreatedBy;
            theCreatedBy = this.getCreatedBy();
            strategy.appendField(locator, this, "createdBy", buffer, theCreatedBy);
        }
        {
            XMLGregorianCalendar theLastUpdateDate;
            theLastUpdateDate = this.getLastUpdateDate();
            strategy.appendField(locator, this, "lastUpdateDate", buffer, theLastUpdateDate);
        }
        {
            int theLastUpdatedBy;
            theLastUpdatedBy = this.getLastUpdatedBy();
            strategy.appendField(locator, this, "lastUpdatedBy", buffer, theLastUpdatedBy);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof TrBoardApprovalDomain)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final TrBoardApprovalDomain that = ((TrBoardApprovalDomain) object);
        {
            int lhsBoardApprovalId;
            lhsBoardApprovalId = this.getBoardApprovalId();
            int rhsBoardApprovalId;
            rhsBoardApprovalId = that.getBoardApprovalId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "boardApprovalId", lhsBoardApprovalId), LocatorUtils.property(thatLocator, "boardApprovalId", rhsBoardApprovalId), lhsBoardApprovalId, rhsBoardApprovalId)) {
                return false;
            }
        }
        {
            String lhsMainImageUrl;
            lhsMainImageUrl = this.getMainImageUrl();
            String rhsMainImageUrl;
            rhsMainImageUrl = that.getMainImageUrl();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "mainImageUrl", lhsMainImageUrl), LocatorUtils.property(thatLocator, "mainImageUrl", rhsMainImageUrl), lhsMainImageUrl, rhsMainImageUrl)) {
                return false;
            }
        }
        {
            int lhsApprovalStatus;
            lhsApprovalStatus = this.getApprovalStatus();
            int rhsApprovalStatus;
            rhsApprovalStatus = that.getApprovalStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "approvalStatus", lhsApprovalStatus), LocatorUtils.property(thatLocator, "approvalStatus", rhsApprovalStatus), lhsApprovalStatus, rhsApprovalStatus)) {
                return false;
            }
        }
        {
            String lhsComments;
            lhsComments = this.getComments();
            String rhsComments;
            rhsComments = that.getComments();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "comments", lhsComments), LocatorUtils.property(thatLocator, "comments", rhsComments), lhsComments, rhsComments)) {
                return false;
            }
        }
        {
            String lhsApproverName;
            lhsApproverName = this.getApproverName();
            String rhsApproverName;
            rhsApproverName = that.getApproverName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "approverName", lhsApproverName), LocatorUtils.property(thatLocator, "approverName", rhsApproverName), lhsApproverName, rhsApproverName)) {
                return false;
            }
        }
        {
            String lhsProcessStatus;
            lhsProcessStatus = this.getProcessStatus();
            String rhsProcessStatus;
            rhsProcessStatus = that.getProcessStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "processStatus", lhsProcessStatus), LocatorUtils.property(thatLocator, "processStatus", rhsProcessStatus), lhsProcessStatus, rhsProcessStatus)) {
                return false;
            }
        }
        {
            String lhsErrorMessage;
            lhsErrorMessage = this.getErrorMessage();
            String rhsErrorMessage;
            rhsErrorMessage = that.getErrorMessage();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "errorMessage", lhsErrorMessage), LocatorUtils.property(thatLocator, "errorMessage", rhsErrorMessage), lhsErrorMessage, rhsErrorMessage)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsCreationDate;
            lhsCreationDate = this.getCreationDate();
            XMLGregorianCalendar rhsCreationDate;
            rhsCreationDate = that.getCreationDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "creationDate", lhsCreationDate), LocatorUtils.property(thatLocator, "creationDate", rhsCreationDate), lhsCreationDate, rhsCreationDate)) {
                return false;
            }
        }
        {
            int lhsCreatedBy;
            lhsCreatedBy = this.getCreatedBy();
            int rhsCreatedBy;
            rhsCreatedBy = that.getCreatedBy();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "createdBy", lhsCreatedBy), LocatorUtils.property(thatLocator, "createdBy", rhsCreatedBy), lhsCreatedBy, rhsCreatedBy)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsLastUpdateDate;
            lhsLastUpdateDate = this.getLastUpdateDate();
            XMLGregorianCalendar rhsLastUpdateDate;
            rhsLastUpdateDate = that.getLastUpdateDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lastUpdateDate", lhsLastUpdateDate), LocatorUtils.property(thatLocator, "lastUpdateDate", rhsLastUpdateDate), lhsLastUpdateDate, rhsLastUpdateDate)) {
                return false;
            }
        }
        {
            int lhsLastUpdatedBy;
            lhsLastUpdatedBy = this.getLastUpdatedBy();
            int rhsLastUpdatedBy;
            rhsLastUpdatedBy = that.getLastUpdatedBy();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lastUpdatedBy", lhsLastUpdatedBy), LocatorUtils.property(thatLocator, "lastUpdatedBy", rhsLastUpdatedBy), lhsLastUpdatedBy, rhsLastUpdatedBy)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            int theBoardApprovalId;
            theBoardApprovalId = this.getBoardApprovalId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "boardApprovalId", theBoardApprovalId), currentHashCode, theBoardApprovalId);
        }
        {
            String theMainImageUrl;
            theMainImageUrl = this.getMainImageUrl();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "mainImageUrl", theMainImageUrl), currentHashCode, theMainImageUrl);
        }
        {
            int theApprovalStatus;
            theApprovalStatus = this.getApprovalStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "approvalStatus", theApprovalStatus), currentHashCode, theApprovalStatus);
        }
        {
            String theComments;
            theComments = this.getComments();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "comments", theComments), currentHashCode, theComments);
        }
        {
            String theApproverName;
            theApproverName = this.getApproverName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "approverName", theApproverName), currentHashCode, theApproverName);
        }
        {
            String theProcessStatus;
            theProcessStatus = this.getProcessStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "processStatus", theProcessStatus), currentHashCode, theProcessStatus);
        }
        {
            String theErrorMessage;
            theErrorMessage = this.getErrorMessage();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "errorMessage", theErrorMessage), currentHashCode, theErrorMessage);
        }
        {
            XMLGregorianCalendar theCreationDate;
            theCreationDate = this.getCreationDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "creationDate", theCreationDate), currentHashCode, theCreationDate);
        }
        {
            int theCreatedBy;
            theCreatedBy = this.getCreatedBy();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "createdBy", theCreatedBy), currentHashCode, theCreatedBy);
        }
        {
            XMLGregorianCalendar theLastUpdateDate;
            theLastUpdateDate = this.getLastUpdateDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lastUpdateDate", theLastUpdateDate), currentHashCode, theLastUpdateDate);
        }
        {
            int theLastUpdatedBy;
            theLastUpdatedBy = this.getLastUpdatedBy();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lastUpdatedBy", theLastUpdatedBy), currentHashCode, theLastUpdatedBy);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof TrBoardApprovalDomain) {
            final TrBoardApprovalDomain copy = ((TrBoardApprovalDomain) draftCopy);
            int sourceBoardApprovalId;
            sourceBoardApprovalId = this.getBoardApprovalId();
            int copyBoardApprovalId = strategy.copy(LocatorUtils.property(locator, "boardApprovalId", sourceBoardApprovalId), sourceBoardApprovalId);
            copy.setBoardApprovalId(copyBoardApprovalId);
            if (this.mainImageUrl!= null) {
                String sourceMainImageUrl;
                sourceMainImageUrl = this.getMainImageUrl();
                String copyMainImageUrl = ((String) strategy.copy(LocatorUtils.property(locator, "mainImageUrl", sourceMainImageUrl), sourceMainImageUrl));
                copy.setMainImageUrl(copyMainImageUrl);
            } else {
                copy.mainImageUrl = null;
            }
            int sourceApprovalStatus;
            sourceApprovalStatus = this.getApprovalStatus();
            int copyApprovalStatus = strategy.copy(LocatorUtils.property(locator, "approvalStatus", sourceApprovalStatus), sourceApprovalStatus);
            copy.setApprovalStatus(copyApprovalStatus);
            if (this.comments!= null) {
                String sourceComments;
                sourceComments = this.getComments();
                String copyComments = ((String) strategy.copy(LocatorUtils.property(locator, "comments", sourceComments), sourceComments));
                copy.setComments(copyComments);
            } else {
                copy.comments = null;
            }
            if (this.approverName!= null) {
                String sourceApproverName;
                sourceApproverName = this.getApproverName();
                String copyApproverName = ((String) strategy.copy(LocatorUtils.property(locator, "approverName", sourceApproverName), sourceApproverName));
                copy.setApproverName(copyApproverName);
            } else {
                copy.approverName = null;
            }
            if (this.processStatus!= null) {
                String sourceProcessStatus;
                sourceProcessStatus = this.getProcessStatus();
                String copyProcessStatus = ((String) strategy.copy(LocatorUtils.property(locator, "processStatus", sourceProcessStatus), sourceProcessStatus));
                copy.setProcessStatus(copyProcessStatus);
            } else {
                copy.processStatus = null;
            }
            if (this.errorMessage!= null) {
                String sourceErrorMessage;
                sourceErrorMessage = this.getErrorMessage();
                String copyErrorMessage = ((String) strategy.copy(LocatorUtils.property(locator, "errorMessage", sourceErrorMessage), sourceErrorMessage));
                copy.setErrorMessage(copyErrorMessage);
            } else {
                copy.errorMessage = null;
            }
            if (this.creationDate!= null) {
                XMLGregorianCalendar sourceCreationDate;
                sourceCreationDate = this.getCreationDate();
                XMLGregorianCalendar copyCreationDate = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "creationDate", sourceCreationDate), sourceCreationDate));
                copy.setCreationDate(copyCreationDate);
            } else {
                copy.creationDate = null;
            }
            int sourceCreatedBy;
            sourceCreatedBy = this.getCreatedBy();
            int copyCreatedBy = strategy.copy(LocatorUtils.property(locator, "createdBy", sourceCreatedBy), sourceCreatedBy);
            copy.setCreatedBy(copyCreatedBy);
            if (this.lastUpdateDate!= null) {
                XMLGregorianCalendar sourceLastUpdateDate;
                sourceLastUpdateDate = this.getLastUpdateDate();
                XMLGregorianCalendar copyLastUpdateDate = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "lastUpdateDate", sourceLastUpdateDate), sourceLastUpdateDate));
                copy.setLastUpdateDate(copyLastUpdateDate);
            } else {
                copy.lastUpdateDate = null;
            }
            int sourceLastUpdatedBy;
            sourceLastUpdatedBy = this.getLastUpdatedBy();
            int copyLastUpdatedBy = strategy.copy(LocatorUtils.property(locator, "lastUpdatedBy", sourceLastUpdatedBy), sourceLastUpdatedBy);
            copy.setLastUpdatedBy(copyLastUpdatedBy);
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new TrBoardApprovalDomain();
    }

}
