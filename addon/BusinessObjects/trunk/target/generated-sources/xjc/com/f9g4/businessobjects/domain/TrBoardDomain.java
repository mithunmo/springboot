//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.2-7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.12.20 at 11:56:16 AM EST 
//


package com.f9g4.businessobjects.domain;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.datatype.XMLGregorianCalendar;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for trBoardDomain complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="trBoardDomain">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="boardId">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="portfolioId">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="saleTypeId">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="categoryLevel3Id">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="categoryLevel4Id">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="categoryLevel5Id">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="currentUerId">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="originalUserId">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="portfolioUserId">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="name">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *               &lt;maxLength value="500"/>
 *               &lt;minLength value="1"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="description">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *               &lt;maxLength value="4000"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="boardPrice">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}decimal">
 *               &lt;totalDigits value="15"/>
 *               &lt;fractionDigits value="2"/>
 *               &lt;minExclusive value="-10000000000000"/>
 *               &lt;maxExclusive value="10000000000000"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="effectiveDate">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}dateTime">
 *               &lt;minInclusive value="1000-01-01T00:00:00"/>
 *               &lt;maxInclusive value="9999-12-31T23:59:59"/>
 *               &lt;pattern value="\p{Nd}{4}-\p{Nd}{2}-\p{Nd}{2}T\p{Nd}{2}:\p{Nd}{2}:\p{Nd}{2}"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="experiationDate">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}dateTime">
 *               &lt;minInclusive value="1000-01-01T00:00:00"/>
 *               &lt;maxInclusive value="9999-12-31T23:59:59"/>
 *               &lt;pattern value="\p{Nd}{4}-\p{Nd}{2}-\p{Nd}{2}T\p{Nd}{2}:\p{Nd}{2}:\p{Nd}{2}"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="lastUpdateDate">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}dateTime">
 *               &lt;minInclusive value="1000-01-01T00:00:00"/>
 *               &lt;maxInclusive value="9999-12-31T23:59:59"/>
 *               &lt;pattern value="\p{Nd}{4}-\p{Nd}{2}-\p{Nd}{2}T\p{Nd}{2}:\p{Nd}{2}:\p{Nd}{2}"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="publishToMP">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="keyword">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *               &lt;maxLength value="4000"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="totalPrice">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}decimal">
 *               &lt;totalDigits value="15"/>
 *               &lt;fractionDigits value="2"/>
 *               &lt;minExclusive value="-10000000000000"/>
 *               &lt;maxExclusive value="10000000000000"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="langCode">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *               &lt;maxLength value="10"/>
 *               &lt;minLength value="1"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="createdby">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="lastupdateby">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="activeStatus">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="statusId">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="boardStatus">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *               &lt;maxLength value="20"/>
 *               &lt;minLength value="1"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="boardImages" type="{http://domain.businessobjects.f9g4.com}trBoardImagesDomain" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="portfolioImages" type="{http://domain.businessobjects.f9g4.com}trPortfolioImagesDomain" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="messages" type="{http://domain.businessobjects.f9g4.com}trMessagesDomain" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="paymentAuthSubmit" type="{http://domain.businessobjects.f9g4.com}trPaymentAuthSubmitDomain" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="ratings" type="{http://domain.businessobjects.f9g4.com}trRatingsDomain" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="recentlyViewed" type="{http://domain.businessobjects.f9g4.com}trRecentlyViewedDomain" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="salesTransactionDetails" type="{http://domain.businessobjects.f9g4.com}trSalesTransactionDetailsDomain" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="originalUser" type="{http://domain.businessobjects.f9g4.com}adUsersDomain"/>
 *         &lt;element name="currentUser" type="{http://domain.businessobjects.f9g4.com}adUsersDomain"/>
 *         &lt;element name="category" type="{http://domain.businessobjects.f9g4.com}stCategoryDenormDomain"/>
 *         &lt;element name="salePrice">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}decimal">
 *               &lt;totalDigits value="15"/>
 *               &lt;fractionDigits value="2"/>
 *               &lt;minExclusive value="-10000000000000"/>
 *               &lt;maxExclusive value="10000000000000"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="hasSellablePortfolio">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "trBoardDomain", propOrder = {
    "boardId",
    "portfolioId",
    "saleTypeId",
    "categoryLevel3Id",
    "categoryLevel4Id",
    "categoryLevel5Id",
    "currentUerId",
    "originalUserId",
    "portfolioUserId",
    "name",
    "description",
    "boardPrice",
    "effectiveDate",
    "experiationDate",
    "lastUpdateDate",
    "publishToMP",
    "keyword",
    "totalPrice",
    "langCode",
    "createdby",
    "lastupdateby",
    "activeStatus",
    "statusId",
    "boardStatus",
    "boardImages",
    "portfolioImages",
    "messages",
    "paymentAuthSubmit",
    "ratings",
    "recentlyViewed",
    "salesTransactionDetails",
    "originalUser",
    "currentUser",
    "category",
    "salePrice",
    "hasSellablePortfolio"
})
public class TrBoardDomain implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected int boardId;
    protected int portfolioId;
    protected int saleTypeId;
    protected int categoryLevel3Id;
    protected int categoryLevel4Id;
    protected int categoryLevel5Id;
    protected int currentUerId;
    protected int originalUserId;
    protected int portfolioUserId;
    @XmlElement(required = true)
    protected String name;
    @XmlElement(required = true)
    protected String description;
    @XmlElement(required = true)
    protected BigDecimal boardPrice;
    @XmlElement(required = true)
    protected XMLGregorianCalendar effectiveDate;
    @XmlElement(required = true)
    protected XMLGregorianCalendar experiationDate;
    @XmlElement(required = true)
    protected XMLGregorianCalendar lastUpdateDate;
    protected int publishToMP;
    @XmlElement(required = true)
    protected String keyword;
    @XmlElement(required = true)
    protected BigDecimal totalPrice;
    @XmlElement(required = true, defaultValue = "en-US")
    protected String langCode;
    protected int createdby;
    protected int lastupdateby;
    protected int activeStatus;
    protected int statusId;
    @XmlElement(required = true)
    protected String boardStatus;
    protected List<TrBoardImagesDomain> boardImages;
    protected List<TrPortfolioImagesDomain> portfolioImages;
    protected List<TrMessagesDomain> messages;
    protected List<TrPaymentAuthSubmitDomain> paymentAuthSubmit;
    protected List<TrRatingsDomain> ratings;
    protected List<TrRecentlyViewedDomain> recentlyViewed;
    protected List<TrSalesTransactionDetailsDomain> salesTransactionDetails;
    @XmlElement(required = true)
    protected AdUsersDomain originalUser;
    @XmlElement(required = true)
    protected AdUsersDomain currentUser;
    @XmlElement(required = true)
    protected StCategoryDenormDomain category;
    @XmlElement(required = true)
    protected BigDecimal salePrice;
    protected int hasSellablePortfolio;

    /**
     * Default no-arg constructor
     * 
     */
    public TrBoardDomain() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public TrBoardDomain(final int boardId, final int portfolioId, final int saleTypeId, final int categoryLevel3Id, final int categoryLevel4Id, final int categoryLevel5Id, final int currentUerId, final int originalUserId, final int portfolioUserId, final String name, final String description, final BigDecimal boardPrice, final XMLGregorianCalendar effectiveDate, final XMLGregorianCalendar experiationDate, final XMLGregorianCalendar lastUpdateDate, final int publishToMP, final String keyword, final BigDecimal totalPrice, final String langCode, final int createdby, final int lastupdateby, final int activeStatus, final int statusId, final String boardStatus, final List<TrBoardImagesDomain> boardImages, final List<TrPortfolioImagesDomain> portfolioImages, final List<TrMessagesDomain> messages, final List<TrPaymentAuthSubmitDomain> paymentAuthSubmit, final List<TrRatingsDomain> ratings, final List<TrRecentlyViewedDomain> recentlyViewed, final List<TrSalesTransactionDetailsDomain> salesTransactionDetails, final AdUsersDomain originalUser, final AdUsersDomain currentUser, final StCategoryDenormDomain category, final BigDecimal salePrice, final int hasSellablePortfolio) {
        this.boardId = boardId;
        this.portfolioId = portfolioId;
        this.saleTypeId = saleTypeId;
        this.categoryLevel3Id = categoryLevel3Id;
        this.categoryLevel4Id = categoryLevel4Id;
        this.categoryLevel5Id = categoryLevel5Id;
        this.currentUerId = currentUerId;
        this.originalUserId = originalUserId;
        this.portfolioUserId = portfolioUserId;
        this.name = name;
        this.description = description;
        this.boardPrice = boardPrice;
        this.effectiveDate = effectiveDate;
        this.experiationDate = experiationDate;
        this.lastUpdateDate = lastUpdateDate;
        this.publishToMP = publishToMP;
        this.keyword = keyword;
        this.totalPrice = totalPrice;
        this.langCode = langCode;
        this.createdby = createdby;
        this.lastupdateby = lastupdateby;
        this.activeStatus = activeStatus;
        this.statusId = statusId;
        this.boardStatus = boardStatus;
        this.boardImages = boardImages;
        this.portfolioImages = portfolioImages;
        this.messages = messages;
        this.paymentAuthSubmit = paymentAuthSubmit;
        this.ratings = ratings;
        this.recentlyViewed = recentlyViewed;
        this.salesTransactionDetails = salesTransactionDetails;
        this.originalUser = originalUser;
        this.currentUser = currentUser;
        this.category = category;
        this.salePrice = salePrice;
        this.hasSellablePortfolio = hasSellablePortfolio;
    }

    /**
     * Gets the value of the boardId property.
     * 
     */
    public int getBoardId() {
        return boardId;
    }

    /**
     * Sets the value of the boardId property.
     * 
     */
    public void setBoardId(int value) {
        this.boardId = value;
    }

    /**
     * Gets the value of the portfolioId property.
     * 
     */
    public int getPortfolioId() {
        return portfolioId;
    }

    /**
     * Sets the value of the portfolioId property.
     * 
     */
    public void setPortfolioId(int value) {
        this.portfolioId = value;
    }

    /**
     * Gets the value of the saleTypeId property.
     * 
     */
    public int getSaleTypeId() {
        return saleTypeId;
    }

    /**
     * Sets the value of the saleTypeId property.
     * 
     */
    public void setSaleTypeId(int value) {
        this.saleTypeId = value;
    }

    /**
     * Gets the value of the categoryLevel3Id property.
     * 
     */
    public int getCategoryLevel3Id() {
        return categoryLevel3Id;
    }

    /**
     * Sets the value of the categoryLevel3Id property.
     * 
     */
    public void setCategoryLevel3Id(int value) {
        this.categoryLevel3Id = value;
    }

    /**
     * Gets the value of the categoryLevel4Id property.
     * 
     */
    public int getCategoryLevel4Id() {
        return categoryLevel4Id;
    }

    /**
     * Sets the value of the categoryLevel4Id property.
     * 
     */
    public void setCategoryLevel4Id(int value) {
        this.categoryLevel4Id = value;
    }

    /**
     * Gets the value of the categoryLevel5Id property.
     * 
     */
    public int getCategoryLevel5Id() {
        return categoryLevel5Id;
    }

    /**
     * Sets the value of the categoryLevel5Id property.
     * 
     */
    public void setCategoryLevel5Id(int value) {
        this.categoryLevel5Id = value;
    }

    /**
     * Gets the value of the currentUerId property.
     * 
     */
    public int getCurrentUerId() {
        return currentUerId;
    }

    /**
     * Sets the value of the currentUerId property.
     * 
     */
    public void setCurrentUerId(int value) {
        this.currentUerId = value;
    }

    /**
     * Gets the value of the originalUserId property.
     * 
     */
    public int getOriginalUserId() {
        return originalUserId;
    }

    /**
     * Sets the value of the originalUserId property.
     * 
     */
    public void setOriginalUserId(int value) {
        this.originalUserId = value;
    }

    /**
     * Gets the value of the portfolioUserId property.
     * 
     */
    public int getPortfolioUserId() {
        return portfolioUserId;
    }

    /**
     * Sets the value of the portfolioUserId property.
     * 
     */
    public void setPortfolioUserId(int value) {
        this.portfolioUserId = value;
    }

    /**
     * Gets the value of the name property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the value of the name property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setName(String value) {
        this.name = value;
    }

    /**
     * Gets the value of the description property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getDescription() {
        return description;
    }

    /**
     * Sets the value of the description property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setDescription(String value) {
        this.description = value;
    }

    /**
     * Gets the value of the boardPrice property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getBoardPrice() {
        return boardPrice;
    }

    /**
     * Sets the value of the boardPrice property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setBoardPrice(BigDecimal value) {
        this.boardPrice = value;
    }

    /**
     * Gets the value of the effectiveDate property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getEffectiveDate() {
        return effectiveDate;
    }

    /**
     * Sets the value of the effectiveDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setEffectiveDate(XMLGregorianCalendar value) {
        this.effectiveDate = value;
    }

    /**
     * Gets the value of the experiationDate property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getExperiationDate() {
        return experiationDate;
    }

    /**
     * Sets the value of the experiationDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setExperiationDate(XMLGregorianCalendar value) {
        this.experiationDate = value;
    }

    /**
     * Gets the value of the lastUpdateDate property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getLastUpdateDate() {
        return lastUpdateDate;
    }

    /**
     * Sets the value of the lastUpdateDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setLastUpdateDate(XMLGregorianCalendar value) {
        this.lastUpdateDate = value;
    }

    /**
     * Gets the value of the publishToMP property.
     * 
     */
    public int getPublishToMP() {
        return publishToMP;
    }

    /**
     * Sets the value of the publishToMP property.
     * 
     */
    public void setPublishToMP(int value) {
        this.publishToMP = value;
    }

    /**
     * Gets the value of the keyword property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getKeyword() {
        return keyword;
    }

    /**
     * Sets the value of the keyword property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setKeyword(String value) {
        this.keyword = value;
    }

    /**
     * Gets the value of the totalPrice property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getTotalPrice() {
        return totalPrice;
    }

    /**
     * Sets the value of the totalPrice property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setTotalPrice(BigDecimal value) {
        this.totalPrice = value;
    }

    /**
     * Gets the value of the langCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLangCode() {
        return langCode;
    }

    /**
     * Sets the value of the langCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLangCode(String value) {
        this.langCode = value;
    }

    /**
     * Gets the value of the createdby property.
     * 
     */
    public int getCreatedby() {
        return createdby;
    }

    /**
     * Sets the value of the createdby property.
     * 
     */
    public void setCreatedby(int value) {
        this.createdby = value;
    }

    /**
     * Gets the value of the lastupdateby property.
     * 
     */
    public int getLastupdateby() {
        return lastupdateby;
    }

    /**
     * Sets the value of the lastupdateby property.
     * 
     */
    public void setLastupdateby(int value) {
        this.lastupdateby = value;
    }

    /**
     * Gets the value of the activeStatus property.
     * 
     */
    public int getActiveStatus() {
        return activeStatus;
    }

    /**
     * Sets the value of the activeStatus property.
     * 
     */
    public void setActiveStatus(int value) {
        this.activeStatus = value;
    }

    /**
     * Gets the value of the statusId property.
     * 
     */
    public int getStatusId() {
        return statusId;
    }

    /**
     * Sets the value of the statusId property.
     * 
     */
    public void setStatusId(int value) {
        this.statusId = value;
    }

    /**
     * Gets the value of the boardStatus property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getBoardStatus() {
        return boardStatus;
    }

    /**
     * Sets the value of the boardStatus property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setBoardStatus(String value) {
        this.boardStatus = value;
    }

    /**
     * Gets the value of the boardImages property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the boardImages property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getBoardImages().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TrBoardImagesDomain }
     * 
     * 
     */
    public List<TrBoardImagesDomain> getBoardImages() {
        if (boardImages == null) {
            boardImages = new ArrayList<TrBoardImagesDomain>();
        }
        return this.boardImages;
    }

    /**
     * Gets the value of the portfolioImages property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the portfolioImages property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPortfolioImages().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TrPortfolioImagesDomain }
     * 
     * 
     */
    public List<TrPortfolioImagesDomain> getPortfolioImages() {
        if (portfolioImages == null) {
            portfolioImages = new ArrayList<TrPortfolioImagesDomain>();
        }
        return this.portfolioImages;
    }

    /**
     * Gets the value of the messages property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the messages property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getMessages().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TrMessagesDomain }
     * 
     * 
     */
    public List<TrMessagesDomain> getMessages() {
        if (messages == null) {
            messages = new ArrayList<TrMessagesDomain>();
        }
        return this.messages;
    }

    /**
     * Gets the value of the paymentAuthSubmit property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the paymentAuthSubmit property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPaymentAuthSubmit().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TrPaymentAuthSubmitDomain }
     * 
     * 
     */
    public List<TrPaymentAuthSubmitDomain> getPaymentAuthSubmit() {
        if (paymentAuthSubmit == null) {
            paymentAuthSubmit = new ArrayList<TrPaymentAuthSubmitDomain>();
        }
        return this.paymentAuthSubmit;
    }

    /**
     * Gets the value of the ratings property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the ratings property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRatings().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TrRatingsDomain }
     * 
     * 
     */
    public List<TrRatingsDomain> getRatings() {
        if (ratings == null) {
            ratings = new ArrayList<TrRatingsDomain>();
        }
        return this.ratings;
    }

    /**
     * Gets the value of the recentlyViewed property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the recentlyViewed property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRecentlyViewed().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TrRecentlyViewedDomain }
     * 
     * 
     */
    public List<TrRecentlyViewedDomain> getRecentlyViewed() {
        if (recentlyViewed == null) {
            recentlyViewed = new ArrayList<TrRecentlyViewedDomain>();
        }
        return this.recentlyViewed;
    }

    /**
     * Gets the value of the salesTransactionDetails property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the salesTransactionDetails property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSalesTransactionDetails().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TrSalesTransactionDetailsDomain }
     * 
     * 
     */
    public List<TrSalesTransactionDetailsDomain> getSalesTransactionDetails() {
        if (salesTransactionDetails == null) {
            salesTransactionDetails = new ArrayList<TrSalesTransactionDetailsDomain>();
        }
        return this.salesTransactionDetails;
    }

    /**
     * Gets the value of the originalUser property.
     * 
     * @return
     *     possible object is
     *     {@link AdUsersDomain }
     *     
     */
    public AdUsersDomain getOriginalUser() {
        return originalUser;
    }

    /**
     * Sets the value of the originalUser property.
     * 
     * @param value
     *     allowed object is
     *     {@link AdUsersDomain }
     *     
     */
    public void setOriginalUser(AdUsersDomain value) {
        this.originalUser = value;
    }

    /**
     * Gets the value of the currentUser property.
     * 
     * @return
     *     possible object is
     *     {@link AdUsersDomain }
     *     
     */
    public AdUsersDomain getCurrentUser() {
        return currentUser;
    }

    /**
     * Sets the value of the currentUser property.
     * 
     * @param value
     *     allowed object is
     *     {@link AdUsersDomain }
     *     
     */
    public void setCurrentUser(AdUsersDomain value) {
        this.currentUser = value;
    }

    /**
     * Gets the value of the category property.
     * 
     * @return
     *     possible object is
     *     {@link StCategoryDenormDomain }
     *     
     */
    public StCategoryDenormDomain getCategory() {
        return category;
    }

    /**
     * Sets the value of the category property.
     * 
     * @param value
     *     allowed object is
     *     {@link StCategoryDenormDomain }
     *     
     */
    public void setCategory(StCategoryDenormDomain value) {
        this.category = value;
    }

    /**
     * Gets the value of the salePrice property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getSalePrice() {
        return salePrice;
    }

    /**
     * Sets the value of the salePrice property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setSalePrice(BigDecimal value) {
        this.salePrice = value;
    }

    /**
     * Gets the value of the hasSellablePortfolio property.
     * 
     */
    public int getHasSellablePortfolio() {
        return hasSellablePortfolio;
    }

    /**
     * Sets the value of the hasSellablePortfolio property.
     * 
     */
    public void setHasSellablePortfolio(int value) {
        this.hasSellablePortfolio = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            int theBoardId;
            theBoardId = this.getBoardId();
            strategy.appendField(locator, this, "boardId", buffer, theBoardId);
        }
        {
            int thePortfolioId;
            thePortfolioId = this.getPortfolioId();
            strategy.appendField(locator, this, "portfolioId", buffer, thePortfolioId);
        }
        {
            int theSaleTypeId;
            theSaleTypeId = this.getSaleTypeId();
            strategy.appendField(locator, this, "saleTypeId", buffer, theSaleTypeId);
        }
        {
            int theCategoryLevel3Id;
            theCategoryLevel3Id = this.getCategoryLevel3Id();
            strategy.appendField(locator, this, "categoryLevel3Id", buffer, theCategoryLevel3Id);
        }
        {
            int theCategoryLevel4Id;
            theCategoryLevel4Id = this.getCategoryLevel4Id();
            strategy.appendField(locator, this, "categoryLevel4Id", buffer, theCategoryLevel4Id);
        }
        {
            int theCategoryLevel5Id;
            theCategoryLevel5Id = this.getCategoryLevel5Id();
            strategy.appendField(locator, this, "categoryLevel5Id", buffer, theCategoryLevel5Id);
        }
        {
            int theCurrentUerId;
            theCurrentUerId = this.getCurrentUerId();
            strategy.appendField(locator, this, "currentUerId", buffer, theCurrentUerId);
        }
        {
            int theOriginalUserId;
            theOriginalUserId = this.getOriginalUserId();
            strategy.appendField(locator, this, "originalUserId", buffer, theOriginalUserId);
        }
        {
            int thePortfolioUserId;
            thePortfolioUserId = this.getPortfolioUserId();
            strategy.appendField(locator, this, "portfolioUserId", buffer, thePortfolioUserId);
        }
        {
            String theName;
            theName = this.getName();
            strategy.appendField(locator, this, "name", buffer, theName);
        }
        {
            String theDescription;
            theDescription = this.getDescription();
            strategy.appendField(locator, this, "description", buffer, theDescription);
        }
        {
            BigDecimal theBoardPrice;
            theBoardPrice = this.getBoardPrice();
            strategy.appendField(locator, this, "boardPrice", buffer, theBoardPrice);
        }
        {
            XMLGregorianCalendar theEffectiveDate;
            theEffectiveDate = this.getEffectiveDate();
            strategy.appendField(locator, this, "effectiveDate", buffer, theEffectiveDate);
        }
        {
            XMLGregorianCalendar theExperiationDate;
            theExperiationDate = this.getExperiationDate();
            strategy.appendField(locator, this, "experiationDate", buffer, theExperiationDate);
        }
        {
            XMLGregorianCalendar theLastUpdateDate;
            theLastUpdateDate = this.getLastUpdateDate();
            strategy.appendField(locator, this, "lastUpdateDate", buffer, theLastUpdateDate);
        }
        {
            int thePublishToMP;
            thePublishToMP = this.getPublishToMP();
            strategy.appendField(locator, this, "publishToMP", buffer, thePublishToMP);
        }
        {
            String theKeyword;
            theKeyword = this.getKeyword();
            strategy.appendField(locator, this, "keyword", buffer, theKeyword);
        }
        {
            BigDecimal theTotalPrice;
            theTotalPrice = this.getTotalPrice();
            strategy.appendField(locator, this, "totalPrice", buffer, theTotalPrice);
        }
        {
            String theLangCode;
            theLangCode = this.getLangCode();
            strategy.appendField(locator, this, "langCode", buffer, theLangCode);
        }
        {
            int theCreatedby;
            theCreatedby = this.getCreatedby();
            strategy.appendField(locator, this, "createdby", buffer, theCreatedby);
        }
        {
            int theLastupdateby;
            theLastupdateby = this.getLastupdateby();
            strategy.appendField(locator, this, "lastupdateby", buffer, theLastupdateby);
        }
        {
            int theActiveStatus;
            theActiveStatus = this.getActiveStatus();
            strategy.appendField(locator, this, "activeStatus", buffer, theActiveStatus);
        }
        {
            int theStatusId;
            theStatusId = this.getStatusId();
            strategy.appendField(locator, this, "statusId", buffer, theStatusId);
        }
        {
            String theBoardStatus;
            theBoardStatus = this.getBoardStatus();
            strategy.appendField(locator, this, "boardStatus", buffer, theBoardStatus);
        }
        {
            List<TrBoardImagesDomain> theBoardImages;
            theBoardImages = this.getBoardImages();
            strategy.appendField(locator, this, "boardImages", buffer, theBoardImages);
        }
        {
            List<TrPortfolioImagesDomain> thePortfolioImages;
            thePortfolioImages = this.getPortfolioImages();
            strategy.appendField(locator, this, "portfolioImages", buffer, thePortfolioImages);
        }
        {
            List<TrMessagesDomain> theMessages;
            theMessages = this.getMessages();
            strategy.appendField(locator, this, "messages", buffer, theMessages);
        }
        {
            List<TrPaymentAuthSubmitDomain> thePaymentAuthSubmit;
            thePaymentAuthSubmit = this.getPaymentAuthSubmit();
            strategy.appendField(locator, this, "paymentAuthSubmit", buffer, thePaymentAuthSubmit);
        }
        {
            List<TrRatingsDomain> theRatings;
            theRatings = this.getRatings();
            strategy.appendField(locator, this, "ratings", buffer, theRatings);
        }
        {
            List<TrRecentlyViewedDomain> theRecentlyViewed;
            theRecentlyViewed = this.getRecentlyViewed();
            strategy.appendField(locator, this, "recentlyViewed", buffer, theRecentlyViewed);
        }
        {
            List<TrSalesTransactionDetailsDomain> theSalesTransactionDetails;
            theSalesTransactionDetails = this.getSalesTransactionDetails();
            strategy.appendField(locator, this, "salesTransactionDetails", buffer, theSalesTransactionDetails);
        }
        {
            AdUsersDomain theOriginalUser;
            theOriginalUser = this.getOriginalUser();
            strategy.appendField(locator, this, "originalUser", buffer, theOriginalUser);
        }
        {
            AdUsersDomain theCurrentUser;
            theCurrentUser = this.getCurrentUser();
            strategy.appendField(locator, this, "currentUser", buffer, theCurrentUser);
        }
        {
            StCategoryDenormDomain theCategory;
            theCategory = this.getCategory();
            strategy.appendField(locator, this, "category", buffer, theCategory);
        }
        {
            BigDecimal theSalePrice;
            theSalePrice = this.getSalePrice();
            strategy.appendField(locator, this, "salePrice", buffer, theSalePrice);
        }
        {
            int theHasSellablePortfolio;
            theHasSellablePortfolio = this.getHasSellablePortfolio();
            strategy.appendField(locator, this, "hasSellablePortfolio", buffer, theHasSellablePortfolio);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof TrBoardDomain)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final TrBoardDomain that = ((TrBoardDomain) object);
        {
            int lhsBoardId;
            lhsBoardId = this.getBoardId();
            int rhsBoardId;
            rhsBoardId = that.getBoardId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "boardId", lhsBoardId), LocatorUtils.property(thatLocator, "boardId", rhsBoardId), lhsBoardId, rhsBoardId)) {
                return false;
            }
        }
        {
            int lhsPortfolioId;
            lhsPortfolioId = this.getPortfolioId();
            int rhsPortfolioId;
            rhsPortfolioId = that.getPortfolioId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "portfolioId", lhsPortfolioId), LocatorUtils.property(thatLocator, "portfolioId", rhsPortfolioId), lhsPortfolioId, rhsPortfolioId)) {
                return false;
            }
        }
        {
            int lhsSaleTypeId;
            lhsSaleTypeId = this.getSaleTypeId();
            int rhsSaleTypeId;
            rhsSaleTypeId = that.getSaleTypeId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "saleTypeId", lhsSaleTypeId), LocatorUtils.property(thatLocator, "saleTypeId", rhsSaleTypeId), lhsSaleTypeId, rhsSaleTypeId)) {
                return false;
            }
        }
        {
            int lhsCategoryLevel3Id;
            lhsCategoryLevel3Id = this.getCategoryLevel3Id();
            int rhsCategoryLevel3Id;
            rhsCategoryLevel3Id = that.getCategoryLevel3Id();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "categoryLevel3Id", lhsCategoryLevel3Id), LocatorUtils.property(thatLocator, "categoryLevel3Id", rhsCategoryLevel3Id), lhsCategoryLevel3Id, rhsCategoryLevel3Id)) {
                return false;
            }
        }
        {
            int lhsCategoryLevel4Id;
            lhsCategoryLevel4Id = this.getCategoryLevel4Id();
            int rhsCategoryLevel4Id;
            rhsCategoryLevel4Id = that.getCategoryLevel4Id();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "categoryLevel4Id", lhsCategoryLevel4Id), LocatorUtils.property(thatLocator, "categoryLevel4Id", rhsCategoryLevel4Id), lhsCategoryLevel4Id, rhsCategoryLevel4Id)) {
                return false;
            }
        }
        {
            int lhsCategoryLevel5Id;
            lhsCategoryLevel5Id = this.getCategoryLevel5Id();
            int rhsCategoryLevel5Id;
            rhsCategoryLevel5Id = that.getCategoryLevel5Id();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "categoryLevel5Id", lhsCategoryLevel5Id), LocatorUtils.property(thatLocator, "categoryLevel5Id", rhsCategoryLevel5Id), lhsCategoryLevel5Id, rhsCategoryLevel5Id)) {
                return false;
            }
        }
        {
            int lhsCurrentUerId;
            lhsCurrentUerId = this.getCurrentUerId();
            int rhsCurrentUerId;
            rhsCurrentUerId = that.getCurrentUerId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "currentUerId", lhsCurrentUerId), LocatorUtils.property(thatLocator, "currentUerId", rhsCurrentUerId), lhsCurrentUerId, rhsCurrentUerId)) {
                return false;
            }
        }
        {
            int lhsOriginalUserId;
            lhsOriginalUserId = this.getOriginalUserId();
            int rhsOriginalUserId;
            rhsOriginalUserId = that.getOriginalUserId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "originalUserId", lhsOriginalUserId), LocatorUtils.property(thatLocator, "originalUserId", rhsOriginalUserId), lhsOriginalUserId, rhsOriginalUserId)) {
                return false;
            }
        }
        {
            int lhsPortfolioUserId;
            lhsPortfolioUserId = this.getPortfolioUserId();
            int rhsPortfolioUserId;
            rhsPortfolioUserId = that.getPortfolioUserId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "portfolioUserId", lhsPortfolioUserId), LocatorUtils.property(thatLocator, "portfolioUserId", rhsPortfolioUserId), lhsPortfolioUserId, rhsPortfolioUserId)) {
                return false;
            }
        }
        {
            String lhsName;
            lhsName = this.getName();
            String rhsName;
            rhsName = that.getName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "name", lhsName), LocatorUtils.property(thatLocator, "name", rhsName), lhsName, rhsName)) {
                return false;
            }
        }
        {
            String lhsDescription;
            lhsDescription = this.getDescription();
            String rhsDescription;
            rhsDescription = that.getDescription();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "description", lhsDescription), LocatorUtils.property(thatLocator, "description", rhsDescription), lhsDescription, rhsDescription)) {
                return false;
            }
        }
        {
            BigDecimal lhsBoardPrice;
            lhsBoardPrice = this.getBoardPrice();
            BigDecimal rhsBoardPrice;
            rhsBoardPrice = that.getBoardPrice();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "boardPrice", lhsBoardPrice), LocatorUtils.property(thatLocator, "boardPrice", rhsBoardPrice), lhsBoardPrice, rhsBoardPrice)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsEffectiveDate;
            lhsEffectiveDate = this.getEffectiveDate();
            XMLGregorianCalendar rhsEffectiveDate;
            rhsEffectiveDate = that.getEffectiveDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "effectiveDate", lhsEffectiveDate), LocatorUtils.property(thatLocator, "effectiveDate", rhsEffectiveDate), lhsEffectiveDate, rhsEffectiveDate)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsExperiationDate;
            lhsExperiationDate = this.getExperiationDate();
            XMLGregorianCalendar rhsExperiationDate;
            rhsExperiationDate = that.getExperiationDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "experiationDate", lhsExperiationDate), LocatorUtils.property(thatLocator, "experiationDate", rhsExperiationDate), lhsExperiationDate, rhsExperiationDate)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsLastUpdateDate;
            lhsLastUpdateDate = this.getLastUpdateDate();
            XMLGregorianCalendar rhsLastUpdateDate;
            rhsLastUpdateDate = that.getLastUpdateDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lastUpdateDate", lhsLastUpdateDate), LocatorUtils.property(thatLocator, "lastUpdateDate", rhsLastUpdateDate), lhsLastUpdateDate, rhsLastUpdateDate)) {
                return false;
            }
        }
        {
            int lhsPublishToMP;
            lhsPublishToMP = this.getPublishToMP();
            int rhsPublishToMP;
            rhsPublishToMP = that.getPublishToMP();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "publishToMP", lhsPublishToMP), LocatorUtils.property(thatLocator, "publishToMP", rhsPublishToMP), lhsPublishToMP, rhsPublishToMP)) {
                return false;
            }
        }
        {
            String lhsKeyword;
            lhsKeyword = this.getKeyword();
            String rhsKeyword;
            rhsKeyword = that.getKeyword();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "keyword", lhsKeyword), LocatorUtils.property(thatLocator, "keyword", rhsKeyword), lhsKeyword, rhsKeyword)) {
                return false;
            }
        }
        {
            BigDecimal lhsTotalPrice;
            lhsTotalPrice = this.getTotalPrice();
            BigDecimal rhsTotalPrice;
            rhsTotalPrice = that.getTotalPrice();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "totalPrice", lhsTotalPrice), LocatorUtils.property(thatLocator, "totalPrice", rhsTotalPrice), lhsTotalPrice, rhsTotalPrice)) {
                return false;
            }
        }
        {
            String lhsLangCode;
            lhsLangCode = this.getLangCode();
            String rhsLangCode;
            rhsLangCode = that.getLangCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "langCode", lhsLangCode), LocatorUtils.property(thatLocator, "langCode", rhsLangCode), lhsLangCode, rhsLangCode)) {
                return false;
            }
        }
        {
            int lhsCreatedby;
            lhsCreatedby = this.getCreatedby();
            int rhsCreatedby;
            rhsCreatedby = that.getCreatedby();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "createdby", lhsCreatedby), LocatorUtils.property(thatLocator, "createdby", rhsCreatedby), lhsCreatedby, rhsCreatedby)) {
                return false;
            }
        }
        {
            int lhsLastupdateby;
            lhsLastupdateby = this.getLastupdateby();
            int rhsLastupdateby;
            rhsLastupdateby = that.getLastupdateby();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lastupdateby", lhsLastupdateby), LocatorUtils.property(thatLocator, "lastupdateby", rhsLastupdateby), lhsLastupdateby, rhsLastupdateby)) {
                return false;
            }
        }
        {
            int lhsActiveStatus;
            lhsActiveStatus = this.getActiveStatus();
            int rhsActiveStatus;
            rhsActiveStatus = that.getActiveStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "activeStatus", lhsActiveStatus), LocatorUtils.property(thatLocator, "activeStatus", rhsActiveStatus), lhsActiveStatus, rhsActiveStatus)) {
                return false;
            }
        }
        {
            int lhsStatusId;
            lhsStatusId = this.getStatusId();
            int rhsStatusId;
            rhsStatusId = that.getStatusId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "statusId", lhsStatusId), LocatorUtils.property(thatLocator, "statusId", rhsStatusId), lhsStatusId, rhsStatusId)) {
                return false;
            }
        }
        {
            String lhsBoardStatus;
            lhsBoardStatus = this.getBoardStatus();
            String rhsBoardStatus;
            rhsBoardStatus = that.getBoardStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "boardStatus", lhsBoardStatus), LocatorUtils.property(thatLocator, "boardStatus", rhsBoardStatus), lhsBoardStatus, rhsBoardStatus)) {
                return false;
            }
        }
        {
            List<TrBoardImagesDomain> lhsBoardImages;
            lhsBoardImages = this.getBoardImages();
            List<TrBoardImagesDomain> rhsBoardImages;
            rhsBoardImages = that.getBoardImages();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "boardImages", lhsBoardImages), LocatorUtils.property(thatLocator, "boardImages", rhsBoardImages), lhsBoardImages, rhsBoardImages)) {
                return false;
            }
        }
        {
            List<TrPortfolioImagesDomain> lhsPortfolioImages;
            lhsPortfolioImages = this.getPortfolioImages();
            List<TrPortfolioImagesDomain> rhsPortfolioImages;
            rhsPortfolioImages = that.getPortfolioImages();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "portfolioImages", lhsPortfolioImages), LocatorUtils.property(thatLocator, "portfolioImages", rhsPortfolioImages), lhsPortfolioImages, rhsPortfolioImages)) {
                return false;
            }
        }
        {
            List<TrMessagesDomain> lhsMessages;
            lhsMessages = this.getMessages();
            List<TrMessagesDomain> rhsMessages;
            rhsMessages = that.getMessages();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "messages", lhsMessages), LocatorUtils.property(thatLocator, "messages", rhsMessages), lhsMessages, rhsMessages)) {
                return false;
            }
        }
        {
            List<TrPaymentAuthSubmitDomain> lhsPaymentAuthSubmit;
            lhsPaymentAuthSubmit = this.getPaymentAuthSubmit();
            List<TrPaymentAuthSubmitDomain> rhsPaymentAuthSubmit;
            rhsPaymentAuthSubmit = that.getPaymentAuthSubmit();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "paymentAuthSubmit", lhsPaymentAuthSubmit), LocatorUtils.property(thatLocator, "paymentAuthSubmit", rhsPaymentAuthSubmit), lhsPaymentAuthSubmit, rhsPaymentAuthSubmit)) {
                return false;
            }
        }
        {
            List<TrRatingsDomain> lhsRatings;
            lhsRatings = this.getRatings();
            List<TrRatingsDomain> rhsRatings;
            rhsRatings = that.getRatings();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ratings", lhsRatings), LocatorUtils.property(thatLocator, "ratings", rhsRatings), lhsRatings, rhsRatings)) {
                return false;
            }
        }
        {
            List<TrRecentlyViewedDomain> lhsRecentlyViewed;
            lhsRecentlyViewed = this.getRecentlyViewed();
            List<TrRecentlyViewedDomain> rhsRecentlyViewed;
            rhsRecentlyViewed = that.getRecentlyViewed();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "recentlyViewed", lhsRecentlyViewed), LocatorUtils.property(thatLocator, "recentlyViewed", rhsRecentlyViewed), lhsRecentlyViewed, rhsRecentlyViewed)) {
                return false;
            }
        }
        {
            List<TrSalesTransactionDetailsDomain> lhsSalesTransactionDetails;
            lhsSalesTransactionDetails = this.getSalesTransactionDetails();
            List<TrSalesTransactionDetailsDomain> rhsSalesTransactionDetails;
            rhsSalesTransactionDetails = that.getSalesTransactionDetails();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "salesTransactionDetails", lhsSalesTransactionDetails), LocatorUtils.property(thatLocator, "salesTransactionDetails", rhsSalesTransactionDetails), lhsSalesTransactionDetails, rhsSalesTransactionDetails)) {
                return false;
            }
        }
        {
            AdUsersDomain lhsOriginalUser;
            lhsOriginalUser = this.getOriginalUser();
            AdUsersDomain rhsOriginalUser;
            rhsOriginalUser = that.getOriginalUser();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "originalUser", lhsOriginalUser), LocatorUtils.property(thatLocator, "originalUser", rhsOriginalUser), lhsOriginalUser, rhsOriginalUser)) {
                return false;
            }
        }
        {
            AdUsersDomain lhsCurrentUser;
            lhsCurrentUser = this.getCurrentUser();
            AdUsersDomain rhsCurrentUser;
            rhsCurrentUser = that.getCurrentUser();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "currentUser", lhsCurrentUser), LocatorUtils.property(thatLocator, "currentUser", rhsCurrentUser), lhsCurrentUser, rhsCurrentUser)) {
                return false;
            }
        }
        {
            StCategoryDenormDomain lhsCategory;
            lhsCategory = this.getCategory();
            StCategoryDenormDomain rhsCategory;
            rhsCategory = that.getCategory();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "category", lhsCategory), LocatorUtils.property(thatLocator, "category", rhsCategory), lhsCategory, rhsCategory)) {
                return false;
            }
        }
        {
            BigDecimal lhsSalePrice;
            lhsSalePrice = this.getSalePrice();
            BigDecimal rhsSalePrice;
            rhsSalePrice = that.getSalePrice();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "salePrice", lhsSalePrice), LocatorUtils.property(thatLocator, "salePrice", rhsSalePrice), lhsSalePrice, rhsSalePrice)) {
                return false;
            }
        }
        {
            int lhsHasSellablePortfolio;
            lhsHasSellablePortfolio = this.getHasSellablePortfolio();
            int rhsHasSellablePortfolio;
            rhsHasSellablePortfolio = that.getHasSellablePortfolio();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "hasSellablePortfolio", lhsHasSellablePortfolio), LocatorUtils.property(thatLocator, "hasSellablePortfolio", rhsHasSellablePortfolio), lhsHasSellablePortfolio, rhsHasSellablePortfolio)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            int theBoardId;
            theBoardId = this.getBoardId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "boardId", theBoardId), currentHashCode, theBoardId);
        }
        {
            int thePortfolioId;
            thePortfolioId = this.getPortfolioId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "portfolioId", thePortfolioId), currentHashCode, thePortfolioId);
        }
        {
            int theSaleTypeId;
            theSaleTypeId = this.getSaleTypeId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "saleTypeId", theSaleTypeId), currentHashCode, theSaleTypeId);
        }
        {
            int theCategoryLevel3Id;
            theCategoryLevel3Id = this.getCategoryLevel3Id();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "categoryLevel3Id", theCategoryLevel3Id), currentHashCode, theCategoryLevel3Id);
        }
        {
            int theCategoryLevel4Id;
            theCategoryLevel4Id = this.getCategoryLevel4Id();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "categoryLevel4Id", theCategoryLevel4Id), currentHashCode, theCategoryLevel4Id);
        }
        {
            int theCategoryLevel5Id;
            theCategoryLevel5Id = this.getCategoryLevel5Id();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "categoryLevel5Id", theCategoryLevel5Id), currentHashCode, theCategoryLevel5Id);
        }
        {
            int theCurrentUerId;
            theCurrentUerId = this.getCurrentUerId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currentUerId", theCurrentUerId), currentHashCode, theCurrentUerId);
        }
        {
            int theOriginalUserId;
            theOriginalUserId = this.getOriginalUserId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "originalUserId", theOriginalUserId), currentHashCode, theOriginalUserId);
        }
        {
            int thePortfolioUserId;
            thePortfolioUserId = this.getPortfolioUserId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "portfolioUserId", thePortfolioUserId), currentHashCode, thePortfolioUserId);
        }
        {
            String theName;
            theName = this.getName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "name", theName), currentHashCode, theName);
        }
        {
            String theDescription;
            theDescription = this.getDescription();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "description", theDescription), currentHashCode, theDescription);
        }
        {
            BigDecimal theBoardPrice;
            theBoardPrice = this.getBoardPrice();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "boardPrice", theBoardPrice), currentHashCode, theBoardPrice);
        }
        {
            XMLGregorianCalendar theEffectiveDate;
            theEffectiveDate = this.getEffectiveDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "effectiveDate", theEffectiveDate), currentHashCode, theEffectiveDate);
        }
        {
            XMLGregorianCalendar theExperiationDate;
            theExperiationDate = this.getExperiationDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "experiationDate", theExperiationDate), currentHashCode, theExperiationDate);
        }
        {
            XMLGregorianCalendar theLastUpdateDate;
            theLastUpdateDate = this.getLastUpdateDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lastUpdateDate", theLastUpdateDate), currentHashCode, theLastUpdateDate);
        }
        {
            int thePublishToMP;
            thePublishToMP = this.getPublishToMP();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "publishToMP", thePublishToMP), currentHashCode, thePublishToMP);
        }
        {
            String theKeyword;
            theKeyword = this.getKeyword();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "keyword", theKeyword), currentHashCode, theKeyword);
        }
        {
            BigDecimal theTotalPrice;
            theTotalPrice = this.getTotalPrice();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "totalPrice", theTotalPrice), currentHashCode, theTotalPrice);
        }
        {
            String theLangCode;
            theLangCode = this.getLangCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "langCode", theLangCode), currentHashCode, theLangCode);
        }
        {
            int theCreatedby;
            theCreatedby = this.getCreatedby();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "createdby", theCreatedby), currentHashCode, theCreatedby);
        }
        {
            int theLastupdateby;
            theLastupdateby = this.getLastupdateby();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lastupdateby", theLastupdateby), currentHashCode, theLastupdateby);
        }
        {
            int theActiveStatus;
            theActiveStatus = this.getActiveStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "activeStatus", theActiveStatus), currentHashCode, theActiveStatus);
        }
        {
            int theStatusId;
            theStatusId = this.getStatusId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "statusId", theStatusId), currentHashCode, theStatusId);
        }
        {
            String theBoardStatus;
            theBoardStatus = this.getBoardStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "boardStatus", theBoardStatus), currentHashCode, theBoardStatus);
        }
        {
            List<TrBoardImagesDomain> theBoardImages;
            theBoardImages = this.getBoardImages();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "boardImages", theBoardImages), currentHashCode, theBoardImages);
        }
        {
            List<TrPortfolioImagesDomain> thePortfolioImages;
            thePortfolioImages = this.getPortfolioImages();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "portfolioImages", thePortfolioImages), currentHashCode, thePortfolioImages);
        }
        {
            List<TrMessagesDomain> theMessages;
            theMessages = this.getMessages();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "messages", theMessages), currentHashCode, theMessages);
        }
        {
            List<TrPaymentAuthSubmitDomain> thePaymentAuthSubmit;
            thePaymentAuthSubmit = this.getPaymentAuthSubmit();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "paymentAuthSubmit", thePaymentAuthSubmit), currentHashCode, thePaymentAuthSubmit);
        }
        {
            List<TrRatingsDomain> theRatings;
            theRatings = this.getRatings();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ratings", theRatings), currentHashCode, theRatings);
        }
        {
            List<TrRecentlyViewedDomain> theRecentlyViewed;
            theRecentlyViewed = this.getRecentlyViewed();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "recentlyViewed", theRecentlyViewed), currentHashCode, theRecentlyViewed);
        }
        {
            List<TrSalesTransactionDetailsDomain> theSalesTransactionDetails;
            theSalesTransactionDetails = this.getSalesTransactionDetails();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "salesTransactionDetails", theSalesTransactionDetails), currentHashCode, theSalesTransactionDetails);
        }
        {
            AdUsersDomain theOriginalUser;
            theOriginalUser = this.getOriginalUser();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "originalUser", theOriginalUser), currentHashCode, theOriginalUser);
        }
        {
            AdUsersDomain theCurrentUser;
            theCurrentUser = this.getCurrentUser();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "currentUser", theCurrentUser), currentHashCode, theCurrentUser);
        }
        {
            StCategoryDenormDomain theCategory;
            theCategory = this.getCategory();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "category", theCategory), currentHashCode, theCategory);
        }
        {
            BigDecimal theSalePrice;
            theSalePrice = this.getSalePrice();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "salePrice", theSalePrice), currentHashCode, theSalePrice);
        }
        {
            int theHasSellablePortfolio;
            theHasSellablePortfolio = this.getHasSellablePortfolio();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "hasSellablePortfolio", theHasSellablePortfolio), currentHashCode, theHasSellablePortfolio);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof TrBoardDomain) {
            final TrBoardDomain copy = ((TrBoardDomain) draftCopy);
            int sourceBoardId;
            sourceBoardId = this.getBoardId();
            int copyBoardId = strategy.copy(LocatorUtils.property(locator, "boardId", sourceBoardId), sourceBoardId);
            copy.setBoardId(copyBoardId);
            int sourcePortfolioId;
            sourcePortfolioId = this.getPortfolioId();
            int copyPortfolioId = strategy.copy(LocatorUtils.property(locator, "portfolioId", sourcePortfolioId), sourcePortfolioId);
            copy.setPortfolioId(copyPortfolioId);
            int sourceSaleTypeId;
            sourceSaleTypeId = this.getSaleTypeId();
            int copySaleTypeId = strategy.copy(LocatorUtils.property(locator, "saleTypeId", sourceSaleTypeId), sourceSaleTypeId);
            copy.setSaleTypeId(copySaleTypeId);
            int sourceCategoryLevel3Id;
            sourceCategoryLevel3Id = this.getCategoryLevel3Id();
            int copyCategoryLevel3Id = strategy.copy(LocatorUtils.property(locator, "categoryLevel3Id", sourceCategoryLevel3Id), sourceCategoryLevel3Id);
            copy.setCategoryLevel3Id(copyCategoryLevel3Id);
            int sourceCategoryLevel4Id;
            sourceCategoryLevel4Id = this.getCategoryLevel4Id();
            int copyCategoryLevel4Id = strategy.copy(LocatorUtils.property(locator, "categoryLevel4Id", sourceCategoryLevel4Id), sourceCategoryLevel4Id);
            copy.setCategoryLevel4Id(copyCategoryLevel4Id);
            int sourceCategoryLevel5Id;
            sourceCategoryLevel5Id = this.getCategoryLevel5Id();
            int copyCategoryLevel5Id = strategy.copy(LocatorUtils.property(locator, "categoryLevel5Id", sourceCategoryLevel5Id), sourceCategoryLevel5Id);
            copy.setCategoryLevel5Id(copyCategoryLevel5Id);
            int sourceCurrentUerId;
            sourceCurrentUerId = this.getCurrentUerId();
            int copyCurrentUerId = strategy.copy(LocatorUtils.property(locator, "currentUerId", sourceCurrentUerId), sourceCurrentUerId);
            copy.setCurrentUerId(copyCurrentUerId);
            int sourceOriginalUserId;
            sourceOriginalUserId = this.getOriginalUserId();
            int copyOriginalUserId = strategy.copy(LocatorUtils.property(locator, "originalUserId", sourceOriginalUserId), sourceOriginalUserId);
            copy.setOriginalUserId(copyOriginalUserId);
            int sourcePortfolioUserId;
            sourcePortfolioUserId = this.getPortfolioUserId();
            int copyPortfolioUserId = strategy.copy(LocatorUtils.property(locator, "portfolioUserId", sourcePortfolioUserId), sourcePortfolioUserId);
            copy.setPortfolioUserId(copyPortfolioUserId);
            if (this.name!= null) {
                String sourceName;
                sourceName = this.getName();
                String copyName = ((String) strategy.copy(LocatorUtils.property(locator, "name", sourceName), sourceName));
                copy.setName(copyName);
            } else {
                copy.name = null;
            }
            if (this.description!= null) {
                String sourceDescription;
                sourceDescription = this.getDescription();
                String copyDescription = ((String) strategy.copy(LocatorUtils.property(locator, "description", sourceDescription), sourceDescription));
                copy.setDescription(copyDescription);
            } else {
                copy.description = null;
            }
            if (this.boardPrice!= null) {
                BigDecimal sourceBoardPrice;
                sourceBoardPrice = this.getBoardPrice();
                BigDecimal copyBoardPrice = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "boardPrice", sourceBoardPrice), sourceBoardPrice));
                copy.setBoardPrice(copyBoardPrice);
            } else {
                copy.boardPrice = null;
            }
            if (this.effectiveDate!= null) {
                XMLGregorianCalendar sourceEffectiveDate;
                sourceEffectiveDate = this.getEffectiveDate();
                XMLGregorianCalendar copyEffectiveDate = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "effectiveDate", sourceEffectiveDate), sourceEffectiveDate));
                copy.setEffectiveDate(copyEffectiveDate);
            } else {
                copy.effectiveDate = null;
            }
            if (this.experiationDate!= null) {
                XMLGregorianCalendar sourceExperiationDate;
                sourceExperiationDate = this.getExperiationDate();
                XMLGregorianCalendar copyExperiationDate = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "experiationDate", sourceExperiationDate), sourceExperiationDate));
                copy.setExperiationDate(copyExperiationDate);
            } else {
                copy.experiationDate = null;
            }
            if (this.lastUpdateDate!= null) {
                XMLGregorianCalendar sourceLastUpdateDate;
                sourceLastUpdateDate = this.getLastUpdateDate();
                XMLGregorianCalendar copyLastUpdateDate = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "lastUpdateDate", sourceLastUpdateDate), sourceLastUpdateDate));
                copy.setLastUpdateDate(copyLastUpdateDate);
            } else {
                copy.lastUpdateDate = null;
            }
            int sourcePublishToMP;
            sourcePublishToMP = this.getPublishToMP();
            int copyPublishToMP = strategy.copy(LocatorUtils.property(locator, "publishToMP", sourcePublishToMP), sourcePublishToMP);
            copy.setPublishToMP(copyPublishToMP);
            if (this.keyword!= null) {
                String sourceKeyword;
                sourceKeyword = this.getKeyword();
                String copyKeyword = ((String) strategy.copy(LocatorUtils.property(locator, "keyword", sourceKeyword), sourceKeyword));
                copy.setKeyword(copyKeyword);
            } else {
                copy.keyword = null;
            }
            if (this.totalPrice!= null) {
                BigDecimal sourceTotalPrice;
                sourceTotalPrice = this.getTotalPrice();
                BigDecimal copyTotalPrice = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "totalPrice", sourceTotalPrice), sourceTotalPrice));
                copy.setTotalPrice(copyTotalPrice);
            } else {
                copy.totalPrice = null;
            }
            if (this.langCode!= null) {
                String sourceLangCode;
                sourceLangCode = this.getLangCode();
                String copyLangCode = ((String) strategy.copy(LocatorUtils.property(locator, "langCode", sourceLangCode), sourceLangCode));
                copy.setLangCode(copyLangCode);
            } else {
                copy.langCode = null;
            }
            int sourceCreatedby;
            sourceCreatedby = this.getCreatedby();
            int copyCreatedby = strategy.copy(LocatorUtils.property(locator, "createdby", sourceCreatedby), sourceCreatedby);
            copy.setCreatedby(copyCreatedby);
            int sourceLastupdateby;
            sourceLastupdateby = this.getLastupdateby();
            int copyLastupdateby = strategy.copy(LocatorUtils.property(locator, "lastupdateby", sourceLastupdateby), sourceLastupdateby);
            copy.setLastupdateby(copyLastupdateby);
            int sourceActiveStatus;
            sourceActiveStatus = this.getActiveStatus();
            int copyActiveStatus = strategy.copy(LocatorUtils.property(locator, "activeStatus", sourceActiveStatus), sourceActiveStatus);
            copy.setActiveStatus(copyActiveStatus);
            int sourceStatusId;
            sourceStatusId = this.getStatusId();
            int copyStatusId = strategy.copy(LocatorUtils.property(locator, "statusId", sourceStatusId), sourceStatusId);
            copy.setStatusId(copyStatusId);
            if (this.boardStatus!= null) {
                String sourceBoardStatus;
                sourceBoardStatus = this.getBoardStatus();
                String copyBoardStatus = ((String) strategy.copy(LocatorUtils.property(locator, "boardStatus", sourceBoardStatus), sourceBoardStatus));
                copy.setBoardStatus(copyBoardStatus);
            } else {
                copy.boardStatus = null;
            }
            if ((this.boardImages!= null)&&(!this.boardImages.isEmpty())) {
                List<TrBoardImagesDomain> sourceBoardImages;
                sourceBoardImages = this.getBoardImages();
                @SuppressWarnings("unchecked")
                List<TrBoardImagesDomain> copyBoardImages = ((List<TrBoardImagesDomain> ) strategy.copy(LocatorUtils.property(locator, "boardImages", sourceBoardImages), sourceBoardImages));
                copy.boardImages = null;
                List<TrBoardImagesDomain> uniqueBoardImagesl = copy.getBoardImages();
                uniqueBoardImagesl.addAll(copyBoardImages);
            } else {
                copy.boardImages = null;
            }
            if ((this.portfolioImages!= null)&&(!this.portfolioImages.isEmpty())) {
                List<TrPortfolioImagesDomain> sourcePortfolioImages;
                sourcePortfolioImages = this.getPortfolioImages();
                @SuppressWarnings("unchecked")
                List<TrPortfolioImagesDomain> copyPortfolioImages = ((List<TrPortfolioImagesDomain> ) strategy.copy(LocatorUtils.property(locator, "portfolioImages", sourcePortfolioImages), sourcePortfolioImages));
                copy.portfolioImages = null;
                List<TrPortfolioImagesDomain> uniquePortfolioImagesl = copy.getPortfolioImages();
                uniquePortfolioImagesl.addAll(copyPortfolioImages);
            } else {
                copy.portfolioImages = null;
            }
            if ((this.messages!= null)&&(!this.messages.isEmpty())) {
                List<TrMessagesDomain> sourceMessages;
                sourceMessages = this.getMessages();
                @SuppressWarnings("unchecked")
                List<TrMessagesDomain> copyMessages = ((List<TrMessagesDomain> ) strategy.copy(LocatorUtils.property(locator, "messages", sourceMessages), sourceMessages));
                copy.messages = null;
                List<TrMessagesDomain> uniqueMessagesl = copy.getMessages();
                uniqueMessagesl.addAll(copyMessages);
            } else {
                copy.messages = null;
            }
            if ((this.paymentAuthSubmit!= null)&&(!this.paymentAuthSubmit.isEmpty())) {
                List<TrPaymentAuthSubmitDomain> sourcePaymentAuthSubmit;
                sourcePaymentAuthSubmit = this.getPaymentAuthSubmit();
                @SuppressWarnings("unchecked")
                List<TrPaymentAuthSubmitDomain> copyPaymentAuthSubmit = ((List<TrPaymentAuthSubmitDomain> ) strategy.copy(LocatorUtils.property(locator, "paymentAuthSubmit", sourcePaymentAuthSubmit), sourcePaymentAuthSubmit));
                copy.paymentAuthSubmit = null;
                List<TrPaymentAuthSubmitDomain> uniquePaymentAuthSubmitl = copy.getPaymentAuthSubmit();
                uniquePaymentAuthSubmitl.addAll(copyPaymentAuthSubmit);
            } else {
                copy.paymentAuthSubmit = null;
            }
            if ((this.ratings!= null)&&(!this.ratings.isEmpty())) {
                List<TrRatingsDomain> sourceRatings;
                sourceRatings = this.getRatings();
                @SuppressWarnings("unchecked")
                List<TrRatingsDomain> copyRatings = ((List<TrRatingsDomain> ) strategy.copy(LocatorUtils.property(locator, "ratings", sourceRatings), sourceRatings));
                copy.ratings = null;
                List<TrRatingsDomain> uniqueRatingsl = copy.getRatings();
                uniqueRatingsl.addAll(copyRatings);
            } else {
                copy.ratings = null;
            }
            if ((this.recentlyViewed!= null)&&(!this.recentlyViewed.isEmpty())) {
                List<TrRecentlyViewedDomain> sourceRecentlyViewed;
                sourceRecentlyViewed = this.getRecentlyViewed();
                @SuppressWarnings("unchecked")
                List<TrRecentlyViewedDomain> copyRecentlyViewed = ((List<TrRecentlyViewedDomain> ) strategy.copy(LocatorUtils.property(locator, "recentlyViewed", sourceRecentlyViewed), sourceRecentlyViewed));
                copy.recentlyViewed = null;
                List<TrRecentlyViewedDomain> uniqueRecentlyViewedl = copy.getRecentlyViewed();
                uniqueRecentlyViewedl.addAll(copyRecentlyViewed);
            } else {
                copy.recentlyViewed = null;
            }
            if ((this.salesTransactionDetails!= null)&&(!this.salesTransactionDetails.isEmpty())) {
                List<TrSalesTransactionDetailsDomain> sourceSalesTransactionDetails;
                sourceSalesTransactionDetails = this.getSalesTransactionDetails();
                @SuppressWarnings("unchecked")
                List<TrSalesTransactionDetailsDomain> copySalesTransactionDetails = ((List<TrSalesTransactionDetailsDomain> ) strategy.copy(LocatorUtils.property(locator, "salesTransactionDetails", sourceSalesTransactionDetails), sourceSalesTransactionDetails));
                copy.salesTransactionDetails = null;
                List<TrSalesTransactionDetailsDomain> uniqueSalesTransactionDetailsl = copy.getSalesTransactionDetails();
                uniqueSalesTransactionDetailsl.addAll(copySalesTransactionDetails);
            } else {
                copy.salesTransactionDetails = null;
            }
            if (this.originalUser!= null) {
                AdUsersDomain sourceOriginalUser;
                sourceOriginalUser = this.getOriginalUser();
                AdUsersDomain copyOriginalUser = ((AdUsersDomain) strategy.copy(LocatorUtils.property(locator, "originalUser", sourceOriginalUser), sourceOriginalUser));
                copy.setOriginalUser(copyOriginalUser);
            } else {
                copy.originalUser = null;
            }
            if (this.currentUser!= null) {
                AdUsersDomain sourceCurrentUser;
                sourceCurrentUser = this.getCurrentUser();
                AdUsersDomain copyCurrentUser = ((AdUsersDomain) strategy.copy(LocatorUtils.property(locator, "currentUser", sourceCurrentUser), sourceCurrentUser));
                copy.setCurrentUser(copyCurrentUser);
            } else {
                copy.currentUser = null;
            }
            if (this.category!= null) {
                StCategoryDenormDomain sourceCategory;
                sourceCategory = this.getCategory();
                StCategoryDenormDomain copyCategory = ((StCategoryDenormDomain) strategy.copy(LocatorUtils.property(locator, "category", sourceCategory), sourceCategory));
                copy.setCategory(copyCategory);
            } else {
                copy.category = null;
            }
            if (this.salePrice!= null) {
                BigDecimal sourceSalePrice;
                sourceSalePrice = this.getSalePrice();
                BigDecimal copySalePrice = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "salePrice", sourceSalePrice), sourceSalePrice));
                copy.setSalePrice(copySalePrice);
            } else {
                copy.salePrice = null;
            }
            int sourceHasSellablePortfolio;
            sourceHasSellablePortfolio = this.getHasSellablePortfolio();
            int copyHasSellablePortfolio = strategy.copy(LocatorUtils.property(locator, "hasSellablePortfolio", sourceHasSellablePortfolio), sourceHasSellablePortfolio);
            copy.setHasSellablePortfolio(copyHasSellablePortfolio);
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new TrBoardDomain();
    }

}
