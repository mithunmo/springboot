//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.2-7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.12.20 at 11:56:16 AM EST 
//


package com.f9g4.businessobjects.domain;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.datatype.XMLGregorianCalendar;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for trBoardImagesDomain complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="trBoardImagesDomain">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="boardImageId">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="boardId">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="sourceFileURL">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *               &lt;maxLength value="1000"/>
 *               &lt;minLength value="1"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="fileType">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *               &lt;maxLength value="50"/>
 *               &lt;minLength value="1"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="fileName">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *               &lt;maxLength value="200"/>
 *               &lt;minLength value="1"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="thumbnailUrl">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *               &lt;maxLength value="1000"/>
 *               &lt;minLength value="1"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="mainImageUrl">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *               &lt;maxLength value="1000"/>
 *               &lt;minLength value="1"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="createdby">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="lastupdateby">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="creationDate">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}dateTime">
 *               &lt;minInclusive value="1000-01-01T00:00:00"/>
 *               &lt;maxInclusive value="9999-12-31T23:59:59"/>
 *               &lt;pattern value="\p{Nd}{4}-\p{Nd}{2}-\p{Nd}{2}T\p{Nd}{2}:\p{Nd}{2}:\p{Nd}{2}"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="lastUpdateDate">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}dateTime">
 *               &lt;minInclusive value="1000-01-01T00:00:00"/>
 *               &lt;maxInclusive value="9999-12-31T23:59:59"/>
 *               &lt;pattern value="\p{Nd}{4}-\p{Nd}{2}-\p{Nd}{2}T\p{Nd}{2}:\p{Nd}{2}:\p{Nd}{2}"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "trBoardImagesDomain", propOrder = {
    "boardImageId",
    "boardId",
    "sourceFileURL",
    "fileType",
    "fileName",
    "thumbnailUrl",
    "mainImageUrl",
    "createdby",
    "lastupdateby",
    "creationDate",
    "lastUpdateDate"
})
public class TrBoardImagesDomain implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected int boardImageId;
    protected int boardId;
    @XmlElement(required = true)
    protected String sourceFileURL;
    @XmlElement(required = true)
    protected String fileType;
    @XmlElement(required = true)
    protected String fileName;
    @XmlElement(required = true)
    protected String thumbnailUrl;
    @XmlElement(required = true)
    protected String mainImageUrl;
    protected int createdby;
    protected int lastupdateby;
    @XmlElement(required = true)
    protected XMLGregorianCalendar creationDate;
    @XmlElement(required = true)
    protected XMLGregorianCalendar lastUpdateDate;

    /**
     * Default no-arg constructor
     * 
     */
    public TrBoardImagesDomain() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public TrBoardImagesDomain(final int boardImageId, final int boardId, final String sourceFileURL, final String fileType, final String fileName, final String thumbnailUrl, final String mainImageUrl, final int createdby, final int lastupdateby, final XMLGregorianCalendar creationDate, final XMLGregorianCalendar lastUpdateDate) {
        this.boardImageId = boardImageId;
        this.boardId = boardId;
        this.sourceFileURL = sourceFileURL;
        this.fileType = fileType;
        this.fileName = fileName;
        this.thumbnailUrl = thumbnailUrl;
        this.mainImageUrl = mainImageUrl;
        this.createdby = createdby;
        this.lastupdateby = lastupdateby;
        this.creationDate = creationDate;
        this.lastUpdateDate = lastUpdateDate;
    }

    /**
     * Gets the value of the boardImageId property.
     * 
     */
    public int getBoardImageId() {
        return boardImageId;
    }

    /**
     * Sets the value of the boardImageId property.
     * 
     */
    public void setBoardImageId(int value) {
        this.boardImageId = value;
    }

    /**
     * Gets the value of the boardId property.
     * 
     */
    public int getBoardId() {
        return boardId;
    }

    /**
     * Sets the value of the boardId property.
     * 
     */
    public void setBoardId(int value) {
        this.boardId = value;
    }

    /**
     * Gets the value of the sourceFileURL property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSourceFileURL() {
        return sourceFileURL;
    }

    /**
     * Sets the value of the sourceFileURL property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSourceFileURL(String value) {
        this.sourceFileURL = value;
    }

    /**
     * Gets the value of the fileType property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFileType() {
        return fileType;
    }

    /**
     * Sets the value of the fileType property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setFileType(String value) {
        this.fileType = value;
    }

    /**
     * Gets the value of the fileName property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getFileName() {
        return fileName;
    }

    /**
     * Sets the value of the fileName property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setFileName(String value) {
        this.fileName = value;
    }

    /**
     * Gets the value of the thumbnailUrl property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getThumbnailUrl() {
        return thumbnailUrl;
    }

    /**
     * Sets the value of the thumbnailUrl property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setThumbnailUrl(String value) {
        this.thumbnailUrl = value;
    }

    /**
     * Gets the value of the mainImageUrl property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getMainImageUrl() {
        return mainImageUrl;
    }

    /**
     * Sets the value of the mainImageUrl property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setMainImageUrl(String value) {
        this.mainImageUrl = value;
    }

    /**
     * Gets the value of the createdby property.
     * 
     */
    public int getCreatedby() {
        return createdby;
    }

    /**
     * Sets the value of the createdby property.
     * 
     */
    public void setCreatedby(int value) {
        this.createdby = value;
    }

    /**
     * Gets the value of the lastupdateby property.
     * 
     */
    public int getLastupdateby() {
        return lastupdateby;
    }

    /**
     * Sets the value of the lastupdateby property.
     * 
     */
    public void setLastupdateby(int value) {
        this.lastupdateby = value;
    }

    /**
     * Gets the value of the creationDate property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getCreationDate() {
        return creationDate;
    }

    /**
     * Sets the value of the creationDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setCreationDate(XMLGregorianCalendar value) {
        this.creationDate = value;
    }

    /**
     * Gets the value of the lastUpdateDate property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getLastUpdateDate() {
        return lastUpdateDate;
    }

    /**
     * Sets the value of the lastUpdateDate property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setLastUpdateDate(XMLGregorianCalendar value) {
        this.lastUpdateDate = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            int theBoardImageId;
            theBoardImageId = this.getBoardImageId();
            strategy.appendField(locator, this, "boardImageId", buffer, theBoardImageId);
        }
        {
            int theBoardId;
            theBoardId = this.getBoardId();
            strategy.appendField(locator, this, "boardId", buffer, theBoardId);
        }
        {
            String theSourceFileURL;
            theSourceFileURL = this.getSourceFileURL();
            strategy.appendField(locator, this, "sourceFileURL", buffer, theSourceFileURL);
        }
        {
            String theFileType;
            theFileType = this.getFileType();
            strategy.appendField(locator, this, "fileType", buffer, theFileType);
        }
        {
            String theFileName;
            theFileName = this.getFileName();
            strategy.appendField(locator, this, "fileName", buffer, theFileName);
        }
        {
            String theThumbnailUrl;
            theThumbnailUrl = this.getThumbnailUrl();
            strategy.appendField(locator, this, "thumbnailUrl", buffer, theThumbnailUrl);
        }
        {
            String theMainImageUrl;
            theMainImageUrl = this.getMainImageUrl();
            strategy.appendField(locator, this, "mainImageUrl", buffer, theMainImageUrl);
        }
        {
            int theCreatedby;
            theCreatedby = this.getCreatedby();
            strategy.appendField(locator, this, "createdby", buffer, theCreatedby);
        }
        {
            int theLastupdateby;
            theLastupdateby = this.getLastupdateby();
            strategy.appendField(locator, this, "lastupdateby", buffer, theLastupdateby);
        }
        {
            XMLGregorianCalendar theCreationDate;
            theCreationDate = this.getCreationDate();
            strategy.appendField(locator, this, "creationDate", buffer, theCreationDate);
        }
        {
            XMLGregorianCalendar theLastUpdateDate;
            theLastUpdateDate = this.getLastUpdateDate();
            strategy.appendField(locator, this, "lastUpdateDate", buffer, theLastUpdateDate);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof TrBoardImagesDomain)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final TrBoardImagesDomain that = ((TrBoardImagesDomain) object);
        {
            int lhsBoardImageId;
            lhsBoardImageId = this.getBoardImageId();
            int rhsBoardImageId;
            rhsBoardImageId = that.getBoardImageId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "boardImageId", lhsBoardImageId), LocatorUtils.property(thatLocator, "boardImageId", rhsBoardImageId), lhsBoardImageId, rhsBoardImageId)) {
                return false;
            }
        }
        {
            int lhsBoardId;
            lhsBoardId = this.getBoardId();
            int rhsBoardId;
            rhsBoardId = that.getBoardId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "boardId", lhsBoardId), LocatorUtils.property(thatLocator, "boardId", rhsBoardId), lhsBoardId, rhsBoardId)) {
                return false;
            }
        }
        {
            String lhsSourceFileURL;
            lhsSourceFileURL = this.getSourceFileURL();
            String rhsSourceFileURL;
            rhsSourceFileURL = that.getSourceFileURL();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "sourceFileURL", lhsSourceFileURL), LocatorUtils.property(thatLocator, "sourceFileURL", rhsSourceFileURL), lhsSourceFileURL, rhsSourceFileURL)) {
                return false;
            }
        }
        {
            String lhsFileType;
            lhsFileType = this.getFileType();
            String rhsFileType;
            rhsFileType = that.getFileType();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fileType", lhsFileType), LocatorUtils.property(thatLocator, "fileType", rhsFileType), lhsFileType, rhsFileType)) {
                return false;
            }
        }
        {
            String lhsFileName;
            lhsFileName = this.getFileName();
            String rhsFileName;
            rhsFileName = that.getFileName();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "fileName", lhsFileName), LocatorUtils.property(thatLocator, "fileName", rhsFileName), lhsFileName, rhsFileName)) {
                return false;
            }
        }
        {
            String lhsThumbnailUrl;
            lhsThumbnailUrl = this.getThumbnailUrl();
            String rhsThumbnailUrl;
            rhsThumbnailUrl = that.getThumbnailUrl();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "thumbnailUrl", lhsThumbnailUrl), LocatorUtils.property(thatLocator, "thumbnailUrl", rhsThumbnailUrl), lhsThumbnailUrl, rhsThumbnailUrl)) {
                return false;
            }
        }
        {
            String lhsMainImageUrl;
            lhsMainImageUrl = this.getMainImageUrl();
            String rhsMainImageUrl;
            rhsMainImageUrl = that.getMainImageUrl();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "mainImageUrl", lhsMainImageUrl), LocatorUtils.property(thatLocator, "mainImageUrl", rhsMainImageUrl), lhsMainImageUrl, rhsMainImageUrl)) {
                return false;
            }
        }
        {
            int lhsCreatedby;
            lhsCreatedby = this.getCreatedby();
            int rhsCreatedby;
            rhsCreatedby = that.getCreatedby();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "createdby", lhsCreatedby), LocatorUtils.property(thatLocator, "createdby", rhsCreatedby), lhsCreatedby, rhsCreatedby)) {
                return false;
            }
        }
        {
            int lhsLastupdateby;
            lhsLastupdateby = this.getLastupdateby();
            int rhsLastupdateby;
            rhsLastupdateby = that.getLastupdateby();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lastupdateby", lhsLastupdateby), LocatorUtils.property(thatLocator, "lastupdateby", rhsLastupdateby), lhsLastupdateby, rhsLastupdateby)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsCreationDate;
            lhsCreationDate = this.getCreationDate();
            XMLGregorianCalendar rhsCreationDate;
            rhsCreationDate = that.getCreationDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "creationDate", lhsCreationDate), LocatorUtils.property(thatLocator, "creationDate", rhsCreationDate), lhsCreationDate, rhsCreationDate)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsLastUpdateDate;
            lhsLastUpdateDate = this.getLastUpdateDate();
            XMLGregorianCalendar rhsLastUpdateDate;
            rhsLastUpdateDate = that.getLastUpdateDate();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lastUpdateDate", lhsLastUpdateDate), LocatorUtils.property(thatLocator, "lastUpdateDate", rhsLastUpdateDate), lhsLastUpdateDate, rhsLastUpdateDate)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            int theBoardImageId;
            theBoardImageId = this.getBoardImageId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "boardImageId", theBoardImageId), currentHashCode, theBoardImageId);
        }
        {
            int theBoardId;
            theBoardId = this.getBoardId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "boardId", theBoardId), currentHashCode, theBoardId);
        }
        {
            String theSourceFileURL;
            theSourceFileURL = this.getSourceFileURL();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "sourceFileURL", theSourceFileURL), currentHashCode, theSourceFileURL);
        }
        {
            String theFileType;
            theFileType = this.getFileType();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fileType", theFileType), currentHashCode, theFileType);
        }
        {
            String theFileName;
            theFileName = this.getFileName();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "fileName", theFileName), currentHashCode, theFileName);
        }
        {
            String theThumbnailUrl;
            theThumbnailUrl = this.getThumbnailUrl();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "thumbnailUrl", theThumbnailUrl), currentHashCode, theThumbnailUrl);
        }
        {
            String theMainImageUrl;
            theMainImageUrl = this.getMainImageUrl();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "mainImageUrl", theMainImageUrl), currentHashCode, theMainImageUrl);
        }
        {
            int theCreatedby;
            theCreatedby = this.getCreatedby();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "createdby", theCreatedby), currentHashCode, theCreatedby);
        }
        {
            int theLastupdateby;
            theLastupdateby = this.getLastupdateby();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lastupdateby", theLastupdateby), currentHashCode, theLastupdateby);
        }
        {
            XMLGregorianCalendar theCreationDate;
            theCreationDate = this.getCreationDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "creationDate", theCreationDate), currentHashCode, theCreationDate);
        }
        {
            XMLGregorianCalendar theLastUpdateDate;
            theLastUpdateDate = this.getLastUpdateDate();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lastUpdateDate", theLastUpdateDate), currentHashCode, theLastUpdateDate);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof TrBoardImagesDomain) {
            final TrBoardImagesDomain copy = ((TrBoardImagesDomain) draftCopy);
            int sourceBoardImageId;
            sourceBoardImageId = this.getBoardImageId();
            int copyBoardImageId = strategy.copy(LocatorUtils.property(locator, "boardImageId", sourceBoardImageId), sourceBoardImageId);
            copy.setBoardImageId(copyBoardImageId);
            int sourceBoardId;
            sourceBoardId = this.getBoardId();
            int copyBoardId = strategy.copy(LocatorUtils.property(locator, "boardId", sourceBoardId), sourceBoardId);
            copy.setBoardId(copyBoardId);
            if (this.sourceFileURL!= null) {
                String sourceSourceFileURL;
                sourceSourceFileURL = this.getSourceFileURL();
                String copySourceFileURL = ((String) strategy.copy(LocatorUtils.property(locator, "sourceFileURL", sourceSourceFileURL), sourceSourceFileURL));
                copy.setSourceFileURL(copySourceFileURL);
            } else {
                copy.sourceFileURL = null;
            }
            if (this.fileType!= null) {
                String sourceFileType;
                sourceFileType = this.getFileType();
                String copyFileType = ((String) strategy.copy(LocatorUtils.property(locator, "fileType", sourceFileType), sourceFileType));
                copy.setFileType(copyFileType);
            } else {
                copy.fileType = null;
            }
            if (this.fileName!= null) {
                String sourceFileName;
                sourceFileName = this.getFileName();
                String copyFileName = ((String) strategy.copy(LocatorUtils.property(locator, "fileName", sourceFileName), sourceFileName));
                copy.setFileName(copyFileName);
            } else {
                copy.fileName = null;
            }
            if (this.thumbnailUrl!= null) {
                String sourceThumbnailUrl;
                sourceThumbnailUrl = this.getThumbnailUrl();
                String copyThumbnailUrl = ((String) strategy.copy(LocatorUtils.property(locator, "thumbnailUrl", sourceThumbnailUrl), sourceThumbnailUrl));
                copy.setThumbnailUrl(copyThumbnailUrl);
            } else {
                copy.thumbnailUrl = null;
            }
            if (this.mainImageUrl!= null) {
                String sourceMainImageUrl;
                sourceMainImageUrl = this.getMainImageUrl();
                String copyMainImageUrl = ((String) strategy.copy(LocatorUtils.property(locator, "mainImageUrl", sourceMainImageUrl), sourceMainImageUrl));
                copy.setMainImageUrl(copyMainImageUrl);
            } else {
                copy.mainImageUrl = null;
            }
            int sourceCreatedby;
            sourceCreatedby = this.getCreatedby();
            int copyCreatedby = strategy.copy(LocatorUtils.property(locator, "createdby", sourceCreatedby), sourceCreatedby);
            copy.setCreatedby(copyCreatedby);
            int sourceLastupdateby;
            sourceLastupdateby = this.getLastupdateby();
            int copyLastupdateby = strategy.copy(LocatorUtils.property(locator, "lastupdateby", sourceLastupdateby), sourceLastupdateby);
            copy.setLastupdateby(copyLastupdateby);
            if (this.creationDate!= null) {
                XMLGregorianCalendar sourceCreationDate;
                sourceCreationDate = this.getCreationDate();
                XMLGregorianCalendar copyCreationDate = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "creationDate", sourceCreationDate), sourceCreationDate));
                copy.setCreationDate(copyCreationDate);
            } else {
                copy.creationDate = null;
            }
            if (this.lastUpdateDate!= null) {
                XMLGregorianCalendar sourceLastUpdateDate;
                sourceLastUpdateDate = this.getLastUpdateDate();
                XMLGregorianCalendar copyLastUpdateDate = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "lastUpdateDate", sourceLastUpdateDate), sourceLastUpdateDate));
                copy.setLastUpdateDate(copyLastUpdateDate);
            } else {
                copy.lastUpdateDate = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new TrBoardImagesDomain();
    }

}
