//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.2-7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.12.20 at 11:56:16 AM EST 
//


package com.f9g4.businessobjects.domain;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for trPaymentAuthSubmitHeaderDomain complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="trPaymentAuthSubmitHeaderDomain">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="batchTransactionId">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="userId">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="subtotal">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}decimal">
 *               &lt;totalDigits value="15"/>
 *               &lt;fractionDigits value="2"/>
 *               &lt;minExclusive value="-10000000000000"/>
 *               &lt;maxExclusive value="10000000000000"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="shipping">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}decimal">
 *               &lt;totalDigits value="15"/>
 *               &lt;fractionDigits value="2"/>
 *               &lt;minExclusive value="-10000000000000"/>
 *               &lt;maxExclusive value="10000000000000"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="tax">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}decimal">
 *               &lt;totalDigits value="15"/>
 *               &lt;fractionDigits value="2"/>
 *               &lt;minExclusive value="-10000000000000"/>
 *               &lt;maxExclusive value="10000000000000"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="total">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}decimal">
 *               &lt;totalDigits value="15"/>
 *               &lt;fractionDigits value="2"/>
 *               &lt;minExclusive value="-10000000000000"/>
 *               &lt;maxExclusive value="10000000000000"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="secureToken">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *               &lt;maxLength value="1000"/>
 *               &lt;minLength value="1"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="createdby">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="lastupdateby">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="paymentAuthSubnit" type="{http://domain.businessobjects.f9g4.com}trPaymentAuthSubmitDomain" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="saleTransactionHeader" type="{http://domain.businessobjects.f9g4.com}trSalesTransactionHeaderDomain" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "trPaymentAuthSubmitHeaderDomain", propOrder = {
    "batchTransactionId",
    "userId",
    "subtotal",
    "shipping",
    "tax",
    "total",
    "secureToken",
    "createdby",
    "lastupdateby",
    "paymentAuthSubnit",
    "saleTransactionHeader"
})
public class TrPaymentAuthSubmitHeaderDomain implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected int batchTransactionId;
    protected int userId;
    @XmlElement(required = true)
    protected BigDecimal subtotal;
    @XmlElement(required = true)
    protected BigDecimal shipping;
    @XmlElement(required = true)
    protected BigDecimal tax;
    @XmlElement(required = true)
    protected BigDecimal total;
    @XmlElement(required = true)
    protected String secureToken;
    protected int createdby;
    protected int lastupdateby;
    protected List<TrPaymentAuthSubmitDomain> paymentAuthSubnit;
    protected List<TrSalesTransactionHeaderDomain> saleTransactionHeader;

    /**
     * Default no-arg constructor
     * 
     */
    public TrPaymentAuthSubmitHeaderDomain() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public TrPaymentAuthSubmitHeaderDomain(final int batchTransactionId, final int userId, final BigDecimal subtotal, final BigDecimal shipping, final BigDecimal tax, final BigDecimal total, final String secureToken, final int createdby, final int lastupdateby, final List<TrPaymentAuthSubmitDomain> paymentAuthSubnit, final List<TrSalesTransactionHeaderDomain> saleTransactionHeader) {
        this.batchTransactionId = batchTransactionId;
        this.userId = userId;
        this.subtotal = subtotal;
        this.shipping = shipping;
        this.tax = tax;
        this.total = total;
        this.secureToken = secureToken;
        this.createdby = createdby;
        this.lastupdateby = lastupdateby;
        this.paymentAuthSubnit = paymentAuthSubnit;
        this.saleTransactionHeader = saleTransactionHeader;
    }

    /**
     * Gets the value of the batchTransactionId property.
     * 
     */
    public int getBatchTransactionId() {
        return batchTransactionId;
    }

    /**
     * Sets the value of the batchTransactionId property.
     * 
     */
    public void setBatchTransactionId(int value) {
        this.batchTransactionId = value;
    }

    /**
     * Gets the value of the userId property.
     * 
     */
    public int getUserId() {
        return userId;
    }

    /**
     * Sets the value of the userId property.
     * 
     */
    public void setUserId(int value) {
        this.userId = value;
    }

    /**
     * Gets the value of the subtotal property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getSubtotal() {
        return subtotal;
    }

    /**
     * Sets the value of the subtotal property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setSubtotal(BigDecimal value) {
        this.subtotal = value;
    }

    /**
     * Gets the value of the shipping property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getShipping() {
        return shipping;
    }

    /**
     * Sets the value of the shipping property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setShipping(BigDecimal value) {
        this.shipping = value;
    }

    /**
     * Gets the value of the tax property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getTax() {
        return tax;
    }

    /**
     * Sets the value of the tax property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setTax(BigDecimal value) {
        this.tax = value;
    }

    /**
     * Gets the value of the total property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getTotal() {
        return total;
    }

    /**
     * Sets the value of the total property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setTotal(BigDecimal value) {
        this.total = value;
    }

    /**
     * Gets the value of the secureToken property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSecureToken() {
        return secureToken;
    }

    /**
     * Sets the value of the secureToken property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSecureToken(String value) {
        this.secureToken = value;
    }

    /**
     * Gets the value of the createdby property.
     * 
     */
    public int getCreatedby() {
        return createdby;
    }

    /**
     * Sets the value of the createdby property.
     * 
     */
    public void setCreatedby(int value) {
        this.createdby = value;
    }

    /**
     * Gets the value of the lastupdateby property.
     * 
     */
    public int getLastupdateby() {
        return lastupdateby;
    }

    /**
     * Sets the value of the lastupdateby property.
     * 
     */
    public void setLastupdateby(int value) {
        this.lastupdateby = value;
    }

    /**
     * Gets the value of the paymentAuthSubnit property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the paymentAuthSubnit property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPaymentAuthSubnit().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TrPaymentAuthSubmitDomain }
     * 
     * 
     */
    public List<TrPaymentAuthSubmitDomain> getPaymentAuthSubnit() {
        if (paymentAuthSubnit == null) {
            paymentAuthSubnit = new ArrayList<TrPaymentAuthSubmitDomain>();
        }
        return this.paymentAuthSubnit;
    }

    /**
     * Gets the value of the saleTransactionHeader property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the saleTransactionHeader property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSaleTransactionHeader().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TrSalesTransactionHeaderDomain }
     * 
     * 
     */
    public List<TrSalesTransactionHeaderDomain> getSaleTransactionHeader() {
        if (saleTransactionHeader == null) {
            saleTransactionHeader = new ArrayList<TrSalesTransactionHeaderDomain>();
        }
        return this.saleTransactionHeader;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            int theBatchTransactionId;
            theBatchTransactionId = this.getBatchTransactionId();
            strategy.appendField(locator, this, "batchTransactionId", buffer, theBatchTransactionId);
        }
        {
            int theUserId;
            theUserId = this.getUserId();
            strategy.appendField(locator, this, "userId", buffer, theUserId);
        }
        {
            BigDecimal theSubtotal;
            theSubtotal = this.getSubtotal();
            strategy.appendField(locator, this, "subtotal", buffer, theSubtotal);
        }
        {
            BigDecimal theShipping;
            theShipping = this.getShipping();
            strategy.appendField(locator, this, "shipping", buffer, theShipping);
        }
        {
            BigDecimal theTax;
            theTax = this.getTax();
            strategy.appendField(locator, this, "tax", buffer, theTax);
        }
        {
            BigDecimal theTotal;
            theTotal = this.getTotal();
            strategy.appendField(locator, this, "total", buffer, theTotal);
        }
        {
            String theSecureToken;
            theSecureToken = this.getSecureToken();
            strategy.appendField(locator, this, "secureToken", buffer, theSecureToken);
        }
        {
            int theCreatedby;
            theCreatedby = this.getCreatedby();
            strategy.appendField(locator, this, "createdby", buffer, theCreatedby);
        }
        {
            int theLastupdateby;
            theLastupdateby = this.getLastupdateby();
            strategy.appendField(locator, this, "lastupdateby", buffer, theLastupdateby);
        }
        {
            List<TrPaymentAuthSubmitDomain> thePaymentAuthSubnit;
            thePaymentAuthSubnit = this.getPaymentAuthSubnit();
            strategy.appendField(locator, this, "paymentAuthSubnit", buffer, thePaymentAuthSubnit);
        }
        {
            List<TrSalesTransactionHeaderDomain> theSaleTransactionHeader;
            theSaleTransactionHeader = this.getSaleTransactionHeader();
            strategy.appendField(locator, this, "saleTransactionHeader", buffer, theSaleTransactionHeader);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof TrPaymentAuthSubmitHeaderDomain)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final TrPaymentAuthSubmitHeaderDomain that = ((TrPaymentAuthSubmitHeaderDomain) object);
        {
            int lhsBatchTransactionId;
            lhsBatchTransactionId = this.getBatchTransactionId();
            int rhsBatchTransactionId;
            rhsBatchTransactionId = that.getBatchTransactionId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "batchTransactionId", lhsBatchTransactionId), LocatorUtils.property(thatLocator, "batchTransactionId", rhsBatchTransactionId), lhsBatchTransactionId, rhsBatchTransactionId)) {
                return false;
            }
        }
        {
            int lhsUserId;
            lhsUserId = this.getUserId();
            int rhsUserId;
            rhsUserId = that.getUserId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "userId", lhsUserId), LocatorUtils.property(thatLocator, "userId", rhsUserId), lhsUserId, rhsUserId)) {
                return false;
            }
        }
        {
            BigDecimal lhsSubtotal;
            lhsSubtotal = this.getSubtotal();
            BigDecimal rhsSubtotal;
            rhsSubtotal = that.getSubtotal();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "subtotal", lhsSubtotal), LocatorUtils.property(thatLocator, "subtotal", rhsSubtotal), lhsSubtotal, rhsSubtotal)) {
                return false;
            }
        }
        {
            BigDecimal lhsShipping;
            lhsShipping = this.getShipping();
            BigDecimal rhsShipping;
            rhsShipping = that.getShipping();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "shipping", lhsShipping), LocatorUtils.property(thatLocator, "shipping", rhsShipping), lhsShipping, rhsShipping)) {
                return false;
            }
        }
        {
            BigDecimal lhsTax;
            lhsTax = this.getTax();
            BigDecimal rhsTax;
            rhsTax = that.getTax();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "tax", lhsTax), LocatorUtils.property(thatLocator, "tax", rhsTax), lhsTax, rhsTax)) {
                return false;
            }
        }
        {
            BigDecimal lhsTotal;
            lhsTotal = this.getTotal();
            BigDecimal rhsTotal;
            rhsTotal = that.getTotal();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "total", lhsTotal), LocatorUtils.property(thatLocator, "total", rhsTotal), lhsTotal, rhsTotal)) {
                return false;
            }
        }
        {
            String lhsSecureToken;
            lhsSecureToken = this.getSecureToken();
            String rhsSecureToken;
            rhsSecureToken = that.getSecureToken();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "secureToken", lhsSecureToken), LocatorUtils.property(thatLocator, "secureToken", rhsSecureToken), lhsSecureToken, rhsSecureToken)) {
                return false;
            }
        }
        {
            int lhsCreatedby;
            lhsCreatedby = this.getCreatedby();
            int rhsCreatedby;
            rhsCreatedby = that.getCreatedby();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "createdby", lhsCreatedby), LocatorUtils.property(thatLocator, "createdby", rhsCreatedby), lhsCreatedby, rhsCreatedby)) {
                return false;
            }
        }
        {
            int lhsLastupdateby;
            lhsLastupdateby = this.getLastupdateby();
            int rhsLastupdateby;
            rhsLastupdateby = that.getLastupdateby();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lastupdateby", lhsLastupdateby), LocatorUtils.property(thatLocator, "lastupdateby", rhsLastupdateby), lhsLastupdateby, rhsLastupdateby)) {
                return false;
            }
        }
        {
            List<TrPaymentAuthSubmitDomain> lhsPaymentAuthSubnit;
            lhsPaymentAuthSubnit = this.getPaymentAuthSubnit();
            List<TrPaymentAuthSubmitDomain> rhsPaymentAuthSubnit;
            rhsPaymentAuthSubnit = that.getPaymentAuthSubnit();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "paymentAuthSubnit", lhsPaymentAuthSubnit), LocatorUtils.property(thatLocator, "paymentAuthSubnit", rhsPaymentAuthSubnit), lhsPaymentAuthSubnit, rhsPaymentAuthSubnit)) {
                return false;
            }
        }
        {
            List<TrSalesTransactionHeaderDomain> lhsSaleTransactionHeader;
            lhsSaleTransactionHeader = this.getSaleTransactionHeader();
            List<TrSalesTransactionHeaderDomain> rhsSaleTransactionHeader;
            rhsSaleTransactionHeader = that.getSaleTransactionHeader();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "saleTransactionHeader", lhsSaleTransactionHeader), LocatorUtils.property(thatLocator, "saleTransactionHeader", rhsSaleTransactionHeader), lhsSaleTransactionHeader, rhsSaleTransactionHeader)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            int theBatchTransactionId;
            theBatchTransactionId = this.getBatchTransactionId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "batchTransactionId", theBatchTransactionId), currentHashCode, theBatchTransactionId);
        }
        {
            int theUserId;
            theUserId = this.getUserId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "userId", theUserId), currentHashCode, theUserId);
        }
        {
            BigDecimal theSubtotal;
            theSubtotal = this.getSubtotal();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "subtotal", theSubtotal), currentHashCode, theSubtotal);
        }
        {
            BigDecimal theShipping;
            theShipping = this.getShipping();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "shipping", theShipping), currentHashCode, theShipping);
        }
        {
            BigDecimal theTax;
            theTax = this.getTax();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "tax", theTax), currentHashCode, theTax);
        }
        {
            BigDecimal theTotal;
            theTotal = this.getTotal();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "total", theTotal), currentHashCode, theTotal);
        }
        {
            String theSecureToken;
            theSecureToken = this.getSecureToken();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "secureToken", theSecureToken), currentHashCode, theSecureToken);
        }
        {
            int theCreatedby;
            theCreatedby = this.getCreatedby();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "createdby", theCreatedby), currentHashCode, theCreatedby);
        }
        {
            int theLastupdateby;
            theLastupdateby = this.getLastupdateby();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lastupdateby", theLastupdateby), currentHashCode, theLastupdateby);
        }
        {
            List<TrPaymentAuthSubmitDomain> thePaymentAuthSubnit;
            thePaymentAuthSubnit = this.getPaymentAuthSubnit();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "paymentAuthSubnit", thePaymentAuthSubnit), currentHashCode, thePaymentAuthSubnit);
        }
        {
            List<TrSalesTransactionHeaderDomain> theSaleTransactionHeader;
            theSaleTransactionHeader = this.getSaleTransactionHeader();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "saleTransactionHeader", theSaleTransactionHeader), currentHashCode, theSaleTransactionHeader);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof TrPaymentAuthSubmitHeaderDomain) {
            final TrPaymentAuthSubmitHeaderDomain copy = ((TrPaymentAuthSubmitHeaderDomain) draftCopy);
            int sourceBatchTransactionId;
            sourceBatchTransactionId = this.getBatchTransactionId();
            int copyBatchTransactionId = strategy.copy(LocatorUtils.property(locator, "batchTransactionId", sourceBatchTransactionId), sourceBatchTransactionId);
            copy.setBatchTransactionId(copyBatchTransactionId);
            int sourceUserId;
            sourceUserId = this.getUserId();
            int copyUserId = strategy.copy(LocatorUtils.property(locator, "userId", sourceUserId), sourceUserId);
            copy.setUserId(copyUserId);
            if (this.subtotal!= null) {
                BigDecimal sourceSubtotal;
                sourceSubtotal = this.getSubtotal();
                BigDecimal copySubtotal = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "subtotal", sourceSubtotal), sourceSubtotal));
                copy.setSubtotal(copySubtotal);
            } else {
                copy.subtotal = null;
            }
            if (this.shipping!= null) {
                BigDecimal sourceShipping;
                sourceShipping = this.getShipping();
                BigDecimal copyShipping = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "shipping", sourceShipping), sourceShipping));
                copy.setShipping(copyShipping);
            } else {
                copy.shipping = null;
            }
            if (this.tax!= null) {
                BigDecimal sourceTax;
                sourceTax = this.getTax();
                BigDecimal copyTax = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "tax", sourceTax), sourceTax));
                copy.setTax(copyTax);
            } else {
                copy.tax = null;
            }
            if (this.total!= null) {
                BigDecimal sourceTotal;
                sourceTotal = this.getTotal();
                BigDecimal copyTotal = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "total", sourceTotal), sourceTotal));
                copy.setTotal(copyTotal);
            } else {
                copy.total = null;
            }
            if (this.secureToken!= null) {
                String sourceSecureToken;
                sourceSecureToken = this.getSecureToken();
                String copySecureToken = ((String) strategy.copy(LocatorUtils.property(locator, "secureToken", sourceSecureToken), sourceSecureToken));
                copy.setSecureToken(copySecureToken);
            } else {
                copy.secureToken = null;
            }
            int sourceCreatedby;
            sourceCreatedby = this.getCreatedby();
            int copyCreatedby = strategy.copy(LocatorUtils.property(locator, "createdby", sourceCreatedby), sourceCreatedby);
            copy.setCreatedby(copyCreatedby);
            int sourceLastupdateby;
            sourceLastupdateby = this.getLastupdateby();
            int copyLastupdateby = strategy.copy(LocatorUtils.property(locator, "lastupdateby", sourceLastupdateby), sourceLastupdateby);
            copy.setLastupdateby(copyLastupdateby);
            if ((this.paymentAuthSubnit!= null)&&(!this.paymentAuthSubnit.isEmpty())) {
                List<TrPaymentAuthSubmitDomain> sourcePaymentAuthSubnit;
                sourcePaymentAuthSubnit = this.getPaymentAuthSubnit();
                @SuppressWarnings("unchecked")
                List<TrPaymentAuthSubmitDomain> copyPaymentAuthSubnit = ((List<TrPaymentAuthSubmitDomain> ) strategy.copy(LocatorUtils.property(locator, "paymentAuthSubnit", sourcePaymentAuthSubnit), sourcePaymentAuthSubnit));
                copy.paymentAuthSubnit = null;
                List<TrPaymentAuthSubmitDomain> uniquePaymentAuthSubnitl = copy.getPaymentAuthSubnit();
                uniquePaymentAuthSubnitl.addAll(copyPaymentAuthSubnit);
            } else {
                copy.paymentAuthSubnit = null;
            }
            if ((this.saleTransactionHeader!= null)&&(!this.saleTransactionHeader.isEmpty())) {
                List<TrSalesTransactionHeaderDomain> sourceSaleTransactionHeader;
                sourceSaleTransactionHeader = this.getSaleTransactionHeader();
                @SuppressWarnings("unchecked")
                List<TrSalesTransactionHeaderDomain> copySaleTransactionHeader = ((List<TrSalesTransactionHeaderDomain> ) strategy.copy(LocatorUtils.property(locator, "saleTransactionHeader", sourceSaleTransactionHeader), sourceSaleTransactionHeader));
                copy.saleTransactionHeader = null;
                List<TrSalesTransactionHeaderDomain> uniqueSaleTransactionHeaderl = copy.getSaleTransactionHeader();
                uniqueSaleTransactionHeaderl.addAll(copySaleTransactionHeader);
            } else {
                copy.saleTransactionHeader = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new TrPaymentAuthSubmitHeaderDomain();
    }

}
