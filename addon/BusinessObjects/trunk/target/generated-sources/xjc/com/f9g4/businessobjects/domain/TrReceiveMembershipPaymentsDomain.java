//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.2-7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.12.20 at 11:56:16 AM EST 
//


package com.f9g4.businessobjects.domain;

import java.math.BigDecimal;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.datatype.XMLGregorianCalendar;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for trReceiveMembershipPaymentsDomain complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="trReceiveMembershipPaymentsDomain">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="memberPaymentId">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="paymentTransmissionId">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="receivedTimeStamp">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}dateTime">
 *               &lt;minInclusive value="0001-01-01T00:00:00.000000000"/>
 *               &lt;maxInclusive value="9999-12-31T23:59:59.000000000"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="paymentAmount">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}decimal">
 *               &lt;totalDigits value="15"/>
 *               &lt;fractionDigits value="2"/>
 *               &lt;minExclusive value="-10000000000000"/>
 *               &lt;maxExclusive value="10000000000000"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="authStatusId">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="authCode">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *               &lt;maxLength value="240"/>
 *               &lt;minLength value="1"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="paymentError">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *               &lt;maxLength value="4000"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="secureToken">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *               &lt;maxLength value="1000"/>
 *               &lt;minLength value="1"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="createdby">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="lastupdateby">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "trReceiveMembershipPaymentsDomain", propOrder = {
    "memberPaymentId",
    "paymentTransmissionId",
    "receivedTimeStamp",
    "paymentAmount",
    "authStatusId",
    "authCode",
    "paymentError",
    "secureToken",
    "createdby",
    "lastupdateby"
})
public class TrReceiveMembershipPaymentsDomain implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected int memberPaymentId;
    protected int paymentTransmissionId;
    @XmlElement(required = true)
    protected XMLGregorianCalendar receivedTimeStamp;
    @XmlElement(required = true)
    protected BigDecimal paymentAmount;
    protected int authStatusId;
    @XmlElement(required = true)
    protected String authCode;
    @XmlElement(required = true)
    protected String paymentError;
    @XmlElement(required = true)
    protected String secureToken;
    protected int createdby;
    protected int lastupdateby;

    /**
     * Default no-arg constructor
     * 
     */
    public TrReceiveMembershipPaymentsDomain() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public TrReceiveMembershipPaymentsDomain(final int memberPaymentId, final int paymentTransmissionId, final XMLGregorianCalendar receivedTimeStamp, final BigDecimal paymentAmount, final int authStatusId, final String authCode, final String paymentError, final String secureToken, final int createdby, final int lastupdateby) {
        this.memberPaymentId = memberPaymentId;
        this.paymentTransmissionId = paymentTransmissionId;
        this.receivedTimeStamp = receivedTimeStamp;
        this.paymentAmount = paymentAmount;
        this.authStatusId = authStatusId;
        this.authCode = authCode;
        this.paymentError = paymentError;
        this.secureToken = secureToken;
        this.createdby = createdby;
        this.lastupdateby = lastupdateby;
    }

    /**
     * Gets the value of the memberPaymentId property.
     * 
     */
    public int getMemberPaymentId() {
        return memberPaymentId;
    }

    /**
     * Sets the value of the memberPaymentId property.
     * 
     */
    public void setMemberPaymentId(int value) {
        this.memberPaymentId = value;
    }

    /**
     * Gets the value of the paymentTransmissionId property.
     * 
     */
    public int getPaymentTransmissionId() {
        return paymentTransmissionId;
    }

    /**
     * Sets the value of the paymentTransmissionId property.
     * 
     */
    public void setPaymentTransmissionId(int value) {
        this.paymentTransmissionId = value;
    }

    /**
     * Gets the value of the receivedTimeStamp property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getReceivedTimeStamp() {
        return receivedTimeStamp;
    }

    /**
     * Sets the value of the receivedTimeStamp property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setReceivedTimeStamp(XMLGregorianCalendar value) {
        this.receivedTimeStamp = value;
    }

    /**
     * Gets the value of the paymentAmount property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getPaymentAmount() {
        return paymentAmount;
    }

    /**
     * Sets the value of the paymentAmount property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setPaymentAmount(BigDecimal value) {
        this.paymentAmount = value;
    }

    /**
     * Gets the value of the authStatusId property.
     * 
     */
    public int getAuthStatusId() {
        return authStatusId;
    }

    /**
     * Sets the value of the authStatusId property.
     * 
     */
    public void setAuthStatusId(int value) {
        this.authStatusId = value;
    }

    /**
     * Gets the value of the authCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getAuthCode() {
        return authCode;
    }

    /**
     * Sets the value of the authCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setAuthCode(String value) {
        this.authCode = value;
    }

    /**
     * Gets the value of the paymentError property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPaymentError() {
        return paymentError;
    }

    /**
     * Sets the value of the paymentError property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPaymentError(String value) {
        this.paymentError = value;
    }

    /**
     * Gets the value of the secureToken property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSecureToken() {
        return secureToken;
    }

    /**
     * Sets the value of the secureToken property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSecureToken(String value) {
        this.secureToken = value;
    }

    /**
     * Gets the value of the createdby property.
     * 
     */
    public int getCreatedby() {
        return createdby;
    }

    /**
     * Sets the value of the createdby property.
     * 
     */
    public void setCreatedby(int value) {
        this.createdby = value;
    }

    /**
     * Gets the value of the lastupdateby property.
     * 
     */
    public int getLastupdateby() {
        return lastupdateby;
    }

    /**
     * Sets the value of the lastupdateby property.
     * 
     */
    public void setLastupdateby(int value) {
        this.lastupdateby = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            int theMemberPaymentId;
            theMemberPaymentId = this.getMemberPaymentId();
            strategy.appendField(locator, this, "memberPaymentId", buffer, theMemberPaymentId);
        }
        {
            int thePaymentTransmissionId;
            thePaymentTransmissionId = this.getPaymentTransmissionId();
            strategy.appendField(locator, this, "paymentTransmissionId", buffer, thePaymentTransmissionId);
        }
        {
            XMLGregorianCalendar theReceivedTimeStamp;
            theReceivedTimeStamp = this.getReceivedTimeStamp();
            strategy.appendField(locator, this, "receivedTimeStamp", buffer, theReceivedTimeStamp);
        }
        {
            BigDecimal thePaymentAmount;
            thePaymentAmount = this.getPaymentAmount();
            strategy.appendField(locator, this, "paymentAmount", buffer, thePaymentAmount);
        }
        {
            int theAuthStatusId;
            theAuthStatusId = this.getAuthStatusId();
            strategy.appendField(locator, this, "authStatusId", buffer, theAuthStatusId);
        }
        {
            String theAuthCode;
            theAuthCode = this.getAuthCode();
            strategy.appendField(locator, this, "authCode", buffer, theAuthCode);
        }
        {
            String thePaymentError;
            thePaymentError = this.getPaymentError();
            strategy.appendField(locator, this, "paymentError", buffer, thePaymentError);
        }
        {
            String theSecureToken;
            theSecureToken = this.getSecureToken();
            strategy.appendField(locator, this, "secureToken", buffer, theSecureToken);
        }
        {
            int theCreatedby;
            theCreatedby = this.getCreatedby();
            strategy.appendField(locator, this, "createdby", buffer, theCreatedby);
        }
        {
            int theLastupdateby;
            theLastupdateby = this.getLastupdateby();
            strategy.appendField(locator, this, "lastupdateby", buffer, theLastupdateby);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof TrReceiveMembershipPaymentsDomain)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final TrReceiveMembershipPaymentsDomain that = ((TrReceiveMembershipPaymentsDomain) object);
        {
            int lhsMemberPaymentId;
            lhsMemberPaymentId = this.getMemberPaymentId();
            int rhsMemberPaymentId;
            rhsMemberPaymentId = that.getMemberPaymentId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "memberPaymentId", lhsMemberPaymentId), LocatorUtils.property(thatLocator, "memberPaymentId", rhsMemberPaymentId), lhsMemberPaymentId, rhsMemberPaymentId)) {
                return false;
            }
        }
        {
            int lhsPaymentTransmissionId;
            lhsPaymentTransmissionId = this.getPaymentTransmissionId();
            int rhsPaymentTransmissionId;
            rhsPaymentTransmissionId = that.getPaymentTransmissionId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "paymentTransmissionId", lhsPaymentTransmissionId), LocatorUtils.property(thatLocator, "paymentTransmissionId", rhsPaymentTransmissionId), lhsPaymentTransmissionId, rhsPaymentTransmissionId)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsReceivedTimeStamp;
            lhsReceivedTimeStamp = this.getReceivedTimeStamp();
            XMLGregorianCalendar rhsReceivedTimeStamp;
            rhsReceivedTimeStamp = that.getReceivedTimeStamp();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "receivedTimeStamp", lhsReceivedTimeStamp), LocatorUtils.property(thatLocator, "receivedTimeStamp", rhsReceivedTimeStamp), lhsReceivedTimeStamp, rhsReceivedTimeStamp)) {
                return false;
            }
        }
        {
            BigDecimal lhsPaymentAmount;
            lhsPaymentAmount = this.getPaymentAmount();
            BigDecimal rhsPaymentAmount;
            rhsPaymentAmount = that.getPaymentAmount();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "paymentAmount", lhsPaymentAmount), LocatorUtils.property(thatLocator, "paymentAmount", rhsPaymentAmount), lhsPaymentAmount, rhsPaymentAmount)) {
                return false;
            }
        }
        {
            int lhsAuthStatusId;
            lhsAuthStatusId = this.getAuthStatusId();
            int rhsAuthStatusId;
            rhsAuthStatusId = that.getAuthStatusId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "authStatusId", lhsAuthStatusId), LocatorUtils.property(thatLocator, "authStatusId", rhsAuthStatusId), lhsAuthStatusId, rhsAuthStatusId)) {
                return false;
            }
        }
        {
            String lhsAuthCode;
            lhsAuthCode = this.getAuthCode();
            String rhsAuthCode;
            rhsAuthCode = that.getAuthCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "authCode", lhsAuthCode), LocatorUtils.property(thatLocator, "authCode", rhsAuthCode), lhsAuthCode, rhsAuthCode)) {
                return false;
            }
        }
        {
            String lhsPaymentError;
            lhsPaymentError = this.getPaymentError();
            String rhsPaymentError;
            rhsPaymentError = that.getPaymentError();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "paymentError", lhsPaymentError), LocatorUtils.property(thatLocator, "paymentError", rhsPaymentError), lhsPaymentError, rhsPaymentError)) {
                return false;
            }
        }
        {
            String lhsSecureToken;
            lhsSecureToken = this.getSecureToken();
            String rhsSecureToken;
            rhsSecureToken = that.getSecureToken();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "secureToken", lhsSecureToken), LocatorUtils.property(thatLocator, "secureToken", rhsSecureToken), lhsSecureToken, rhsSecureToken)) {
                return false;
            }
        }
        {
            int lhsCreatedby;
            lhsCreatedby = this.getCreatedby();
            int rhsCreatedby;
            rhsCreatedby = that.getCreatedby();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "createdby", lhsCreatedby), LocatorUtils.property(thatLocator, "createdby", rhsCreatedby), lhsCreatedby, rhsCreatedby)) {
                return false;
            }
        }
        {
            int lhsLastupdateby;
            lhsLastupdateby = this.getLastupdateby();
            int rhsLastupdateby;
            rhsLastupdateby = that.getLastupdateby();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lastupdateby", lhsLastupdateby), LocatorUtils.property(thatLocator, "lastupdateby", rhsLastupdateby), lhsLastupdateby, rhsLastupdateby)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            int theMemberPaymentId;
            theMemberPaymentId = this.getMemberPaymentId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "memberPaymentId", theMemberPaymentId), currentHashCode, theMemberPaymentId);
        }
        {
            int thePaymentTransmissionId;
            thePaymentTransmissionId = this.getPaymentTransmissionId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "paymentTransmissionId", thePaymentTransmissionId), currentHashCode, thePaymentTransmissionId);
        }
        {
            XMLGregorianCalendar theReceivedTimeStamp;
            theReceivedTimeStamp = this.getReceivedTimeStamp();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "receivedTimeStamp", theReceivedTimeStamp), currentHashCode, theReceivedTimeStamp);
        }
        {
            BigDecimal thePaymentAmount;
            thePaymentAmount = this.getPaymentAmount();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "paymentAmount", thePaymentAmount), currentHashCode, thePaymentAmount);
        }
        {
            int theAuthStatusId;
            theAuthStatusId = this.getAuthStatusId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "authStatusId", theAuthStatusId), currentHashCode, theAuthStatusId);
        }
        {
            String theAuthCode;
            theAuthCode = this.getAuthCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "authCode", theAuthCode), currentHashCode, theAuthCode);
        }
        {
            String thePaymentError;
            thePaymentError = this.getPaymentError();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "paymentError", thePaymentError), currentHashCode, thePaymentError);
        }
        {
            String theSecureToken;
            theSecureToken = this.getSecureToken();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "secureToken", theSecureToken), currentHashCode, theSecureToken);
        }
        {
            int theCreatedby;
            theCreatedby = this.getCreatedby();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "createdby", theCreatedby), currentHashCode, theCreatedby);
        }
        {
            int theLastupdateby;
            theLastupdateby = this.getLastupdateby();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lastupdateby", theLastupdateby), currentHashCode, theLastupdateby);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof TrReceiveMembershipPaymentsDomain) {
            final TrReceiveMembershipPaymentsDomain copy = ((TrReceiveMembershipPaymentsDomain) draftCopy);
            int sourceMemberPaymentId;
            sourceMemberPaymentId = this.getMemberPaymentId();
            int copyMemberPaymentId = strategy.copy(LocatorUtils.property(locator, "memberPaymentId", sourceMemberPaymentId), sourceMemberPaymentId);
            copy.setMemberPaymentId(copyMemberPaymentId);
            int sourcePaymentTransmissionId;
            sourcePaymentTransmissionId = this.getPaymentTransmissionId();
            int copyPaymentTransmissionId = strategy.copy(LocatorUtils.property(locator, "paymentTransmissionId", sourcePaymentTransmissionId), sourcePaymentTransmissionId);
            copy.setPaymentTransmissionId(copyPaymentTransmissionId);
            if (this.receivedTimeStamp!= null) {
                XMLGregorianCalendar sourceReceivedTimeStamp;
                sourceReceivedTimeStamp = this.getReceivedTimeStamp();
                XMLGregorianCalendar copyReceivedTimeStamp = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "receivedTimeStamp", sourceReceivedTimeStamp), sourceReceivedTimeStamp));
                copy.setReceivedTimeStamp(copyReceivedTimeStamp);
            } else {
                copy.receivedTimeStamp = null;
            }
            if (this.paymentAmount!= null) {
                BigDecimal sourcePaymentAmount;
                sourcePaymentAmount = this.getPaymentAmount();
                BigDecimal copyPaymentAmount = ((BigDecimal) strategy.copy(LocatorUtils.property(locator, "paymentAmount", sourcePaymentAmount), sourcePaymentAmount));
                copy.setPaymentAmount(copyPaymentAmount);
            } else {
                copy.paymentAmount = null;
            }
            int sourceAuthStatusId;
            sourceAuthStatusId = this.getAuthStatusId();
            int copyAuthStatusId = strategy.copy(LocatorUtils.property(locator, "authStatusId", sourceAuthStatusId), sourceAuthStatusId);
            copy.setAuthStatusId(copyAuthStatusId);
            if (this.authCode!= null) {
                String sourceAuthCode;
                sourceAuthCode = this.getAuthCode();
                String copyAuthCode = ((String) strategy.copy(LocatorUtils.property(locator, "authCode", sourceAuthCode), sourceAuthCode));
                copy.setAuthCode(copyAuthCode);
            } else {
                copy.authCode = null;
            }
            if (this.paymentError!= null) {
                String sourcePaymentError;
                sourcePaymentError = this.getPaymentError();
                String copyPaymentError = ((String) strategy.copy(LocatorUtils.property(locator, "paymentError", sourcePaymentError), sourcePaymentError));
                copy.setPaymentError(copyPaymentError);
            } else {
                copy.paymentError = null;
            }
            if (this.secureToken!= null) {
                String sourceSecureToken;
                sourceSecureToken = this.getSecureToken();
                String copySecureToken = ((String) strategy.copy(LocatorUtils.property(locator, "secureToken", sourceSecureToken), sourceSecureToken));
                copy.setSecureToken(copySecureToken);
            } else {
                copy.secureToken = null;
            }
            int sourceCreatedby;
            sourceCreatedby = this.getCreatedby();
            int copyCreatedby = strategy.copy(LocatorUtils.property(locator, "createdby", sourceCreatedby), sourceCreatedby);
            copy.setCreatedby(copyCreatedby);
            int sourceLastupdateby;
            sourceLastupdateby = this.getLastupdateby();
            int copyLastupdateby = strategy.copy(LocatorUtils.property(locator, "lastupdateby", sourceLastupdateby), sourceLastupdateby);
            copy.setLastupdateby(copyLastupdateby);
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new TrReceiveMembershipPaymentsDomain();
    }

}
