//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.2-7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.12.20 at 11:56:16 AM EST 
//


package com.f9g4.businessobjects.domain;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import javax.xml.datatype.XMLGregorianCalendar;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for trSalesTransactionHeaderDomain complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="trSalesTransactionHeaderDomain">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="salesTransactionId">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="batchtransactionId">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="paymentAuthCode">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *               &lt;maxLength value="60"/>
 *               &lt;minLength value="1"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="secureToken">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *               &lt;maxLength value="1000"/>
 *               &lt;minLength value="1"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="paymentTimestamp">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}dateTime">
 *               &lt;minInclusive value="0001-01-01T00:00:00.000000000"/>
 *               &lt;maxInclusive value="9999-12-31T23:59:59.000000000"/>
 *               &lt;pattern value="\p{Nd}{4}-\p{Nd}{2}-\p{Nd}{2}T\p{Nd}{2}:\p{Nd}{2}:\p{Nd}{2}.\p{Nd}{1}"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="paymentStatusId">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="paymentErrorMessage">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *               &lt;maxLength value="4000"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="userId">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="createdby">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="lastupdateby">
 *           &lt;simpleType>
 *             &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int">
 *               &lt;minInclusive value="-2147483648"/>
 *               &lt;maxInclusive value="2147483647"/>
 *             &lt;/restriction>
 *           &lt;/simpleType>
 *         &lt;/element>
 *         &lt;element name="salesTransactionsDetails" type="{http://domain.businessobjects.f9g4.com}trSalesTransactionDetailsDomain" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "trSalesTransactionHeaderDomain", propOrder = {
    "salesTransactionId",
    "batchtransactionId",
    "paymentAuthCode",
    "secureToken",
    "paymentTimestamp",
    "paymentStatusId",
    "paymentErrorMessage",
    "userId",
    "createdby",
    "lastupdateby",
    "salesTransactionsDetails"
})
public class TrSalesTransactionHeaderDomain implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected int salesTransactionId;
    protected int batchtransactionId;
    @XmlElement(required = true)
    protected String paymentAuthCode;
    @XmlElement(required = true)
    protected String secureToken;
    @XmlElement(required = true)
    protected XMLGregorianCalendar paymentTimestamp;
    protected int paymentStatusId;
    @XmlElement(required = true)
    protected String paymentErrorMessage;
    protected int userId;
    protected int createdby;
    protected int lastupdateby;
    protected List<TrSalesTransactionDetailsDomain> salesTransactionsDetails;

    /**
     * Default no-arg constructor
     * 
     */
    public TrSalesTransactionHeaderDomain() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public TrSalesTransactionHeaderDomain(final int salesTransactionId, final int batchtransactionId, final String paymentAuthCode, final String secureToken, final XMLGregorianCalendar paymentTimestamp, final int paymentStatusId, final String paymentErrorMessage, final int userId, final int createdby, final int lastupdateby, final List<TrSalesTransactionDetailsDomain> salesTransactionsDetails) {
        this.salesTransactionId = salesTransactionId;
        this.batchtransactionId = batchtransactionId;
        this.paymentAuthCode = paymentAuthCode;
        this.secureToken = secureToken;
        this.paymentTimestamp = paymentTimestamp;
        this.paymentStatusId = paymentStatusId;
        this.paymentErrorMessage = paymentErrorMessage;
        this.userId = userId;
        this.createdby = createdby;
        this.lastupdateby = lastupdateby;
        this.salesTransactionsDetails = salesTransactionsDetails;
    }

    /**
     * Gets the value of the salesTransactionId property.
     * 
     */
    public int getSalesTransactionId() {
        return salesTransactionId;
    }

    /**
     * Sets the value of the salesTransactionId property.
     * 
     */
    public void setSalesTransactionId(int value) {
        this.salesTransactionId = value;
    }

    /**
     * Gets the value of the batchtransactionId property.
     * 
     */
    public int getBatchtransactionId() {
        return batchtransactionId;
    }

    /**
     * Sets the value of the batchtransactionId property.
     * 
     */
    public void setBatchtransactionId(int value) {
        this.batchtransactionId = value;
    }

    /**
     * Gets the value of the paymentAuthCode property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPaymentAuthCode() {
        return paymentAuthCode;
    }

    /**
     * Sets the value of the paymentAuthCode property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPaymentAuthCode(String value) {
        this.paymentAuthCode = value;
    }

    /**
     * Gets the value of the secureToken property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getSecureToken() {
        return secureToken;
    }

    /**
     * Sets the value of the secureToken property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setSecureToken(String value) {
        this.secureToken = value;
    }

    /**
     * Gets the value of the paymentTimestamp property.
     * 
     * @return
     *     possible object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public XMLGregorianCalendar getPaymentTimestamp() {
        return paymentTimestamp;
    }

    /**
     * Sets the value of the paymentTimestamp property.
     * 
     * @param value
     *     allowed object is
     *     {@link XMLGregorianCalendar }
     *     
     */
    public void setPaymentTimestamp(XMLGregorianCalendar value) {
        this.paymentTimestamp = value;
    }

    /**
     * Gets the value of the paymentStatusId property.
     * 
     */
    public int getPaymentStatusId() {
        return paymentStatusId;
    }

    /**
     * Sets the value of the paymentStatusId property.
     * 
     */
    public void setPaymentStatusId(int value) {
        this.paymentStatusId = value;
    }

    /**
     * Gets the value of the paymentErrorMessage property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPaymentErrorMessage() {
        return paymentErrorMessage;
    }

    /**
     * Sets the value of the paymentErrorMessage property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPaymentErrorMessage(String value) {
        this.paymentErrorMessage = value;
    }

    /**
     * Gets the value of the userId property.
     * 
     */
    public int getUserId() {
        return userId;
    }

    /**
     * Sets the value of the userId property.
     * 
     */
    public void setUserId(int value) {
        this.userId = value;
    }

    /**
     * Gets the value of the createdby property.
     * 
     */
    public int getCreatedby() {
        return createdby;
    }

    /**
     * Sets the value of the createdby property.
     * 
     */
    public void setCreatedby(int value) {
        this.createdby = value;
    }

    /**
     * Gets the value of the lastupdateby property.
     * 
     */
    public int getLastupdateby() {
        return lastupdateby;
    }

    /**
     * Sets the value of the lastupdateby property.
     * 
     */
    public void setLastupdateby(int value) {
        this.lastupdateby = value;
    }

    /**
     * Gets the value of the salesTransactionsDetails property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the salesTransactionsDetails property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getSalesTransactionsDetails().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TrSalesTransactionDetailsDomain }
     * 
     * 
     */
    public List<TrSalesTransactionDetailsDomain> getSalesTransactionsDetails() {
        if (salesTransactionsDetails == null) {
            salesTransactionsDetails = new ArrayList<TrSalesTransactionDetailsDomain>();
        }
        return this.salesTransactionsDetails;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            int theSalesTransactionId;
            theSalesTransactionId = this.getSalesTransactionId();
            strategy.appendField(locator, this, "salesTransactionId", buffer, theSalesTransactionId);
        }
        {
            int theBatchtransactionId;
            theBatchtransactionId = this.getBatchtransactionId();
            strategy.appendField(locator, this, "batchtransactionId", buffer, theBatchtransactionId);
        }
        {
            String thePaymentAuthCode;
            thePaymentAuthCode = this.getPaymentAuthCode();
            strategy.appendField(locator, this, "paymentAuthCode", buffer, thePaymentAuthCode);
        }
        {
            String theSecureToken;
            theSecureToken = this.getSecureToken();
            strategy.appendField(locator, this, "secureToken", buffer, theSecureToken);
        }
        {
            XMLGregorianCalendar thePaymentTimestamp;
            thePaymentTimestamp = this.getPaymentTimestamp();
            strategy.appendField(locator, this, "paymentTimestamp", buffer, thePaymentTimestamp);
        }
        {
            int thePaymentStatusId;
            thePaymentStatusId = this.getPaymentStatusId();
            strategy.appendField(locator, this, "paymentStatusId", buffer, thePaymentStatusId);
        }
        {
            String thePaymentErrorMessage;
            thePaymentErrorMessage = this.getPaymentErrorMessage();
            strategy.appendField(locator, this, "paymentErrorMessage", buffer, thePaymentErrorMessage);
        }
        {
            int theUserId;
            theUserId = this.getUserId();
            strategy.appendField(locator, this, "userId", buffer, theUserId);
        }
        {
            int theCreatedby;
            theCreatedby = this.getCreatedby();
            strategy.appendField(locator, this, "createdby", buffer, theCreatedby);
        }
        {
            int theLastupdateby;
            theLastupdateby = this.getLastupdateby();
            strategy.appendField(locator, this, "lastupdateby", buffer, theLastupdateby);
        }
        {
            List<TrSalesTransactionDetailsDomain> theSalesTransactionsDetails;
            theSalesTransactionsDetails = this.getSalesTransactionsDetails();
            strategy.appendField(locator, this, "salesTransactionsDetails", buffer, theSalesTransactionsDetails);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof TrSalesTransactionHeaderDomain)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final TrSalesTransactionHeaderDomain that = ((TrSalesTransactionHeaderDomain) object);
        {
            int lhsSalesTransactionId;
            lhsSalesTransactionId = this.getSalesTransactionId();
            int rhsSalesTransactionId;
            rhsSalesTransactionId = that.getSalesTransactionId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "salesTransactionId", lhsSalesTransactionId), LocatorUtils.property(thatLocator, "salesTransactionId", rhsSalesTransactionId), lhsSalesTransactionId, rhsSalesTransactionId)) {
                return false;
            }
        }
        {
            int lhsBatchtransactionId;
            lhsBatchtransactionId = this.getBatchtransactionId();
            int rhsBatchtransactionId;
            rhsBatchtransactionId = that.getBatchtransactionId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "batchtransactionId", lhsBatchtransactionId), LocatorUtils.property(thatLocator, "batchtransactionId", rhsBatchtransactionId), lhsBatchtransactionId, rhsBatchtransactionId)) {
                return false;
            }
        }
        {
            String lhsPaymentAuthCode;
            lhsPaymentAuthCode = this.getPaymentAuthCode();
            String rhsPaymentAuthCode;
            rhsPaymentAuthCode = that.getPaymentAuthCode();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "paymentAuthCode", lhsPaymentAuthCode), LocatorUtils.property(thatLocator, "paymentAuthCode", rhsPaymentAuthCode), lhsPaymentAuthCode, rhsPaymentAuthCode)) {
                return false;
            }
        }
        {
            String lhsSecureToken;
            lhsSecureToken = this.getSecureToken();
            String rhsSecureToken;
            rhsSecureToken = that.getSecureToken();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "secureToken", lhsSecureToken), LocatorUtils.property(thatLocator, "secureToken", rhsSecureToken), lhsSecureToken, rhsSecureToken)) {
                return false;
            }
        }
        {
            XMLGregorianCalendar lhsPaymentTimestamp;
            lhsPaymentTimestamp = this.getPaymentTimestamp();
            XMLGregorianCalendar rhsPaymentTimestamp;
            rhsPaymentTimestamp = that.getPaymentTimestamp();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "paymentTimestamp", lhsPaymentTimestamp), LocatorUtils.property(thatLocator, "paymentTimestamp", rhsPaymentTimestamp), lhsPaymentTimestamp, rhsPaymentTimestamp)) {
                return false;
            }
        }
        {
            int lhsPaymentStatusId;
            lhsPaymentStatusId = this.getPaymentStatusId();
            int rhsPaymentStatusId;
            rhsPaymentStatusId = that.getPaymentStatusId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "paymentStatusId", lhsPaymentStatusId), LocatorUtils.property(thatLocator, "paymentStatusId", rhsPaymentStatusId), lhsPaymentStatusId, rhsPaymentStatusId)) {
                return false;
            }
        }
        {
            String lhsPaymentErrorMessage;
            lhsPaymentErrorMessage = this.getPaymentErrorMessage();
            String rhsPaymentErrorMessage;
            rhsPaymentErrorMessage = that.getPaymentErrorMessage();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "paymentErrorMessage", lhsPaymentErrorMessage), LocatorUtils.property(thatLocator, "paymentErrorMessage", rhsPaymentErrorMessage), lhsPaymentErrorMessage, rhsPaymentErrorMessage)) {
                return false;
            }
        }
        {
            int lhsUserId;
            lhsUserId = this.getUserId();
            int rhsUserId;
            rhsUserId = that.getUserId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "userId", lhsUserId), LocatorUtils.property(thatLocator, "userId", rhsUserId), lhsUserId, rhsUserId)) {
                return false;
            }
        }
        {
            int lhsCreatedby;
            lhsCreatedby = this.getCreatedby();
            int rhsCreatedby;
            rhsCreatedby = that.getCreatedby();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "createdby", lhsCreatedby), LocatorUtils.property(thatLocator, "createdby", rhsCreatedby), lhsCreatedby, rhsCreatedby)) {
                return false;
            }
        }
        {
            int lhsLastupdateby;
            lhsLastupdateby = this.getLastupdateby();
            int rhsLastupdateby;
            rhsLastupdateby = that.getLastupdateby();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "lastupdateby", lhsLastupdateby), LocatorUtils.property(thatLocator, "lastupdateby", rhsLastupdateby), lhsLastupdateby, rhsLastupdateby)) {
                return false;
            }
        }
        {
            List<TrSalesTransactionDetailsDomain> lhsSalesTransactionsDetails;
            lhsSalesTransactionsDetails = this.getSalesTransactionsDetails();
            List<TrSalesTransactionDetailsDomain> rhsSalesTransactionsDetails;
            rhsSalesTransactionsDetails = that.getSalesTransactionsDetails();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "salesTransactionsDetails", lhsSalesTransactionsDetails), LocatorUtils.property(thatLocator, "salesTransactionsDetails", rhsSalesTransactionsDetails), lhsSalesTransactionsDetails, rhsSalesTransactionsDetails)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            int theSalesTransactionId;
            theSalesTransactionId = this.getSalesTransactionId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "salesTransactionId", theSalesTransactionId), currentHashCode, theSalesTransactionId);
        }
        {
            int theBatchtransactionId;
            theBatchtransactionId = this.getBatchtransactionId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "batchtransactionId", theBatchtransactionId), currentHashCode, theBatchtransactionId);
        }
        {
            String thePaymentAuthCode;
            thePaymentAuthCode = this.getPaymentAuthCode();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "paymentAuthCode", thePaymentAuthCode), currentHashCode, thePaymentAuthCode);
        }
        {
            String theSecureToken;
            theSecureToken = this.getSecureToken();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "secureToken", theSecureToken), currentHashCode, theSecureToken);
        }
        {
            XMLGregorianCalendar thePaymentTimestamp;
            thePaymentTimestamp = this.getPaymentTimestamp();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "paymentTimestamp", thePaymentTimestamp), currentHashCode, thePaymentTimestamp);
        }
        {
            int thePaymentStatusId;
            thePaymentStatusId = this.getPaymentStatusId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "paymentStatusId", thePaymentStatusId), currentHashCode, thePaymentStatusId);
        }
        {
            String thePaymentErrorMessage;
            thePaymentErrorMessage = this.getPaymentErrorMessage();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "paymentErrorMessage", thePaymentErrorMessage), currentHashCode, thePaymentErrorMessage);
        }
        {
            int theUserId;
            theUserId = this.getUserId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "userId", theUserId), currentHashCode, theUserId);
        }
        {
            int theCreatedby;
            theCreatedby = this.getCreatedby();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "createdby", theCreatedby), currentHashCode, theCreatedby);
        }
        {
            int theLastupdateby;
            theLastupdateby = this.getLastupdateby();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "lastupdateby", theLastupdateby), currentHashCode, theLastupdateby);
        }
        {
            List<TrSalesTransactionDetailsDomain> theSalesTransactionsDetails;
            theSalesTransactionsDetails = this.getSalesTransactionsDetails();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "salesTransactionsDetails", theSalesTransactionsDetails), currentHashCode, theSalesTransactionsDetails);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof TrSalesTransactionHeaderDomain) {
            final TrSalesTransactionHeaderDomain copy = ((TrSalesTransactionHeaderDomain) draftCopy);
            int sourceSalesTransactionId;
            sourceSalesTransactionId = this.getSalesTransactionId();
            int copySalesTransactionId = strategy.copy(LocatorUtils.property(locator, "salesTransactionId", sourceSalesTransactionId), sourceSalesTransactionId);
            copy.setSalesTransactionId(copySalesTransactionId);
            int sourceBatchtransactionId;
            sourceBatchtransactionId = this.getBatchtransactionId();
            int copyBatchtransactionId = strategy.copy(LocatorUtils.property(locator, "batchtransactionId", sourceBatchtransactionId), sourceBatchtransactionId);
            copy.setBatchtransactionId(copyBatchtransactionId);
            if (this.paymentAuthCode!= null) {
                String sourcePaymentAuthCode;
                sourcePaymentAuthCode = this.getPaymentAuthCode();
                String copyPaymentAuthCode = ((String) strategy.copy(LocatorUtils.property(locator, "paymentAuthCode", sourcePaymentAuthCode), sourcePaymentAuthCode));
                copy.setPaymentAuthCode(copyPaymentAuthCode);
            } else {
                copy.paymentAuthCode = null;
            }
            if (this.secureToken!= null) {
                String sourceSecureToken;
                sourceSecureToken = this.getSecureToken();
                String copySecureToken = ((String) strategy.copy(LocatorUtils.property(locator, "secureToken", sourceSecureToken), sourceSecureToken));
                copy.setSecureToken(copySecureToken);
            } else {
                copy.secureToken = null;
            }
            if (this.paymentTimestamp!= null) {
                XMLGregorianCalendar sourcePaymentTimestamp;
                sourcePaymentTimestamp = this.getPaymentTimestamp();
                XMLGregorianCalendar copyPaymentTimestamp = ((XMLGregorianCalendar) strategy.copy(LocatorUtils.property(locator, "paymentTimestamp", sourcePaymentTimestamp), sourcePaymentTimestamp));
                copy.setPaymentTimestamp(copyPaymentTimestamp);
            } else {
                copy.paymentTimestamp = null;
            }
            int sourcePaymentStatusId;
            sourcePaymentStatusId = this.getPaymentStatusId();
            int copyPaymentStatusId = strategy.copy(LocatorUtils.property(locator, "paymentStatusId", sourcePaymentStatusId), sourcePaymentStatusId);
            copy.setPaymentStatusId(copyPaymentStatusId);
            if (this.paymentErrorMessage!= null) {
                String sourcePaymentErrorMessage;
                sourcePaymentErrorMessage = this.getPaymentErrorMessage();
                String copyPaymentErrorMessage = ((String) strategy.copy(LocatorUtils.property(locator, "paymentErrorMessage", sourcePaymentErrorMessage), sourcePaymentErrorMessage));
                copy.setPaymentErrorMessage(copyPaymentErrorMessage);
            } else {
                copy.paymentErrorMessage = null;
            }
            int sourceUserId;
            sourceUserId = this.getUserId();
            int copyUserId = strategy.copy(LocatorUtils.property(locator, "userId", sourceUserId), sourceUserId);
            copy.setUserId(copyUserId);
            int sourceCreatedby;
            sourceCreatedby = this.getCreatedby();
            int copyCreatedby = strategy.copy(LocatorUtils.property(locator, "createdby", sourceCreatedby), sourceCreatedby);
            copy.setCreatedby(copyCreatedby);
            int sourceLastupdateby;
            sourceLastupdateby = this.getLastupdateby();
            int copyLastupdateby = strategy.copy(LocatorUtils.property(locator, "lastupdateby", sourceLastupdateby), sourceLastupdateby);
            copy.setLastupdateby(copyLastupdateby);
            if ((this.salesTransactionsDetails!= null)&&(!this.salesTransactionsDetails.isEmpty())) {
                List<TrSalesTransactionDetailsDomain> sourceSalesTransactionsDetails;
                sourceSalesTransactionsDetails = this.getSalesTransactionsDetails();
                @SuppressWarnings("unchecked")
                List<TrSalesTransactionDetailsDomain> copySalesTransactionsDetails = ((List<TrSalesTransactionDetailsDomain> ) strategy.copy(LocatorUtils.property(locator, "salesTransactionsDetails", sourceSalesTransactionsDetails), sourceSalesTransactionsDetails));
                copy.salesTransactionsDetails = null;
                List<TrSalesTransactionDetailsDomain> uniqueSalesTransactionsDetailsl = copy.getSalesTransactionsDetails();
                uniqueSalesTransactionsDetailsl.addAll(copySalesTransactionsDetails);
            } else {
                copy.salesTransactionsDetails = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new TrSalesTransactionHeaderDomain();
    }

}
