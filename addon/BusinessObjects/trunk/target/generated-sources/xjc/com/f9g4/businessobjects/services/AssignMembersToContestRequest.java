//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.2-7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.12.20 at 11:56:16 AM EST 
//


package com.f9g4.businessobjects.services;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import com.f9g4.businessobjects.domain.TrPortfolioContestMembersDomain;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for AssignMembersToContestRequest complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AssignMembersToContestRequest">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="portfolioid" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *         &lt;element name="member" type="{http://domain.businessobjects.f9g4.com}trPortfolioContestMembersDomain" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AssignMembersToContestRequest", propOrder = {
    "portfolioid",
    "member"
})
@XmlRootElement(name = "AssignMembersToContestRequest")
public class AssignMembersToContestRequest implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    protected int portfolioid;
    protected List<TrPortfolioContestMembersDomain> member;

    /**
     * Default no-arg constructor
     * 
     */
    public AssignMembersToContestRequest() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public AssignMembersToContestRequest(final int portfolioid, final List<TrPortfolioContestMembersDomain> member) {
        this.portfolioid = portfolioid;
        this.member = member;
    }

    /**
     * Gets the value of the portfolioid property.
     * 
     */
    public int getPortfolioid() {
        return portfolioid;
    }

    /**
     * Sets the value of the portfolioid property.
     * 
     */
    public void setPortfolioid(int value) {
        this.portfolioid = value;
    }

    /**
     * Gets the value of the member property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the member property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getMember().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TrPortfolioContestMembersDomain }
     * 
     * 
     */
    public List<TrPortfolioContestMembersDomain> getMember() {
        if (member == null) {
            member = new ArrayList<TrPortfolioContestMembersDomain>();
        }
        return this.member;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            int thePortfolioid;
            thePortfolioid = this.getPortfolioid();
            strategy.appendField(locator, this, "portfolioid", buffer, thePortfolioid);
        }
        {
            List<TrPortfolioContestMembersDomain> theMember;
            theMember = this.getMember();
            strategy.appendField(locator, this, "member", buffer, theMember);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof AssignMembersToContestRequest)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final AssignMembersToContestRequest that = ((AssignMembersToContestRequest) object);
        {
            int lhsPortfolioid;
            lhsPortfolioid = this.getPortfolioid();
            int rhsPortfolioid;
            rhsPortfolioid = that.getPortfolioid();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "portfolioid", lhsPortfolioid), LocatorUtils.property(thatLocator, "portfolioid", rhsPortfolioid), lhsPortfolioid, rhsPortfolioid)) {
                return false;
            }
        }
        {
            List<TrPortfolioContestMembersDomain> lhsMember;
            lhsMember = this.getMember();
            List<TrPortfolioContestMembersDomain> rhsMember;
            rhsMember = that.getMember();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "member", lhsMember), LocatorUtils.property(thatLocator, "member", rhsMember), lhsMember, rhsMember)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            int thePortfolioid;
            thePortfolioid = this.getPortfolioid();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "portfolioid", thePortfolioid), currentHashCode, thePortfolioid);
        }
        {
            List<TrPortfolioContestMembersDomain> theMember;
            theMember = this.getMember();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "member", theMember), currentHashCode, theMember);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof AssignMembersToContestRequest) {
            final AssignMembersToContestRequest copy = ((AssignMembersToContestRequest) draftCopy);
            int sourcePortfolioid;
            sourcePortfolioid = this.getPortfolioid();
            int copyPortfolioid = strategy.copy(LocatorUtils.property(locator, "portfolioid", sourcePortfolioid), sourcePortfolioid);
            copy.setPortfolioid(copyPortfolioid);
            if ((this.member!= null)&&(!this.member.isEmpty())) {
                List<TrPortfolioContestMembersDomain> sourceMember;
                sourceMember = this.getMember();
                @SuppressWarnings("unchecked")
                List<TrPortfolioContestMembersDomain> copyMember = ((List<TrPortfolioContestMembersDomain> ) strategy.copy(LocatorUtils.property(locator, "member", sourceMember), sourceMember));
                copy.member = null;
                List<TrPortfolioContestMembersDomain> uniqueMemberl = copy.getMember();
                uniqueMemberl.addAll(copyMember);
            } else {
                copy.member = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new AssignMembersToContestRequest();
    }

}
