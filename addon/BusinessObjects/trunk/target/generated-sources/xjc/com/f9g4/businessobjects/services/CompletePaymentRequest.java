//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.2-7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.12.20 at 11:56:16 AM EST 
//


package com.f9g4.businessobjects.services;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for CompletePaymentRequest complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="CompletePaymentRequest">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="paymentToken" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="payerID" type="{http://www.w3.org/2001/XMLSchema}string" minOccurs="0"/>
 *         &lt;element name="orderItem" type="{http://services.businessobjects.f9g4.com}OrderItem" maxOccurs="unbounded"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CompletePaymentRequest", propOrder = {
    "paymentToken",
    "payerID",
    "orderItem"
})
@XmlRootElement(name = "CompletePaymentRequest")
public class CompletePaymentRequest implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(required = true)
    protected String paymentToken;
    protected String payerID;
    @XmlElement(required = true)
    protected List<OrderItem> orderItem;

    /**
     * Default no-arg constructor
     * 
     */
    public CompletePaymentRequest() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public CompletePaymentRequest(final String paymentToken, final String payerID, final List<OrderItem> orderItem) {
        this.paymentToken = paymentToken;
        this.payerID = payerID;
        this.orderItem = orderItem;
    }

    /**
     * Gets the value of the paymentToken property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPaymentToken() {
        return paymentToken;
    }

    /**
     * Sets the value of the paymentToken property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPaymentToken(String value) {
        this.paymentToken = value;
    }

    /**
     * Gets the value of the payerID property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getPayerID() {
        return payerID;
    }

    /**
     * Sets the value of the payerID property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setPayerID(String value) {
        this.payerID = value;
    }

    /**
     * Gets the value of the orderItem property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the orderItem property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getOrderItem().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link OrderItem }
     * 
     * 
     */
    public List<OrderItem> getOrderItem() {
        if (orderItem == null) {
            orderItem = new ArrayList<OrderItem>();
        }
        return this.orderItem;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            String thePaymentToken;
            thePaymentToken = this.getPaymentToken();
            strategy.appendField(locator, this, "paymentToken", buffer, thePaymentToken);
        }
        {
            String thePayerID;
            thePayerID = this.getPayerID();
            strategy.appendField(locator, this, "payerID", buffer, thePayerID);
        }
        {
            List<OrderItem> theOrderItem;
            theOrderItem = this.getOrderItem();
            strategy.appendField(locator, this, "orderItem", buffer, theOrderItem);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof CompletePaymentRequest)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final CompletePaymentRequest that = ((CompletePaymentRequest) object);
        {
            String lhsPaymentToken;
            lhsPaymentToken = this.getPaymentToken();
            String rhsPaymentToken;
            rhsPaymentToken = that.getPaymentToken();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "paymentToken", lhsPaymentToken), LocatorUtils.property(thatLocator, "paymentToken", rhsPaymentToken), lhsPaymentToken, rhsPaymentToken)) {
                return false;
            }
        }
        {
            String lhsPayerID;
            lhsPayerID = this.getPayerID();
            String rhsPayerID;
            rhsPayerID = that.getPayerID();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "payerID", lhsPayerID), LocatorUtils.property(thatLocator, "payerID", rhsPayerID), lhsPayerID, rhsPayerID)) {
                return false;
            }
        }
        {
            List<OrderItem> lhsOrderItem;
            lhsOrderItem = this.getOrderItem();
            List<OrderItem> rhsOrderItem;
            rhsOrderItem = that.getOrderItem();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "orderItem", lhsOrderItem), LocatorUtils.property(thatLocator, "orderItem", rhsOrderItem), lhsOrderItem, rhsOrderItem)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            String thePaymentToken;
            thePaymentToken = this.getPaymentToken();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "paymentToken", thePaymentToken), currentHashCode, thePaymentToken);
        }
        {
            String thePayerID;
            thePayerID = this.getPayerID();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "payerID", thePayerID), currentHashCode, thePayerID);
        }
        {
            List<OrderItem> theOrderItem;
            theOrderItem = this.getOrderItem();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "orderItem", theOrderItem), currentHashCode, theOrderItem);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof CompletePaymentRequest) {
            final CompletePaymentRequest copy = ((CompletePaymentRequest) draftCopy);
            if (this.paymentToken!= null) {
                String sourcePaymentToken;
                sourcePaymentToken = this.getPaymentToken();
                String copyPaymentToken = ((String) strategy.copy(LocatorUtils.property(locator, "paymentToken", sourcePaymentToken), sourcePaymentToken));
                copy.setPaymentToken(copyPaymentToken);
            } else {
                copy.paymentToken = null;
            }
            if (this.payerID!= null) {
                String sourcePayerID;
                sourcePayerID = this.getPayerID();
                String copyPayerID = ((String) strategy.copy(LocatorUtils.property(locator, "payerID", sourcePayerID), sourcePayerID));
                copy.setPayerID(copyPayerID);
            } else {
                copy.payerID = null;
            }
            if ((this.orderItem!= null)&&(!this.orderItem.isEmpty())) {
                List<OrderItem> sourceOrderItem;
                sourceOrderItem = this.getOrderItem();
                @SuppressWarnings("unchecked")
                List<OrderItem> copyOrderItem = ((List<OrderItem> ) strategy.copy(LocatorUtils.property(locator, "orderItem", sourceOrderItem), sourceOrderItem));
                copy.orderItem = null;
                List<OrderItem> uniqueOrderIteml = copy.getOrderItem();
                uniqueOrderIteml.addAll(copyOrderItem);
            } else {
                copy.orderItem = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new CompletePaymentRequest();
    }

}
