//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.2-7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.12.20 at 11:56:16 AM EST 
//


package com.f9g4.businessobjects.services;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import com.f9g4.businessobjects.domain.TrPaymentAuthSubmitDomain;
import com.f9g4.businessobjects.domain.TrPaymentAuthSubmitHeaderDomain;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for CreatePaymentAuthSubmitRequest complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="CreatePaymentAuthSubmitRequest">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="paymentAuthSubmitHeader" type="{http://domain.businessobjects.f9g4.com}trPaymentAuthSubmitHeaderDomain"/>
 *         &lt;element name="paymentAuthSubmit" type="{http://domain.businessobjects.f9g4.com}trPaymentAuthSubmitDomain" maxOccurs="unbounded"/>
 *         &lt;element name="returnUrl" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="cancelUrl" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *         &lt;element name="ipnUrl" type="{http://www.w3.org/2001/XMLSchema}string"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CreatePaymentAuthSubmitRequest", propOrder = {
    "paymentAuthSubmitHeader",
    "paymentAuthSubmit",
    "returnUrl",
    "cancelUrl",
    "ipnUrl"
})
@XmlRootElement(name = "CreatePaymentAuthSubmitRequest")
public class CreatePaymentAuthSubmitRequest implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(required = true)
    protected TrPaymentAuthSubmitHeaderDomain paymentAuthSubmitHeader;
    @XmlElement(required = true)
    protected List<TrPaymentAuthSubmitDomain> paymentAuthSubmit;
    @XmlElement(required = true)
    protected String returnUrl;
    @XmlElement(required = true)
    protected String cancelUrl;
    @XmlElement(required = true)
    protected String ipnUrl;

    /**
     * Default no-arg constructor
     * 
     */
    public CreatePaymentAuthSubmitRequest() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public CreatePaymentAuthSubmitRequest(final TrPaymentAuthSubmitHeaderDomain paymentAuthSubmitHeader, final List<TrPaymentAuthSubmitDomain> paymentAuthSubmit, final String returnUrl, final String cancelUrl, final String ipnUrl) {
        this.paymentAuthSubmitHeader = paymentAuthSubmitHeader;
        this.paymentAuthSubmit = paymentAuthSubmit;
        this.returnUrl = returnUrl;
        this.cancelUrl = cancelUrl;
        this.ipnUrl = ipnUrl;
    }

    /**
     * Gets the value of the paymentAuthSubmitHeader property.
     * 
     * @return
     *     possible object is
     *     {@link TrPaymentAuthSubmitHeaderDomain }
     *     
     */
    public TrPaymentAuthSubmitHeaderDomain getPaymentAuthSubmitHeader() {
        return paymentAuthSubmitHeader;
    }

    /**
     * Sets the value of the paymentAuthSubmitHeader property.
     * 
     * @param value
     *     allowed object is
     *     {@link TrPaymentAuthSubmitHeaderDomain }
     *     
     */
    public void setPaymentAuthSubmitHeader(TrPaymentAuthSubmitHeaderDomain value) {
        this.paymentAuthSubmitHeader = value;
    }

    /**
     * Gets the value of the paymentAuthSubmit property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the paymentAuthSubmit property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getPaymentAuthSubmit().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TrPaymentAuthSubmitDomain }
     * 
     * 
     */
    public List<TrPaymentAuthSubmitDomain> getPaymentAuthSubmit() {
        if (paymentAuthSubmit == null) {
            paymentAuthSubmit = new ArrayList<TrPaymentAuthSubmitDomain>();
        }
        return this.paymentAuthSubmit;
    }

    /**
     * Gets the value of the returnUrl property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getReturnUrl() {
        return returnUrl;
    }

    /**
     * Sets the value of the returnUrl property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setReturnUrl(String value) {
        this.returnUrl = value;
    }

    /**
     * Gets the value of the cancelUrl property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getCancelUrl() {
        return cancelUrl;
    }

    /**
     * Sets the value of the cancelUrl property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setCancelUrl(String value) {
        this.cancelUrl = value;
    }

    /**
     * Gets the value of the ipnUrl property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getIpnUrl() {
        return ipnUrl;
    }

    /**
     * Sets the value of the ipnUrl property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setIpnUrl(String value) {
        this.ipnUrl = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            TrPaymentAuthSubmitHeaderDomain thePaymentAuthSubmitHeader;
            thePaymentAuthSubmitHeader = this.getPaymentAuthSubmitHeader();
            strategy.appendField(locator, this, "paymentAuthSubmitHeader", buffer, thePaymentAuthSubmitHeader);
        }
        {
            List<TrPaymentAuthSubmitDomain> thePaymentAuthSubmit;
            thePaymentAuthSubmit = this.getPaymentAuthSubmit();
            strategy.appendField(locator, this, "paymentAuthSubmit", buffer, thePaymentAuthSubmit);
        }
        {
            String theReturnUrl;
            theReturnUrl = this.getReturnUrl();
            strategy.appendField(locator, this, "returnUrl", buffer, theReturnUrl);
        }
        {
            String theCancelUrl;
            theCancelUrl = this.getCancelUrl();
            strategy.appendField(locator, this, "cancelUrl", buffer, theCancelUrl);
        }
        {
            String theIpnUrl;
            theIpnUrl = this.getIpnUrl();
            strategy.appendField(locator, this, "ipnUrl", buffer, theIpnUrl);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof CreatePaymentAuthSubmitRequest)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final CreatePaymentAuthSubmitRequest that = ((CreatePaymentAuthSubmitRequest) object);
        {
            TrPaymentAuthSubmitHeaderDomain lhsPaymentAuthSubmitHeader;
            lhsPaymentAuthSubmitHeader = this.getPaymentAuthSubmitHeader();
            TrPaymentAuthSubmitHeaderDomain rhsPaymentAuthSubmitHeader;
            rhsPaymentAuthSubmitHeader = that.getPaymentAuthSubmitHeader();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "paymentAuthSubmitHeader", lhsPaymentAuthSubmitHeader), LocatorUtils.property(thatLocator, "paymentAuthSubmitHeader", rhsPaymentAuthSubmitHeader), lhsPaymentAuthSubmitHeader, rhsPaymentAuthSubmitHeader)) {
                return false;
            }
        }
        {
            List<TrPaymentAuthSubmitDomain> lhsPaymentAuthSubmit;
            lhsPaymentAuthSubmit = this.getPaymentAuthSubmit();
            List<TrPaymentAuthSubmitDomain> rhsPaymentAuthSubmit;
            rhsPaymentAuthSubmit = that.getPaymentAuthSubmit();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "paymentAuthSubmit", lhsPaymentAuthSubmit), LocatorUtils.property(thatLocator, "paymentAuthSubmit", rhsPaymentAuthSubmit), lhsPaymentAuthSubmit, rhsPaymentAuthSubmit)) {
                return false;
            }
        }
        {
            String lhsReturnUrl;
            lhsReturnUrl = this.getReturnUrl();
            String rhsReturnUrl;
            rhsReturnUrl = that.getReturnUrl();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "returnUrl", lhsReturnUrl), LocatorUtils.property(thatLocator, "returnUrl", rhsReturnUrl), lhsReturnUrl, rhsReturnUrl)) {
                return false;
            }
        }
        {
            String lhsCancelUrl;
            lhsCancelUrl = this.getCancelUrl();
            String rhsCancelUrl;
            rhsCancelUrl = that.getCancelUrl();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "cancelUrl", lhsCancelUrl), LocatorUtils.property(thatLocator, "cancelUrl", rhsCancelUrl), lhsCancelUrl, rhsCancelUrl)) {
                return false;
            }
        }
        {
            String lhsIpnUrl;
            lhsIpnUrl = this.getIpnUrl();
            String rhsIpnUrl;
            rhsIpnUrl = that.getIpnUrl();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "ipnUrl", lhsIpnUrl), LocatorUtils.property(thatLocator, "ipnUrl", rhsIpnUrl), lhsIpnUrl, rhsIpnUrl)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            TrPaymentAuthSubmitHeaderDomain thePaymentAuthSubmitHeader;
            thePaymentAuthSubmitHeader = this.getPaymentAuthSubmitHeader();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "paymentAuthSubmitHeader", thePaymentAuthSubmitHeader), currentHashCode, thePaymentAuthSubmitHeader);
        }
        {
            List<TrPaymentAuthSubmitDomain> thePaymentAuthSubmit;
            thePaymentAuthSubmit = this.getPaymentAuthSubmit();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "paymentAuthSubmit", thePaymentAuthSubmit), currentHashCode, thePaymentAuthSubmit);
        }
        {
            String theReturnUrl;
            theReturnUrl = this.getReturnUrl();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "returnUrl", theReturnUrl), currentHashCode, theReturnUrl);
        }
        {
            String theCancelUrl;
            theCancelUrl = this.getCancelUrl();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "cancelUrl", theCancelUrl), currentHashCode, theCancelUrl);
        }
        {
            String theIpnUrl;
            theIpnUrl = this.getIpnUrl();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "ipnUrl", theIpnUrl), currentHashCode, theIpnUrl);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof CreatePaymentAuthSubmitRequest) {
            final CreatePaymentAuthSubmitRequest copy = ((CreatePaymentAuthSubmitRequest) draftCopy);
            if (this.paymentAuthSubmitHeader!= null) {
                TrPaymentAuthSubmitHeaderDomain sourcePaymentAuthSubmitHeader;
                sourcePaymentAuthSubmitHeader = this.getPaymentAuthSubmitHeader();
                TrPaymentAuthSubmitHeaderDomain copyPaymentAuthSubmitHeader = ((TrPaymentAuthSubmitHeaderDomain) strategy.copy(LocatorUtils.property(locator, "paymentAuthSubmitHeader", sourcePaymentAuthSubmitHeader), sourcePaymentAuthSubmitHeader));
                copy.setPaymentAuthSubmitHeader(copyPaymentAuthSubmitHeader);
            } else {
                copy.paymentAuthSubmitHeader = null;
            }
            if ((this.paymentAuthSubmit!= null)&&(!this.paymentAuthSubmit.isEmpty())) {
                List<TrPaymentAuthSubmitDomain> sourcePaymentAuthSubmit;
                sourcePaymentAuthSubmit = this.getPaymentAuthSubmit();
                @SuppressWarnings("unchecked")
                List<TrPaymentAuthSubmitDomain> copyPaymentAuthSubmit = ((List<TrPaymentAuthSubmitDomain> ) strategy.copy(LocatorUtils.property(locator, "paymentAuthSubmit", sourcePaymentAuthSubmit), sourcePaymentAuthSubmit));
                copy.paymentAuthSubmit = null;
                List<TrPaymentAuthSubmitDomain> uniquePaymentAuthSubmitl = copy.getPaymentAuthSubmit();
                uniquePaymentAuthSubmitl.addAll(copyPaymentAuthSubmit);
            } else {
                copy.paymentAuthSubmit = null;
            }
            if (this.returnUrl!= null) {
                String sourceReturnUrl;
                sourceReturnUrl = this.getReturnUrl();
                String copyReturnUrl = ((String) strategy.copy(LocatorUtils.property(locator, "returnUrl", sourceReturnUrl), sourceReturnUrl));
                copy.setReturnUrl(copyReturnUrl);
            } else {
                copy.returnUrl = null;
            }
            if (this.cancelUrl!= null) {
                String sourceCancelUrl;
                sourceCancelUrl = this.getCancelUrl();
                String copyCancelUrl = ((String) strategy.copy(LocatorUtils.property(locator, "cancelUrl", sourceCancelUrl), sourceCancelUrl));
                copy.setCancelUrl(copyCancelUrl);
            } else {
                copy.cancelUrl = null;
            }
            if (this.ipnUrl!= null) {
                String sourceIpnUrl;
                sourceIpnUrl = this.getIpnUrl();
                String copyIpnUrl = ((String) strategy.copy(LocatorUtils.property(locator, "ipnUrl", sourceIpnUrl), sourceIpnUrl));
                copy.setIpnUrl(copyIpnUrl);
            } else {
                copy.ipnUrl = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new CreatePaymentAuthSubmitRequest();
    }

}
