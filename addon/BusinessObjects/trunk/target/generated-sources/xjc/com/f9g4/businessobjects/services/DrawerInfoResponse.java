//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.2-7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.12.20 at 11:56:16 AM EST 
//


package com.f9g4.businessobjects.services;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import com.f9g4.businessobjects.common.Status;
import com.f9g4.businessobjects.domain.TrBoardSearchDomain;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for DrawerInfoResponse complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="DrawerInfoResponse">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="status" type="{http://common.businessobjects.f9g4.com}Status"/>
 *         &lt;element name="yourMessages" type="{http://services.businessobjects.f9g4.com}yourMessages" minOccurs="0"/>
 *         &lt;element name="stats" type="{http://services.businessobjects.f9g4.com}stats" minOccurs="0"/>
 *         &lt;element name="averagRating" type="{http://www.w3.org/2001/XMLSchema}double"/>
 *         &lt;element name="recentActivity" type="{http://domain.businessobjects.f9g4.com}trBoardSearchDomain" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element name="mayWeSuggest" type="{http://domain.businessobjects.f9g4.com}trBoardSearchDomain" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DrawerInfoResponse", propOrder = {
    "status",
    "yourMessages",
    "stats",
    "averagRating",
    "recentActivity",
    "mayWeSuggest"
})
@XmlRootElement(name = "DrawerInfoResponse")
public class DrawerInfoResponse implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(required = true)
    protected Status status;
    protected YourMessages yourMessages;
    protected Stats stats;
    protected double averagRating;
    protected List<TrBoardSearchDomain> recentActivity;
    protected List<TrBoardSearchDomain> mayWeSuggest;

    /**
     * Default no-arg constructor
     * 
     */
    public DrawerInfoResponse() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public DrawerInfoResponse(final Status status, final YourMessages yourMessages, final Stats stats, final double averagRating, final List<TrBoardSearchDomain> recentActivity, final List<TrBoardSearchDomain> mayWeSuggest) {
        this.status = status;
        this.yourMessages = yourMessages;
        this.stats = stats;
        this.averagRating = averagRating;
        this.recentActivity = recentActivity;
        this.mayWeSuggest = mayWeSuggest;
    }

    /**
     * Gets the value of the status property.
     * 
     * @return
     *     possible object is
     *     {@link Status }
     *     
     */
    public Status getStatus() {
        return status;
    }

    /**
     * Sets the value of the status property.
     * 
     * @param value
     *     allowed object is
     *     {@link Status }
     *     
     */
    public void setStatus(Status value) {
        this.status = value;
    }

    /**
     * Gets the value of the yourMessages property.
     * 
     * @return
     *     possible object is
     *     {@link YourMessages }
     *     
     */
    public YourMessages getYourMessages() {
        return yourMessages;
    }

    /**
     * Sets the value of the yourMessages property.
     * 
     * @param value
     *     allowed object is
     *     {@link YourMessages }
     *     
     */
    public void setYourMessages(YourMessages value) {
        this.yourMessages = value;
    }

    /**
     * Gets the value of the stats property.
     * 
     * @return
     *     possible object is
     *     {@link Stats }
     *     
     */
    public Stats getStats() {
        return stats;
    }

    /**
     * Sets the value of the stats property.
     * 
     * @param value
     *     allowed object is
     *     {@link Stats }
     *     
     */
    public void setStats(Stats value) {
        this.stats = value;
    }

    /**
     * Gets the value of the averagRating property.
     * 
     */
    public double getAveragRating() {
        return averagRating;
    }

    /**
     * Sets the value of the averagRating property.
     * 
     */
    public void setAveragRating(double value) {
        this.averagRating = value;
    }

    /**
     * Gets the value of the recentActivity property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the recentActivity property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getRecentActivity().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TrBoardSearchDomain }
     * 
     * 
     */
    public List<TrBoardSearchDomain> getRecentActivity() {
        if (recentActivity == null) {
            recentActivity = new ArrayList<TrBoardSearchDomain>();
        }
        return this.recentActivity;
    }

    /**
     * Gets the value of the mayWeSuggest property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the mayWeSuggest property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getMayWeSuggest().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link TrBoardSearchDomain }
     * 
     * 
     */
    public List<TrBoardSearchDomain> getMayWeSuggest() {
        if (mayWeSuggest == null) {
            mayWeSuggest = new ArrayList<TrBoardSearchDomain>();
        }
        return this.mayWeSuggest;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            Status theStatus;
            theStatus = this.getStatus();
            strategy.appendField(locator, this, "status", buffer, theStatus);
        }
        {
            YourMessages theYourMessages;
            theYourMessages = this.getYourMessages();
            strategy.appendField(locator, this, "yourMessages", buffer, theYourMessages);
        }
        {
            Stats theStats;
            theStats = this.getStats();
            strategy.appendField(locator, this, "stats", buffer, theStats);
        }
        {
            double theAveragRating;
            theAveragRating = this.getAveragRating();
            strategy.appendField(locator, this, "averagRating", buffer, theAveragRating);
        }
        {
            List<TrBoardSearchDomain> theRecentActivity;
            theRecentActivity = this.getRecentActivity();
            strategy.appendField(locator, this, "recentActivity", buffer, theRecentActivity);
        }
        {
            List<TrBoardSearchDomain> theMayWeSuggest;
            theMayWeSuggest = this.getMayWeSuggest();
            strategy.appendField(locator, this, "mayWeSuggest", buffer, theMayWeSuggest);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof DrawerInfoResponse)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final DrawerInfoResponse that = ((DrawerInfoResponse) object);
        {
            Status lhsStatus;
            lhsStatus = this.getStatus();
            Status rhsStatus;
            rhsStatus = that.getStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "status", lhsStatus), LocatorUtils.property(thatLocator, "status", rhsStatus), lhsStatus, rhsStatus)) {
                return false;
            }
        }
        {
            YourMessages lhsYourMessages;
            lhsYourMessages = this.getYourMessages();
            YourMessages rhsYourMessages;
            rhsYourMessages = that.getYourMessages();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "yourMessages", lhsYourMessages), LocatorUtils.property(thatLocator, "yourMessages", rhsYourMessages), lhsYourMessages, rhsYourMessages)) {
                return false;
            }
        }
        {
            Stats lhsStats;
            lhsStats = this.getStats();
            Stats rhsStats;
            rhsStats = that.getStats();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "stats", lhsStats), LocatorUtils.property(thatLocator, "stats", rhsStats), lhsStats, rhsStats)) {
                return false;
            }
        }
        {
            double lhsAveragRating;
            lhsAveragRating = this.getAveragRating();
            double rhsAveragRating;
            rhsAveragRating = that.getAveragRating();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "averagRating", lhsAveragRating), LocatorUtils.property(thatLocator, "averagRating", rhsAveragRating), lhsAveragRating, rhsAveragRating)) {
                return false;
            }
        }
        {
            List<TrBoardSearchDomain> lhsRecentActivity;
            lhsRecentActivity = this.getRecentActivity();
            List<TrBoardSearchDomain> rhsRecentActivity;
            rhsRecentActivity = that.getRecentActivity();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "recentActivity", lhsRecentActivity), LocatorUtils.property(thatLocator, "recentActivity", rhsRecentActivity), lhsRecentActivity, rhsRecentActivity)) {
                return false;
            }
        }
        {
            List<TrBoardSearchDomain> lhsMayWeSuggest;
            lhsMayWeSuggest = this.getMayWeSuggest();
            List<TrBoardSearchDomain> rhsMayWeSuggest;
            rhsMayWeSuggest = that.getMayWeSuggest();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "mayWeSuggest", lhsMayWeSuggest), LocatorUtils.property(thatLocator, "mayWeSuggest", rhsMayWeSuggest), lhsMayWeSuggest, rhsMayWeSuggest)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            Status theStatus;
            theStatus = this.getStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "status", theStatus), currentHashCode, theStatus);
        }
        {
            YourMessages theYourMessages;
            theYourMessages = this.getYourMessages();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "yourMessages", theYourMessages), currentHashCode, theYourMessages);
        }
        {
            Stats theStats;
            theStats = this.getStats();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "stats", theStats), currentHashCode, theStats);
        }
        {
            double theAveragRating;
            theAveragRating = this.getAveragRating();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "averagRating", theAveragRating), currentHashCode, theAveragRating);
        }
        {
            List<TrBoardSearchDomain> theRecentActivity;
            theRecentActivity = this.getRecentActivity();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "recentActivity", theRecentActivity), currentHashCode, theRecentActivity);
        }
        {
            List<TrBoardSearchDomain> theMayWeSuggest;
            theMayWeSuggest = this.getMayWeSuggest();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "mayWeSuggest", theMayWeSuggest), currentHashCode, theMayWeSuggest);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof DrawerInfoResponse) {
            final DrawerInfoResponse copy = ((DrawerInfoResponse) draftCopy);
            if (this.status!= null) {
                Status sourceStatus;
                sourceStatus = this.getStatus();
                Status copyStatus = ((Status) strategy.copy(LocatorUtils.property(locator, "status", sourceStatus), sourceStatus));
                copy.setStatus(copyStatus);
            } else {
                copy.status = null;
            }
            if (this.yourMessages!= null) {
                YourMessages sourceYourMessages;
                sourceYourMessages = this.getYourMessages();
                YourMessages copyYourMessages = ((YourMessages) strategy.copy(LocatorUtils.property(locator, "yourMessages", sourceYourMessages), sourceYourMessages));
                copy.setYourMessages(copyYourMessages);
            } else {
                copy.yourMessages = null;
            }
            if (this.stats!= null) {
                Stats sourceStats;
                sourceStats = this.getStats();
                Stats copyStats = ((Stats) strategy.copy(LocatorUtils.property(locator, "stats", sourceStats), sourceStats));
                copy.setStats(copyStats);
            } else {
                copy.stats = null;
            }
            double sourceAveragRating;
            sourceAveragRating = this.getAveragRating();
            double copyAveragRating = strategy.copy(LocatorUtils.property(locator, "averagRating", sourceAveragRating), sourceAveragRating);
            copy.setAveragRating(copyAveragRating);
            if ((this.recentActivity!= null)&&(!this.recentActivity.isEmpty())) {
                List<TrBoardSearchDomain> sourceRecentActivity;
                sourceRecentActivity = this.getRecentActivity();
                @SuppressWarnings("unchecked")
                List<TrBoardSearchDomain> copyRecentActivity = ((List<TrBoardSearchDomain> ) strategy.copy(LocatorUtils.property(locator, "recentActivity", sourceRecentActivity), sourceRecentActivity));
                copy.recentActivity = null;
                List<TrBoardSearchDomain> uniqueRecentActivityl = copy.getRecentActivity();
                uniqueRecentActivityl.addAll(copyRecentActivity);
            } else {
                copy.recentActivity = null;
            }
            if ((this.mayWeSuggest!= null)&&(!this.mayWeSuggest.isEmpty())) {
                List<TrBoardSearchDomain> sourceMayWeSuggest;
                sourceMayWeSuggest = this.getMayWeSuggest();
                @SuppressWarnings("unchecked")
                List<TrBoardSearchDomain> copyMayWeSuggest = ((List<TrBoardSearchDomain> ) strategy.copy(LocatorUtils.property(locator, "mayWeSuggest", sourceMayWeSuggest), sourceMayWeSuggest));
                copy.mayWeSuggest = null;
                List<TrBoardSearchDomain> uniqueMayWeSuggestl = copy.getMayWeSuggest();
                uniqueMayWeSuggestl.addAll(copyMayWeSuggest);
            } else {
                copy.mayWeSuggest = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new DrawerInfoResponse();
    }

}
