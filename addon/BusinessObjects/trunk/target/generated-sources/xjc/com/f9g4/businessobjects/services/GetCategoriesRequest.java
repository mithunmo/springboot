//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.2-7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.12.20 at 11:56:16 AM EST 
//


package com.f9g4.businessobjects.services;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import com.f9g4.businessobjects.common.Status;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for GetCategoriesRequest complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="GetCategoriesRequest">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="status" type="{http://common.businessobjects.f9g4.com}Status"/>
 *         &lt;element name="level" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *         &lt;element name="portfolioId" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *         &lt;element name="level1" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *         &lt;element name="level2" type="{http://www.w3.org/2001/XMLSchema}int"/>
 *         &lt;element name="nameForLevel3" type="{http://www.w3.org/2001/XMLSchema}string" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "GetCategoriesRequest", propOrder = {
    "status",
    "level",
    "portfolioId",
    "level1",
    "level2",
    "nameForLevel3"
})
@XmlRootElement(name = "GetCategoriesRequest")
public class GetCategoriesRequest implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(required = true)
    protected Status status;
    protected int level;
    protected int portfolioId;
    protected int level1;
    protected int level2;
    protected List<String> nameForLevel3;

    /**
     * Default no-arg constructor
     * 
     */
    public GetCategoriesRequest() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public GetCategoriesRequest(final Status status, final int level, final int portfolioId, final int level1, final int level2, final List<String> nameForLevel3) {
        this.status = status;
        this.level = level;
        this.portfolioId = portfolioId;
        this.level1 = level1;
        this.level2 = level2;
        this.nameForLevel3 = nameForLevel3;
    }

    /**
     * Gets the value of the status property.
     * 
     * @return
     *     possible object is
     *     {@link Status }
     *     
     */
    public Status getStatus() {
        return status;
    }

    /**
     * Sets the value of the status property.
     * 
     * @param value
     *     allowed object is
     *     {@link Status }
     *     
     */
    public void setStatus(Status value) {
        this.status = value;
    }

    /**
     * Gets the value of the level property.
     * 
     */
    public int getLevel() {
        return level;
    }

    /**
     * Sets the value of the level property.
     * 
     */
    public void setLevel(int value) {
        this.level = value;
    }

    /**
     * Gets the value of the portfolioId property.
     * 
     */
    public int getPortfolioId() {
        return portfolioId;
    }

    /**
     * Sets the value of the portfolioId property.
     * 
     */
    public void setPortfolioId(int value) {
        this.portfolioId = value;
    }

    /**
     * Gets the value of the level1 property.
     * 
     */
    public int getLevel1() {
        return level1;
    }

    /**
     * Sets the value of the level1 property.
     * 
     */
    public void setLevel1(int value) {
        this.level1 = value;
    }

    /**
     * Gets the value of the level2 property.
     * 
     */
    public int getLevel2() {
        return level2;
    }

    /**
     * Sets the value of the level2 property.
     * 
     */
    public void setLevel2(int value) {
        this.level2 = value;
    }

    /**
     * Gets the value of the nameForLevel3 property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the nameForLevel3 property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getNameForLevel3().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link String }
     * 
     * 
     */
    public List<String> getNameForLevel3() {
        if (nameForLevel3 == null) {
            nameForLevel3 = new ArrayList<String>();
        }
        return this.nameForLevel3;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            Status theStatus;
            theStatus = this.getStatus();
            strategy.appendField(locator, this, "status", buffer, theStatus);
        }
        {
            int theLevel;
            theLevel = this.getLevel();
            strategy.appendField(locator, this, "level", buffer, theLevel);
        }
        {
            int thePortfolioId;
            thePortfolioId = this.getPortfolioId();
            strategy.appendField(locator, this, "portfolioId", buffer, thePortfolioId);
        }
        {
            int theLevel1;
            theLevel1 = this.getLevel1();
            strategy.appendField(locator, this, "level1", buffer, theLevel1);
        }
        {
            int theLevel2;
            theLevel2 = this.getLevel2();
            strategy.appendField(locator, this, "level2", buffer, theLevel2);
        }
        {
            List<String> theNameForLevel3;
            theNameForLevel3 = this.getNameForLevel3();
            strategy.appendField(locator, this, "nameForLevel3", buffer, theNameForLevel3);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof GetCategoriesRequest)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final GetCategoriesRequest that = ((GetCategoriesRequest) object);
        {
            Status lhsStatus;
            lhsStatus = this.getStatus();
            Status rhsStatus;
            rhsStatus = that.getStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "status", lhsStatus), LocatorUtils.property(thatLocator, "status", rhsStatus), lhsStatus, rhsStatus)) {
                return false;
            }
        }
        {
            int lhsLevel;
            lhsLevel = this.getLevel();
            int rhsLevel;
            rhsLevel = that.getLevel();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "level", lhsLevel), LocatorUtils.property(thatLocator, "level", rhsLevel), lhsLevel, rhsLevel)) {
                return false;
            }
        }
        {
            int lhsPortfolioId;
            lhsPortfolioId = this.getPortfolioId();
            int rhsPortfolioId;
            rhsPortfolioId = that.getPortfolioId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "portfolioId", lhsPortfolioId), LocatorUtils.property(thatLocator, "portfolioId", rhsPortfolioId), lhsPortfolioId, rhsPortfolioId)) {
                return false;
            }
        }
        {
            int lhsLevel1;
            lhsLevel1 = this.getLevel1();
            int rhsLevel1;
            rhsLevel1 = that.getLevel1();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "level1", lhsLevel1), LocatorUtils.property(thatLocator, "level1", rhsLevel1), lhsLevel1, rhsLevel1)) {
                return false;
            }
        }
        {
            int lhsLevel2;
            lhsLevel2 = this.getLevel2();
            int rhsLevel2;
            rhsLevel2 = that.getLevel2();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "level2", lhsLevel2), LocatorUtils.property(thatLocator, "level2", rhsLevel2), lhsLevel2, rhsLevel2)) {
                return false;
            }
        }
        {
            List<String> lhsNameForLevel3;
            lhsNameForLevel3 = this.getNameForLevel3();
            List<String> rhsNameForLevel3;
            rhsNameForLevel3 = that.getNameForLevel3();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "nameForLevel3", lhsNameForLevel3), LocatorUtils.property(thatLocator, "nameForLevel3", rhsNameForLevel3), lhsNameForLevel3, rhsNameForLevel3)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            Status theStatus;
            theStatus = this.getStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "status", theStatus), currentHashCode, theStatus);
        }
        {
            int theLevel;
            theLevel = this.getLevel();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "level", theLevel), currentHashCode, theLevel);
        }
        {
            int thePortfolioId;
            thePortfolioId = this.getPortfolioId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "portfolioId", thePortfolioId), currentHashCode, thePortfolioId);
        }
        {
            int theLevel1;
            theLevel1 = this.getLevel1();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "level1", theLevel1), currentHashCode, theLevel1);
        }
        {
            int theLevel2;
            theLevel2 = this.getLevel2();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "level2", theLevel2), currentHashCode, theLevel2);
        }
        {
            List<String> theNameForLevel3;
            theNameForLevel3 = this.getNameForLevel3();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "nameForLevel3", theNameForLevel3), currentHashCode, theNameForLevel3);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof GetCategoriesRequest) {
            final GetCategoriesRequest copy = ((GetCategoriesRequest) draftCopy);
            if (this.status!= null) {
                Status sourceStatus;
                sourceStatus = this.getStatus();
                Status copyStatus = ((Status) strategy.copy(LocatorUtils.property(locator, "status", sourceStatus), sourceStatus));
                copy.setStatus(copyStatus);
            } else {
                copy.status = null;
            }
            int sourceLevel;
            sourceLevel = this.getLevel();
            int copyLevel = strategy.copy(LocatorUtils.property(locator, "level", sourceLevel), sourceLevel);
            copy.setLevel(copyLevel);
            int sourcePortfolioId;
            sourcePortfolioId = this.getPortfolioId();
            int copyPortfolioId = strategy.copy(LocatorUtils.property(locator, "portfolioId", sourcePortfolioId), sourcePortfolioId);
            copy.setPortfolioId(copyPortfolioId);
            int sourceLevel1;
            sourceLevel1 = this.getLevel1();
            int copyLevel1 = strategy.copy(LocatorUtils.property(locator, "level1", sourceLevel1), sourceLevel1);
            copy.setLevel1(copyLevel1);
            int sourceLevel2;
            sourceLevel2 = this.getLevel2();
            int copyLevel2 = strategy.copy(LocatorUtils.property(locator, "level2", sourceLevel2), sourceLevel2);
            copy.setLevel2(copyLevel2);
            if ((this.nameForLevel3 != null)&&(!this.nameForLevel3 .isEmpty())) {
                List<String> sourceNameForLevel3;
                sourceNameForLevel3 = this.getNameForLevel3();
                @SuppressWarnings("unchecked")
                List<String> copyNameForLevel3 = ((List<String> ) strategy.copy(LocatorUtils.property(locator, "nameForLevel3", sourceNameForLevel3), sourceNameForLevel3));
                copy.nameForLevel3 = null;
                List<String> uniqueNameForLevel3l = copy.getNameForLevel3();
                uniqueNameForLevel3l.addAll(copyNameForLevel3);
            } else {
                copy.nameForLevel3 = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new GetCategoriesRequest();
    }

}
