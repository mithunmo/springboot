//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vhudson-jaxb-ri-2.2-7 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.12.20 at 11:56:16 AM EST 
//


package com.f9g4.businessobjects.services;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import com.f9g4.businessobjects.common.Status;
import com.f9g4.businessobjects.domain.AdUsersDomain;
import org.jvnet.jaxb2_commons.lang.CopyStrategy;
import org.jvnet.jaxb2_commons.lang.CopyTo;
import org.jvnet.jaxb2_commons.lang.Equals;
import org.jvnet.jaxb2_commons.lang.EqualsStrategy;
import org.jvnet.jaxb2_commons.lang.HashCode;
import org.jvnet.jaxb2_commons.lang.HashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBCopyStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBEqualsStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBHashCodeStrategy;
import org.jvnet.jaxb2_commons.lang.JAXBToStringStrategy;
import org.jvnet.jaxb2_commons.lang.ToString;
import org.jvnet.jaxb2_commons.lang.ToStringStrategy;
import org.jvnet.jaxb2_commons.locator.ObjectLocator;
import org.jvnet.jaxb2_commons.locator.util.LocatorUtils;


/**
 * <p>Java class for ValidateUserResponse complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ValidateUserResponse">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="status" type="{http://common.businessobjects.f9g4.com}Status"/>
 *         &lt;element name="user" type="{http://domain.businessobjects.f9g4.com}adUsersDomain"/>
 *         &lt;element name="termsExprired" type="{http://www.w3.org/2001/XMLSchema}boolean"/>
 *         &lt;element name="membershipExprired" type="{http://www.w3.org/2001/XMLSchema}boolean"/>
 *         &lt;element name="latestTermsId" type="{http://www.w3.org/2001/XMLSchema}int" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ValidateUserResponse", propOrder = {
    "status",
    "user",
    "termsExprired",
    "membershipExprired",
    "latestTermsId"
})
@XmlRootElement(name = "ValidateUserResponse")
public class ValidateUserResponse implements Cloneable, CopyTo, Equals, HashCode, ToString
{

    @XmlElement(required = true)
    protected Status status;
    @XmlElement(required = true)
    protected AdUsersDomain user;
    protected boolean termsExprired;
    protected boolean membershipExprired;
    protected Integer latestTermsId;

    /**
     * Default no-arg constructor
     * 
     */
    public ValidateUserResponse() {
        super();
    }

    /**
     * Fully-initialising value constructor
     * 
     */
    public ValidateUserResponse(final Status status, final AdUsersDomain user, final boolean termsExprired, final boolean membershipExprired, final Integer latestTermsId) {
        this.status = status;
        this.user = user;
        this.termsExprired = termsExprired;
        this.membershipExprired = membershipExprired;
        this.latestTermsId = latestTermsId;
    }

    /**
     * Gets the value of the status property.
     * 
     * @return
     *     possible object is
     *     {@link Status }
     *     
     */
    public Status getStatus() {
        return status;
    }

    /**
     * Sets the value of the status property.
     * 
     * @param value
     *     allowed object is
     *     {@link Status }
     *     
     */
    public void setStatus(Status value) {
        this.status = value;
    }

    /**
     * Gets the value of the user property.
     * 
     * @return
     *     possible object is
     *     {@link AdUsersDomain }
     *     
     */
    public AdUsersDomain getUser() {
        return user;
    }

    /**
     * Sets the value of the user property.
     * 
     * @param value
     *     allowed object is
     *     {@link AdUsersDomain }
     *     
     */
    public void setUser(AdUsersDomain value) {
        this.user = value;
    }

    /**
     * Gets the value of the termsExprired property.
     * 
     */
    public boolean isTermsExprired() {
        return termsExprired;
    }

    /**
     * Sets the value of the termsExprired property.
     * 
     */
    public void setTermsExprired(boolean value) {
        this.termsExprired = value;
    }

    /**
     * Gets the value of the membershipExprired property.
     * 
     */
    public boolean isMembershipExprired() {
        return membershipExprired;
    }

    /**
     * Sets the value of the membershipExprired property.
     * 
     */
    public void setMembershipExprired(boolean value) {
        this.membershipExprired = value;
    }

    /**
     * Gets the value of the latestTermsId property.
     * 
     * @return
     *     possible object is
     *     {@link Integer }
     *     
     */
    public Integer getLatestTermsId() {
        return latestTermsId;
    }

    /**
     * Sets the value of the latestTermsId property.
     * 
     * @param value
     *     allowed object is
     *     {@link Integer }
     *     
     */
    public void setLatestTermsId(Integer value) {
        this.latestTermsId = value;
    }

    public String toString() {
        final ToStringStrategy strategy = JAXBToStringStrategy.INSTANCE;
        final StringBuilder buffer = new StringBuilder();
        append(null, buffer, strategy);
        return buffer.toString();
    }

    public StringBuilder append(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        strategy.appendStart(locator, this, buffer);
        appendFields(locator, buffer, strategy);
        strategy.appendEnd(locator, this, buffer);
        return buffer;
    }

    public StringBuilder appendFields(ObjectLocator locator, StringBuilder buffer, ToStringStrategy strategy) {
        {
            Status theStatus;
            theStatus = this.getStatus();
            strategy.appendField(locator, this, "status", buffer, theStatus);
        }
        {
            AdUsersDomain theUser;
            theUser = this.getUser();
            strategy.appendField(locator, this, "user", buffer, theUser);
        }
        {
            boolean theTermsExprired;
            theTermsExprired = this.isTermsExprired();
            strategy.appendField(locator, this, "termsExprired", buffer, theTermsExprired);
        }
        {
            boolean theMembershipExprired;
            theMembershipExprired = this.isMembershipExprired();
            strategy.appendField(locator, this, "membershipExprired", buffer, theMembershipExprired);
        }
        {
            Integer theLatestTermsId;
            theLatestTermsId = this.getLatestTermsId();
            strategy.appendField(locator, this, "latestTermsId", buffer, theLatestTermsId);
        }
        return buffer;
    }

    public boolean equals(ObjectLocator thisLocator, ObjectLocator thatLocator, Object object, EqualsStrategy strategy) {
        if (!(object instanceof ValidateUserResponse)) {
            return false;
        }
        if (this == object) {
            return true;
        }
        final ValidateUserResponse that = ((ValidateUserResponse) object);
        {
            Status lhsStatus;
            lhsStatus = this.getStatus();
            Status rhsStatus;
            rhsStatus = that.getStatus();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "status", lhsStatus), LocatorUtils.property(thatLocator, "status", rhsStatus), lhsStatus, rhsStatus)) {
                return false;
            }
        }
        {
            AdUsersDomain lhsUser;
            lhsUser = this.getUser();
            AdUsersDomain rhsUser;
            rhsUser = that.getUser();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "user", lhsUser), LocatorUtils.property(thatLocator, "user", rhsUser), lhsUser, rhsUser)) {
                return false;
            }
        }
        {
            boolean lhsTermsExprired;
            lhsTermsExprired = this.isTermsExprired();
            boolean rhsTermsExprired;
            rhsTermsExprired = that.isTermsExprired();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "termsExprired", lhsTermsExprired), LocatorUtils.property(thatLocator, "termsExprired", rhsTermsExprired), lhsTermsExprired, rhsTermsExprired)) {
                return false;
            }
        }
        {
            boolean lhsMembershipExprired;
            lhsMembershipExprired = this.isMembershipExprired();
            boolean rhsMembershipExprired;
            rhsMembershipExprired = that.isMembershipExprired();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "membershipExprired", lhsMembershipExprired), LocatorUtils.property(thatLocator, "membershipExprired", rhsMembershipExprired), lhsMembershipExprired, rhsMembershipExprired)) {
                return false;
            }
        }
        {
            Integer lhsLatestTermsId;
            lhsLatestTermsId = this.getLatestTermsId();
            Integer rhsLatestTermsId;
            rhsLatestTermsId = that.getLatestTermsId();
            if (!strategy.equals(LocatorUtils.property(thisLocator, "latestTermsId", lhsLatestTermsId), LocatorUtils.property(thatLocator, "latestTermsId", rhsLatestTermsId), lhsLatestTermsId, rhsLatestTermsId)) {
                return false;
            }
        }
        return true;
    }

    public boolean equals(Object object) {
        final EqualsStrategy strategy = JAXBEqualsStrategy.INSTANCE;
        return equals(null, null, object, strategy);
    }

    public int hashCode(ObjectLocator locator, HashCodeStrategy strategy) {
        int currentHashCode = 1;
        {
            Status theStatus;
            theStatus = this.getStatus();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "status", theStatus), currentHashCode, theStatus);
        }
        {
            AdUsersDomain theUser;
            theUser = this.getUser();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "user", theUser), currentHashCode, theUser);
        }
        {
            boolean theTermsExprired;
            theTermsExprired = this.isTermsExprired();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "termsExprired", theTermsExprired), currentHashCode, theTermsExprired);
        }
        {
            boolean theMembershipExprired;
            theMembershipExprired = this.isMembershipExprired();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "membershipExprired", theMembershipExprired), currentHashCode, theMembershipExprired);
        }
        {
            Integer theLatestTermsId;
            theLatestTermsId = this.getLatestTermsId();
            currentHashCode = strategy.hashCode(LocatorUtils.property(locator, "latestTermsId", theLatestTermsId), currentHashCode, theLatestTermsId);
        }
        return currentHashCode;
    }

    public int hashCode() {
        final HashCodeStrategy strategy = JAXBHashCodeStrategy.INSTANCE;
        return this.hashCode(null, strategy);
    }

    public Object clone() {
        return copyTo(createNewInstance());
    }

    public Object copyTo(Object target) {
        final CopyStrategy strategy = JAXBCopyStrategy.INSTANCE;
        return copyTo(null, target, strategy);
    }

    public Object copyTo(ObjectLocator locator, Object target, CopyStrategy strategy) {
        final Object draftCopy = ((target == null)?createNewInstance():target);
        if (draftCopy instanceof ValidateUserResponse) {
            final ValidateUserResponse copy = ((ValidateUserResponse) draftCopy);
            if (this.status!= null) {
                Status sourceStatus;
                sourceStatus = this.getStatus();
                Status copyStatus = ((Status) strategy.copy(LocatorUtils.property(locator, "status", sourceStatus), sourceStatus));
                copy.setStatus(copyStatus);
            } else {
                copy.status = null;
            }
            if (this.user!= null) {
                AdUsersDomain sourceUser;
                sourceUser = this.getUser();
                AdUsersDomain copyUser = ((AdUsersDomain) strategy.copy(LocatorUtils.property(locator, "user", sourceUser), sourceUser));
                copy.setUser(copyUser);
            } else {
                copy.user = null;
            }
            boolean sourceTermsExprired;
            sourceTermsExprired = this.isTermsExprired();
            boolean copyTermsExprired = strategy.copy(LocatorUtils.property(locator, "termsExprired", sourceTermsExprired), sourceTermsExprired);
            copy.setTermsExprired(copyTermsExprired);
            boolean sourceMembershipExprired;
            sourceMembershipExprired = this.isMembershipExprired();
            boolean copyMembershipExprired = strategy.copy(LocatorUtils.property(locator, "membershipExprired", sourceMembershipExprired), sourceMembershipExprired);
            copy.setMembershipExprired(copyMembershipExprired);
            if (this.latestTermsId!= null) {
                Integer sourceLatestTermsId;
                sourceLatestTermsId = this.getLatestTermsId();
                Integer copyLatestTermsId = ((Integer) strategy.copy(LocatorUtils.property(locator, "latestTermsId", sourceLatestTermsId), sourceLatestTermsId));
                copy.setLatestTermsId(copyLatestTermsId);
            } else {
                copy.latestTermsId = null;
            }
        }
        return draftCopy;
    }

    public Object createNewInstance() {
        return new ValidateUserResponse();
    }

}
